/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MessagesIcs_textParameters.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

MessagesIcs_textParameters::MessagesIcs_textParameters()
{
    m_Cost = 0.0;
    m_Parts = 0;
    m_Chars = 0;
    m_Encoding = utility::conversions::to_string_t("");
    m_CharsetLabel = utility::conversions::to_string_t("");
}

MessagesIcs_textParameters::~MessagesIcs_textParameters()
{
}

void MessagesIcs_textParameters::validate()
{
    // TODO: implement validation
}

web::json::value MessagesIcs_textParameters::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("cost")] = ModelBase::toJson(m_Cost);
    val[utility::conversions::to_string_t("parts")] = ModelBase::toJson(m_Parts);
    val[utility::conversions::to_string_t("chars")] = ModelBase::toJson(m_Chars);
    val[utility::conversions::to_string_t("encoding")] = ModelBase::toJson(m_Encoding);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Countries )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("countries")] = web::json::value::array(jsonArray);
    }
    val[utility::conversions::to_string_t("charsetLabel")] = ModelBase::toJson(m_CharsetLabel);

    return val;
}

void MessagesIcs_textParameters::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cost")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cost")];
        if(!fieldValue.is_null())
        {
            setCost(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parts")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("parts")];
        if(!fieldValue.is_null())
        {
            setParts(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chars")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chars")];
        if(!fieldValue.is_null())
        {
            setChars(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("encoding")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("encoding")];
        if(!fieldValue.is_null())
        {
            setEncoding(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Countries.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("countries")))
        {
        for( auto& item : val[utility::conversions::to_string_t("countries")].as_array() )
        {
            m_Countries.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("charsetLabel")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("charsetLabel")];
        if(!fieldValue.is_null())
        {
            setCharsetLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void MessagesIcs_textParameters::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cost"), m_Cost));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parts"), m_Parts));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chars"), m_Chars));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("encoding"), m_Encoding));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Countries )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("countries"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("charsetLabel"), m_CharsetLabel));
}

void MessagesIcs_textParameters::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setCost(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cost"))));
    setParts(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("parts"))));
    setChars(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chars"))));
    setEncoding(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("encoding"))));
    {
        m_Countries.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("countries"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Countries.push_back(ModelBase::stringFromJson(item));
        }
    }
    setCharsetLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("charsetLabel"))));
}

double MessagesIcs_textParameters::getCost() const
{
    return m_Cost;
}


void MessagesIcs_textParameters::setCost(double value)
{
    m_Cost = value;
    
}
int32_t MessagesIcs_textParameters::getParts() const
{
    return m_Parts;
}


void MessagesIcs_textParameters::setParts(int32_t value)
{
    m_Parts = value;
    
}
int32_t MessagesIcs_textParameters::getChars() const
{
    return m_Chars;
}


void MessagesIcs_textParameters::setChars(int32_t value)
{
    m_Chars = value;
    
}
utility::string_t MessagesIcs_textParameters::getEncoding() const
{
    return m_Encoding;
}


void MessagesIcs_textParameters::setEncoding(utility::string_t value)
{
    m_Encoding = value;
    
}
std::vector<utility::string_t>& MessagesIcs_textParameters::getCountries()
{
    return m_Countries;
}

void MessagesIcs_textParameters::setCountries(std::vector<utility::string_t> value)
{
    m_Countries = value;
    
}
utility::string_t MessagesIcs_textParameters::getCharsetLabel() const
{
    return m_CharsetLabel;
}


void MessagesIcs_textParameters::setCharsetLabel(utility::string_t value)
{
    m_CharsetLabel = value;
    
}
}
}
}
}

