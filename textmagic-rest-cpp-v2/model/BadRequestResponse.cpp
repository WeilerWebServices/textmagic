/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BadRequestResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

BadRequestResponse::BadRequestResponse()
{
    m_Code = 0;
    m_CodeIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_ErrorsIsSet = false;
}

BadRequestResponse::~BadRequestResponse()
{
}

void BadRequestResponse::validate()
{
    // TODO: implement validation
}

web::json::value BadRequestResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t("code")] = ModelBase::toJson(m_Code);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    if(m_ErrorsIsSet)
    {
        val[utility::conversions::to_string_t("errors")] = ModelBase::toJson(m_Errors);
    }

    return val;
}

void BadRequestResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("code")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("code")];
        if(!fieldValue.is_null())
        {
            setCode(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("message")];
        if(!fieldValue.is_null())
        {
            setMessage(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errors")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("errors")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BadRequestResponse_errors> newItem(new BadRequestResponse_errors());
            newItem->fromJson(fieldValue);
            setErrors( newItem );
        }
    }
}

void BadRequestResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("code"), m_Code));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
        
    }
    if(m_ErrorsIsSet)
    {
        if (m_Errors.get())
        {
            m_Errors->toMultipart(multipart, utility::conversions::to_string_t("errors."));
        }
        
    }
}

void BadRequestResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("code")))
    {
        setCode(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("code"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("message"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errors")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("errors")))
        {
            std::shared_ptr<BadRequestResponse_errors> newItem(new BadRequestResponse_errors());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("errors."));
            setErrors( newItem );
        }
    }
}

int32_t BadRequestResponse::getCode() const
{
    return m_Code;
}


void BadRequestResponse::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool BadRequestResponse::codeIsSet() const
{
    return m_CodeIsSet;
}

void BadRequestResponse::unsetCode()
{
    m_CodeIsSet = false;
}

utility::string_t BadRequestResponse::getMessage() const
{
    return m_Message;
}


void BadRequestResponse::setMessage(utility::string_t value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool BadRequestResponse::messageIsSet() const
{
    return m_MessageIsSet;
}

void BadRequestResponse::unsetMessage()
{
    m_MessageIsSet = false;
}

std::shared_ptr<BadRequestResponse_errors> BadRequestResponse::getErrors() const
{
    return m_Errors;
}


void BadRequestResponse::setErrors(std::shared_ptr<BadRequestResponse_errors> value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}
bool BadRequestResponse::errorsIsSet() const
{
    return m_ErrorsIsSet;
}

void BadRequestResponse::unsetErrors()
{
    m_ErrorsIsSet = false;
}

}
}
}
}

