/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TextmagicClient) {
      root.TextmagicClient = {};
    }
    root.TextmagicClient.Conversation = factory(root.TextmagicClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Conversation model module.
   * @module model/Conversation
   * @version 2.0.1588
   */

  /**
   * Constructs a new <code>Conversation</code>.
   * @alias module:model/Conversation
   * @class
   * @param id {Number} 
   * @param direction {module:model/Conversation.DirectionEnum} Message type: inbound or outbound. 
   * @param sender {String} Sender phone number.
   * @param messageTime {Date} Time when  the message arrived at TextMagic.
   * @param text {String} Message text.
   * @param receiver {String} Receiver's phone number.
   * @param status {String} Message status (for chats outbound only). See [message delivery statuses](https://docs.textmagic.com/#section/Delivery-status-codes) for details.
   * @param firstName {String} Contact first name.
   * @param lastName {String} Contact last name.
   * @param sessionId {Number} Session ID of a message. See [message sessions](https://docs.textmagic.com/#tag/Outbound-Message-Sessions) for details.
   */
  var exports = function(id, direction, sender, messageTime, text, receiver, status, firstName, lastName, sessionId) {
    this.id = id;
    this.direction = direction;
    this.sender = sender;
    this.messageTime = messageTime;
    this.text = text;
    this.receiver = receiver;
    this.status = status;
    this.firstName = firstName;
    this.lastName = lastName;
    this.sessionId = sessionId;
  };

  /**
   * Constructs a <code>Conversation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Conversation} obj Optional instance to populate.
   * @return {module:model/Conversation} The populated <code>Conversation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('direction'))
        obj.direction = ApiClient.convertToType(data['direction'], 'String');
      if (data.hasOwnProperty('sender'))
        obj.sender = ApiClient.convertToType(data['sender'], 'String');
      if (data.hasOwnProperty('messageTime'))
        obj.messageTime = ApiClient.convertToType(data['messageTime'], 'Date');
      if (data.hasOwnProperty('text'))
        obj.text = ApiClient.convertToType(data['text'], 'String');
      if (data.hasOwnProperty('receiver'))
        obj.receiver = ApiClient.convertToType(data['receiver'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('firstName'))
        obj.firstName = ApiClient.convertToType(data['firstName'], 'String');
      if (data.hasOwnProperty('lastName'))
        obj.lastName = ApiClient.convertToType(data['lastName'], 'String');
      if (data.hasOwnProperty('sessionId'))
        obj.sessionId = ApiClient.convertToType(data['sessionId'], 'Number');
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * Message type: inbound or outbound. 
   * @member {module:model/Conversation.DirectionEnum} direction
   */
  exports.prototype.direction = undefined;

  /**
   * Sender phone number.
   * @member {String} sender
   */
  exports.prototype.sender = undefined;

  /**
   * Time when  the message arrived at TextMagic.
   * @member {Date} messageTime
   */
  exports.prototype.messageTime = undefined;

  /**
   * Message text.
   * @member {String} text
   */
  exports.prototype.text = undefined;

  /**
   * Receiver's phone number.
   * @member {String} receiver
   */
  exports.prototype.receiver = undefined;

  /**
   * Message status (for chats outbound only). See [message delivery statuses](https://docs.textmagic.com/#section/Delivery-status-codes) for details.
   * @member {String} status
   */
  exports.prototype.status = undefined;

  /**
   * Contact first name.
   * @member {String} firstName
   */
  exports.prototype.firstName = undefined;

  /**
   * Contact last name.
   * @member {String} lastName
   */
  exports.prototype.lastName = undefined;

  /**
   * Session ID of a message. See [message sessions](https://docs.textmagic.com/#tag/Outbound-Message-Sessions) for details.
   * @member {Number} sessionId
   */
  exports.prototype.sessionId = undefined;


  /**
   * Allowed values for the <code>direction</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DirectionEnum = {
    /**
     * value: "in"
     * @const
     */
    _in: "in",

    /**
     * value: "out"
     * @const
     */
    out: "out",

    /**
     * value: "o"
     * @const
     */
    o: "o",

    /**
     * value: "i"
     * @const
     */
    i: "i"
  };

  return exports;

}));
