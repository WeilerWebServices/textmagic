/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BadRequestResponse_errors.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

BadRequestResponse_errors::BadRequestResponse_errors()
{
    m_CommonIsSet = false;
    m_FieldsIsSet = false;
}

BadRequestResponse_errors::~BadRequestResponse_errors()
{
}

void BadRequestResponse_errors::validate()
{
    // TODO: implement validation
}

web::json::value BadRequestResponse_errors::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Common )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("common")] = web::json::value::array(jsonArray);
        }
    }
    if(m_FieldsIsSet)
    {
        val[utility::conversions::to_string_t("fields")] = ModelBase::toJson(m_Fields);
    }

    return val;
}

void BadRequestResponse_errors::fromJson(web::json::value& val)
{
    {
        m_Common.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("common")))
        {
        for( auto& item : val[utility::conversions::to_string_t("common")].as_array() )
        {
            m_Common.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fields")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fields")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setFields( newItem );
        }
    }
}

void BadRequestResponse_errors::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Common )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("common"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_FieldsIsSet)
    {
        if (m_Fields.get())
        {
            m_Fields->toMultipart(multipart, utility::conversions::to_string_t("fields."));
        }
        
    }
}

void BadRequestResponse_errors::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Common.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("common")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("common"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Common.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fields")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("fields")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("fields."));
            setFields( newItem );
        }
    }
}

std::vector<utility::string_t>& BadRequestResponse_errors::getCommon()
{
    return m_Common;
}

void BadRequestResponse_errors::setCommon(std::vector<utility::string_t> value)
{
    m_Common = value;
    m_CommonIsSet = true;
}
bool BadRequestResponse_errors::commonIsSet() const
{
    return m_CommonIsSet;
}

void BadRequestResponse_errors::unsetCommon()
{
    m_CommonIsSet = false;
}

std::shared_ptr<Object> BadRequestResponse_errors::getFields() const
{
    return m_Fields;
}


void BadRequestResponse_errors::setFields(std::shared_ptr<Object> value)
{
    m_Fields = value;
    m_FieldsIsSet = true;
}
bool BadRequestResponse_errors::fieldsIsSet() const
{
    return m_FieldsIsSet;
}

void BadRequestResponse_errors::unsetFields()
{
    m_FieldsIsSet = false;
}

}
}
}
}

