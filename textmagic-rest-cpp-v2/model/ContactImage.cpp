/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ContactImage.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

ContactImage::ContactImage()
{
    m_Href = utility::conversions::to_string_t("");
}

ContactImage::~ContactImage()
{
}

void ContactImage::validate()
{
    // TODO: implement validation
}

web::json::value ContactImage::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);

    return val;
}

void ContactImage::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("href")];
        if(!fieldValue.is_null())
        {
            setHref(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void ContactImage::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
}

void ContactImage::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setHref(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("href"))));
}

utility::string_t ContactImage::getHref() const
{
    return m_Href;
}


void ContactImage::setHref(utility::string_t value)
{
    m_Href = value;
    
}
}
}
}
}

