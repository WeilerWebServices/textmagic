/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetMessageSessionStatResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetMessageSessionStatResponse::GetMessageSessionStatResponse()
{
    m_Failed = 0;
    m_Delivered = 0;
    m_Accepted = 0;
    m_Rejected = 0;
    m_Scheduled = 0;
    m_All = 0;
    m_Sent = 0;
}

GetMessageSessionStatResponse::~GetMessageSessionStatResponse()
{
}

void GetMessageSessionStatResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetMessageSessionStatResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("failed")] = ModelBase::toJson(m_Failed);
    val[utility::conversions::to_string_t("delivered")] = ModelBase::toJson(m_Delivered);
    val[utility::conversions::to_string_t("accepted")] = ModelBase::toJson(m_Accepted);
    val[utility::conversions::to_string_t("rejected")] = ModelBase::toJson(m_Rejected);
    val[utility::conversions::to_string_t("scheduled")] = ModelBase::toJson(m_Scheduled);
    val[utility::conversions::to_string_t("all")] = ModelBase::toJson(m_All);
    val[utility::conversions::to_string_t("sent")] = ModelBase::toJson(m_Sent);

    return val;
}

void GetMessageSessionStatResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("failed")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("failed")];
        if(!fieldValue.is_null())
        {
            setFailed(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("delivered")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("delivered")];
        if(!fieldValue.is_null())
        {
            setDelivered(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("accepted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("accepted")];
        if(!fieldValue.is_null())
        {
            setAccepted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rejected")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("rejected")];
        if(!fieldValue.is_null())
        {
            setRejected(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduled")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("scheduled")];
        if(!fieldValue.is_null())
        {
            setScheduled(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("all")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("all")];
        if(!fieldValue.is_null())
        {
            setAll(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sent")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sent")];
        if(!fieldValue.is_null())
        {
            setSent(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void GetMessageSessionStatResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("failed"), m_Failed));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("delivered"), m_Delivered));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("accepted"), m_Accepted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rejected"), m_Rejected));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("scheduled"), m_Scheduled));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("all"), m_All));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sent"), m_Sent));
}

void GetMessageSessionStatResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setFailed(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("failed"))));
    setDelivered(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("delivered"))));
    setAccepted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("accepted"))));
    setRejected(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rejected"))));
    setScheduled(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("scheduled"))));
    setAll(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("all"))));
    setSent(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sent"))));
}

int32_t GetMessageSessionStatResponse::getFailed() const
{
    return m_Failed;
}


void GetMessageSessionStatResponse::setFailed(int32_t value)
{
    m_Failed = value;
    
}
int32_t GetMessageSessionStatResponse::getDelivered() const
{
    return m_Delivered;
}


void GetMessageSessionStatResponse::setDelivered(int32_t value)
{
    m_Delivered = value;
    
}
int32_t GetMessageSessionStatResponse::getAccepted() const
{
    return m_Accepted;
}


void GetMessageSessionStatResponse::setAccepted(int32_t value)
{
    m_Accepted = value;
    
}
int32_t GetMessageSessionStatResponse::getRejected() const
{
    return m_Rejected;
}


void GetMessageSessionStatResponse::setRejected(int32_t value)
{
    m_Rejected = value;
    
}
int32_t GetMessageSessionStatResponse::getScheduled() const
{
    return m_Scheduled;
}


void GetMessageSessionStatResponse::setScheduled(int32_t value)
{
    m_Scheduled = value;
    
}
int32_t GetMessageSessionStatResponse::getAll() const
{
    return m_All;
}


void GetMessageSessionStatResponse::setAll(int32_t value)
{
    m_All = value;
    
}
int32_t GetMessageSessionStatResponse::getSent() const
{
    return m_Sent;
}


void GetMessageSessionStatResponse::setSent(int32_t value)
{
    m_Sent = value;
    
}
}
}
}
}

