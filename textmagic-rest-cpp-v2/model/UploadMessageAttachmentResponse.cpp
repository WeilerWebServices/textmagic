/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UploadMessageAttachmentResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

UploadMessageAttachmentResponse::UploadMessageAttachmentResponse()
{
    m_Chars = 0;
    m_Href = utility::conversions::to_string_t("");
    m_Name = utility::conversions::to_string_t("");
    m_Size = 0;
    m_Resource = utility::conversions::to_string_t("");
}

UploadMessageAttachmentResponse::~UploadMessageAttachmentResponse()
{
}

void UploadMessageAttachmentResponse::validate()
{
    // TODO: implement validation
}

web::json::value UploadMessageAttachmentResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("chars")] = ModelBase::toJson(m_Chars);
    val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    val[utility::conversions::to_string_t("resource")] = ModelBase::toJson(m_Resource);

    return val;
}

void UploadMessageAttachmentResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("chars")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chars")];
        if(!fieldValue.is_null())
        {
            setChars(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("href")];
        if(!fieldValue.is_null())
        {
            setHref(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("size")];
        if(!fieldValue.is_null())
        {
            setSize(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("resource")];
        if(!fieldValue.is_null())
        {
            setResource(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UploadMessageAttachmentResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chars"), m_Chars));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resource"), m_Resource));
}

void UploadMessageAttachmentResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setChars(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chars"))));
    setHref(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("href"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setSize(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("size"))));
    setResource(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("resource"))));
}

int32_t UploadMessageAttachmentResponse::getChars() const
{
    return m_Chars;
}


void UploadMessageAttachmentResponse::setChars(int32_t value)
{
    m_Chars = value;
    
}
utility::string_t UploadMessageAttachmentResponse::getHref() const
{
    return m_Href;
}


void UploadMessageAttachmentResponse::setHref(utility::string_t value)
{
    m_Href = value;
    
}
utility::string_t UploadMessageAttachmentResponse::getName() const
{
    return m_Name;
}


void UploadMessageAttachmentResponse::setName(utility::string_t value)
{
    m_Name = value;
    
}
int32_t UploadMessageAttachmentResponse::getSize() const
{
    return m_Size;
}


void UploadMessageAttachmentResponse::setSize(int32_t value)
{
    m_Size = value;
    
}
utility::string_t UploadMessageAttachmentResponse::getResource() const
{
    return m_Resource;
}


void UploadMessageAttachmentResponse::setResource(utility::string_t value)
{
    m_Resource = value;
    
}
}
}
}
}

