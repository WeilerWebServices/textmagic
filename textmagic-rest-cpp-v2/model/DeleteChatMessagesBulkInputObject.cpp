/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DeleteChatMessagesBulkInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

DeleteChatMessagesBulkInputObject::DeleteChatMessagesBulkInputObject()
{
    m_Inbound_ids = utility::conversions::to_string_t("");
    m_Inbound_idsIsSet = false;
    m_Sent_ids = utility::conversions::to_string_t("");
    m_Sent_idsIsSet = false;
    m_Calls_ids = utility::conversions::to_string_t("");
    m_Calls_idsIsSet = false;
    m_All = false;
    m_AllIsSet = false;
}

DeleteChatMessagesBulkInputObject::~DeleteChatMessagesBulkInputObject()
{
}

void DeleteChatMessagesBulkInputObject::validate()
{
    // TODO: implement validation
}

web::json::value DeleteChatMessagesBulkInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Inbound_idsIsSet)
    {
        val[utility::conversions::to_string_t("inbound_ids")] = ModelBase::toJson(m_Inbound_ids);
    }
    if(m_Sent_idsIsSet)
    {
        val[utility::conversions::to_string_t("sent_ids")] = ModelBase::toJson(m_Sent_ids);
    }
    if(m_Calls_idsIsSet)
    {
        val[utility::conversions::to_string_t("calls_ids")] = ModelBase::toJson(m_Calls_ids);
    }
    if(m_AllIsSet)
    {
        val[utility::conversions::to_string_t("all")] = ModelBase::toJson(m_All);
    }

    return val;
}

void DeleteChatMessagesBulkInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("inbound_ids")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("inbound_ids")];
        if(!fieldValue.is_null())
        {
            setInboundIds(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sent_ids")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sent_ids")];
        if(!fieldValue.is_null())
        {
            setSentIds(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("calls_ids")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("calls_ids")];
        if(!fieldValue.is_null())
        {
            setCallsIds(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("all")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("all")];
        if(!fieldValue.is_null())
        {
            setAll(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void DeleteChatMessagesBulkInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Inbound_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inbound_ids"), m_Inbound_ids));
        
    }
    if(m_Sent_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sent_ids"), m_Sent_ids));
        
    }
    if(m_Calls_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("calls_ids"), m_Calls_ids));
        
    }
    if(m_AllIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("all"), m_All));
    }
}

void DeleteChatMessagesBulkInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("inbound_ids")))
    {
        setInboundIds(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("inbound_ids"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sent_ids")))
    {
        setSentIds(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sent_ids"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("calls_ids")))
    {
        setCallsIds(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("calls_ids"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("all")))
    {
        setAll(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("all"))));
    }
}

utility::string_t DeleteChatMessagesBulkInputObject::getInboundIds() const
{
    return m_Inbound_ids;
}


void DeleteChatMessagesBulkInputObject::setInboundIds(utility::string_t value)
{
    m_Inbound_ids = value;
    m_Inbound_idsIsSet = true;
}
bool DeleteChatMessagesBulkInputObject::inboundIdsIsSet() const
{
    return m_Inbound_idsIsSet;
}

void DeleteChatMessagesBulkInputObject::unsetInbound_ids()
{
    m_Inbound_idsIsSet = false;
}

utility::string_t DeleteChatMessagesBulkInputObject::getSentIds() const
{
    return m_Sent_ids;
}


void DeleteChatMessagesBulkInputObject::setSentIds(utility::string_t value)
{
    m_Sent_ids = value;
    m_Sent_idsIsSet = true;
}
bool DeleteChatMessagesBulkInputObject::sentIdsIsSet() const
{
    return m_Sent_idsIsSet;
}

void DeleteChatMessagesBulkInputObject::unsetSent_ids()
{
    m_Sent_idsIsSet = false;
}

utility::string_t DeleteChatMessagesBulkInputObject::getCallsIds() const
{
    return m_Calls_ids;
}


void DeleteChatMessagesBulkInputObject::setCallsIds(utility::string_t value)
{
    m_Calls_ids = value;
    m_Calls_idsIsSet = true;
}
bool DeleteChatMessagesBulkInputObject::callsIdsIsSet() const
{
    return m_Calls_idsIsSet;
}

void DeleteChatMessagesBulkInputObject::unsetCalls_ids()
{
    m_Calls_idsIsSet = false;
}

bool DeleteChatMessagesBulkInputObject::isAll() const
{
    return m_All;
}


void DeleteChatMessagesBulkInputObject::setAll(bool value)
{
    m_All = value;
    m_AllIsSet = true;
}
bool DeleteChatMessagesBulkInputObject::allIsSet() const
{
    return m_AllIsSet;
}

void DeleteChatMessagesBulkInputObject::unsetAll()
{
    m_AllIsSet = false;
}

}
}
}
}

