=begin comment

TextMagic API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package Net::Sms::TextMagicClient::TextMagicApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Net::Sms::TextMagicClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Net::Sms::TextMagicClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Net::Sms::TextMagicClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# assign_contacts_to_list
#
# Assign contacts to a list
# 
# @param AssignContactsToListInputObject $assign_contacts_to_list_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'assign_contacts_to_list_input_object' => {
        data_type => 'AssignContactsToListInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'assign_contacts_to_list' } = { 
    	summary => 'Assign contacts to a list',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub assign_contacts_to_list {
    my ($self, %args) = @_;

    # verify the required parameter 'assign_contacts_to_list_input_object' is set
    unless (exists $args{'assign_contacts_to_list_input_object'}) {
      croak("Missing the required parameter 'assign_contacts_to_list_input_object' when calling assign_contacts_to_list");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling assign_contacts_to_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'assign_contacts_to_list_input_object'}) {
        $_body_data = $args{'assign_contacts_to_list_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# block_contact
#
# Block a contact by phone number
# 
# @param BlockContactInputObject $block_contact_input_object  (required)
{
    my $params = {
    'block_contact_input_object' => {
        data_type => 'BlockContactInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'block_contact' } = { 
    	summary => 'Block a contact by phone number',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub block_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'block_contact_input_object' is set
    unless (exists $args{'block_contact_input_object'}) {
      croak("Missing the required parameter 'block_contact_input_object' when calling block_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/block';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'block_contact_input_object'}) {
        $_body_data = $args{'block_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# buy_dedicated_number
#
# Buy a dedicated number
# 
# @param BuyDedicatedNumberInputObject $buy_dedicated_number_input_object  (required)
{
    my $params = {
    'buy_dedicated_number_input_object' => {
        data_type => 'BuyDedicatedNumberInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'buy_dedicated_number' } = { 
    	summary => 'Buy a dedicated number',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub buy_dedicated_number {
    my ($self, %args) = @_;

    # verify the required parameter 'buy_dedicated_number_input_object' is set
    unless (exists $args{'buy_dedicated_number_input_object'}) {
      croak("Missing the required parameter 'buy_dedicated_number_input_object' when calling buy_dedicated_number");
    }

    # parse inputs
    my $_resource_path = '/api/v2/numbers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'buy_dedicated_number_input_object'}) {
        $_body_data = $args{'buy_dedicated_number_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# cancel_verification
#
# Cancel verification process
# 
# @param string $verify_id The verifyId that you received in Step 1. (required)
{
    my $params = {
    'verify_id' => {
        data_type => 'string',
        description => 'The verifyId that you received in Step 1.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cancel_verification' } = { 
    	summary => 'Cancel verification process',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub cancel_verification {
    my ($self, %args) = @_;

    # verify the required parameter 'verify_id' is set
    unless (exists $args{'verify_id'}) {
      croak("Missing the required parameter 'verify_id' when calling cancel_verification");
    }

    # parse inputs
    my $_resource_path = '/api/v2/verify/{verifyId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'verify_id'}) {
        my $_base_variable = "{" . "verifyId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'verify_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# check_phone_verification_code_tfa
#
# Step 2: Check the verification code 
# 
# @param CheckPhoneVerificationCodeTFAInputObject $check_phone_verification_code_tfa_input_object  (required)
{
    my $params = {
    'check_phone_verification_code_tfa_input_object' => {
        data_type => 'CheckPhoneVerificationCodeTFAInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'check_phone_verification_code_tfa' } = { 
    	summary => 'Step 2: Check the verification code ',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub check_phone_verification_code_tfa {
    my ($self, %args) = @_;

    # verify the required parameter 'check_phone_verification_code_tfa_input_object' is set
    unless (exists $args{'check_phone_verification_code_tfa_input_object'}) {
      croak("Missing the required parameter 'check_phone_verification_code_tfa_input_object' when calling check_phone_verification_code_tfa");
    }

    # parse inputs
    my $_resource_path = '/api/v2/verify';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'check_phone_verification_code_tfa_input_object'}) {
        $_body_data = $args{'check_phone_verification_code_tfa_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clear_and_assign_contacts_to_list
#
# Reset list members to the specified contacts
# 
# @param ClearAndAssignContactsToListInputObject $clear_and_assign_contacts_to_list_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'clear_and_assign_contacts_to_list_input_object' => {
        data_type => 'ClearAndAssignContactsToListInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'clear_and_assign_contacts_to_list' } = { 
    	summary => 'Reset list members to the specified contacts',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub clear_and_assign_contacts_to_list {
    my ($self, %args) = @_;

    # verify the required parameter 'clear_and_assign_contacts_to_list_input_object' is set
    unless (exists $args{'clear_and_assign_contacts_to_list_input_object'}) {
      croak("Missing the required parameter 'clear_and_assign_contacts_to_list_input_object' when calling clear_and_assign_contacts_to_list");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling clear_and_assign_contacts_to_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'clear_and_assign_contacts_to_list_input_object'}) {
        $_body_data = $args{'clear_and_assign_contacts_to_list_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# close_chats_bulk
#
# Close chats (bulk)
# 
# @param CloseChatsBulkInputObject $close_chats_bulk_input_object  (required)
{
    my $params = {
    'close_chats_bulk_input_object' => {
        data_type => 'CloseChatsBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'close_chats_bulk' } = { 
    	summary => 'Close chats (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub close_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'close_chats_bulk_input_object' is set
    unless (exists $args{'close_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'close_chats_bulk_input_object' when calling close_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/close/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'close_chats_bulk_input_object'}) {
        $_body_data = $args{'close_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# close_read_chats
#
# Close read chats
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'close_read_chats' } = { 
    	summary => 'Close read chats',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub close_read_chats {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/close/read';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# close_subaccount
#
# Close sub-account
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'close_subaccount' } = { 
    	summary => 'Close sub-account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub close_subaccount {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling close_subaccount");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_contact
#
# Add a new contact
# 
# @param CreateContactInputObject $create_contact_input_object  (required)
{
    my $params = {
    'create_contact_input_object' => {
        data_type => 'CreateContactInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_contact' } = { 
    	summary => 'Add a new contact',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'create_contact_input_object' is set
    unless (exists $args{'create_contact_input_object'}) {
      croak("Missing the required parameter 'create_contact_input_object' when calling create_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/normalized';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_contact_input_object'}) {
        $_body_data = $args{'create_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_contact_note
#
# Create a new contact note
# 
# @param CreateContactNoteInputObject $create_contact_note_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'create_contact_note_input_object' => {
        data_type => 'CreateContactNoteInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_contact_note' } = { 
    	summary => 'Create a new contact note',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_contact_note {
    my ($self, %args) = @_;

    # verify the required parameter 'create_contact_note_input_object' is set
    unless (exists $args{'create_contact_note_input_object'}) {
      croak("Missing the required parameter 'create_contact_note_input_object' when calling create_contact_note");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_contact_note");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/notes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_contact_note_input_object'}) {
        $_body_data = $args{'create_contact_note_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_custom_field
#
# Add a new custom field
# 
# @param CreateCustomFieldInputObject $create_custom_field_input_object  (required)
{
    my $params = {
    'create_custom_field_input_object' => {
        data_type => 'CreateCustomFieldInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_custom_field' } = { 
    	summary => 'Add a new custom field',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_custom_field {
    my ($self, %args) = @_;

    # verify the required parameter 'create_custom_field_input_object' is set
    unless (exists $args{'create_custom_field_input_object'}) {
      croak("Missing the required parameter 'create_custom_field_input_object' when calling create_custom_field");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_custom_field_input_object'}) {
        $_body_data = $args{'create_custom_field_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_list
#
# Create a new list
# 
# @param CreateListInputObject $create_list_input_object  (required)
{
    my $params = {
    'create_list_input_object' => {
        data_type => 'CreateListInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_list' } = { 
    	summary => 'Create a new list',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_list {
    my ($self, %args) = @_;

    # verify the required parameter 'create_list_input_object' is set
    unless (exists $args{'create_list_input_object'}) {
      croak("Missing the required parameter 'create_list_input_object' when calling create_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_list_input_object'}) {
        $_body_data = $args{'create_list_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_template
#
# Create a template
# 
# @param CreateTemplateInputObject $create_template_input_object  (required)
{
    my $params = {
    'create_template_input_object' => {
        data_type => 'CreateTemplateInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_template' } = { 
    	summary => 'Create a template',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_template {
    my ($self, %args) = @_;

    # verify the required parameter 'create_template_input_object' is set
    unless (exists $args{'create_template_input_object'}) {
      croak("Missing the required parameter 'create_template_input_object' when calling create_template");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_template_input_object'}) {
        $_body_data = $args{'create_template_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# delete_all_contacts
#
# Delete contacts (bulk)
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'delete_all_contacts' } = { 
    	summary => 'Delete contacts (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_all_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contact/all';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_all_outbound_messages
#
# Delete all messages
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'delete_all_outbound_messages' } = { 
    	summary => 'Delete all messages',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_all_outbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/message/all';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_avatar
#
# Delete an avatar
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'delete_avatar' } = { 
    	summary => 'Delete an avatar',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_avatar {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/avatar';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_chat_messages
#
# Delete chat messages by ID(s)
# 
# @param DeleteChatMessagesBulkInputObject $delete_chat_messages_bulk_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'delete_chat_messages_bulk_input_object' => {
        data_type => 'DeleteChatMessagesBulkInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_chat_messages' } = { 
    	summary => 'Delete chat messages by ID(s)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_chat_messages {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_chat_messages_bulk_input_object' is set
    unless (exists $args{'delete_chat_messages_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_chat_messages_bulk_input_object' when calling delete_chat_messages");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_chat_messages");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/{id}/messages/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_chat_messages_bulk_input_object'}) {
        $_body_data = $args{'delete_chat_messages_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_chats_bulk
#
# Delete chats (bulk)
# 
# @param DeleteChatsBulkInputObject $delete_chats_bulk_input_object  (required)
{
    my $params = {
    'delete_chats_bulk_input_object' => {
        data_type => 'DeleteChatsBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_chats_bulk' } = { 
    	summary => 'Delete chats (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_chats_bulk_input_object' is set
    unless (exists $args{'delete_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_chats_bulk_input_object' when calling delete_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'delete_chats_bulk_input_object'}) {
        $_body_data = $args{'delete_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contact
#
# Delete a contact
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact' } = { 
    	summary => 'Delete a contact',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contact_avatar
#
# Delete an avatar
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact_avatar' } = { 
    	summary => 'Delete an avatar',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contact_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/avatar';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contact_note
#
# Delete a contact note
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact_note' } = { 
    	summary => 'Delete a contact note',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contact_note {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact_note");
    }

    # parse inputs
    my $_resource_path = '/api/v2/notes/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contact_notes_bulk
#
# Delete contact notes (bulk)
# 
# @param int $id  (required)
# @param DeleteContactNotesBulkInputObject $delete_contact_notes_bulk_input_object  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'delete_contact_notes_bulk_input_object' => {
        data_type => 'DeleteContactNotesBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact_notes_bulk' } = { 
    	summary => 'Delete contact notes (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contact_notes_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact_notes_bulk");
    }

    # verify the required parameter 'delete_contact_notes_bulk_input_object' is set
    unless (exists $args{'delete_contact_notes_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_contact_notes_bulk_input_object' when calling delete_contact_notes_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/notes/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_contact_notes_bulk_input_object'}) {
        $_body_data = $args{'delete_contact_notes_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contacts_by_ids
#
# Delete contacts by IDs (bulk)
# 
# @param DeleteContactsByIdsInputObject $delete_contacts_by_ids_input_object  (required)
{
    my $params = {
    'delete_contacts_by_ids_input_object' => {
        data_type => 'DeleteContactsByIdsInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contacts_by_ids' } = { 
    	summary => 'Delete contacts by IDs (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contacts_by_ids {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_contacts_by_ids_input_object' is set
    unless (exists $args{'delete_contacts_by_ids_input_object'}) {
      croak("Missing the required parameter 'delete_contacts_by_ids_input_object' when calling delete_contacts_by_ids");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'delete_contacts_by_ids_input_object'}) {
        $_body_data = $args{'delete_contacts_by_ids_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contacts_from_list
#
# Unassign contacts from a list
# 
# @param DeleteContacsFromListObject $delete_contacs_from_list_object  (required)
# @param int $id  (required)
{
    my $params = {
    'delete_contacs_from_list_object' => {
        data_type => 'DeleteContacsFromListObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contacts_from_list' } = { 
    	summary => 'Unassign contacts from a list',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contacts_from_list {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_contacs_from_list_object' is set
    unless (exists $args{'delete_contacs_from_list_object'}) {
      croak("Missing the required parameter 'delete_contacs_from_list_object' when calling delete_contacts_from_list");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contacts_from_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_contacs_from_list_object'}) {
        $_body_data = $args{'delete_contacs_from_list_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_custom_field
#
# Delete a custom field
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_custom_field' } = { 
    	summary => 'Delete a custom field',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_custom_field {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_custom_field");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_dedicated_number
#
# Cancel a dedicated number subscription
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_dedicated_number' } = { 
    	summary => 'Cancel a dedicated number subscription',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_dedicated_number {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_dedicated_number");
    }

    # parse inputs
    my $_resource_path = '/api/v2/numbers/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_inbound_message
#
# Delete a single inbound message
# 
# @param int $id The unique numeric ID for the inbound message. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The unique numeric ID for the inbound message.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbound_message' } = { 
    	summary => 'Delete a single inbound message',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbound_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_inbound_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/replies/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_inbound_messages_bulk
#
# Delete inbound messages (bulk)
# 
# @param DeleteInboundMessagesBulkInputObject $delete_inbound_messages_bulk_input_object  (required)
{
    my $params = {
    'delete_inbound_messages_bulk_input_object' => {
        data_type => 'DeleteInboundMessagesBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbound_messages_bulk' } = { 
    	summary => 'Delete inbound messages (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbound_messages_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_inbound_messages_bulk_input_object' is set
    unless (exists $args{'delete_inbound_messages_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_inbound_messages_bulk_input_object' when calling delete_inbound_messages_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/replies/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'delete_inbound_messages_bulk_input_object'}) {
        $_body_data = $args{'delete_inbound_messages_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_list
#
# Delete a list
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_list' } = { 
    	summary => 'Delete a list',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_list {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_list_avatar
#
# Delete an avatar for a list
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_list_avatar' } = { 
    	summary => 'Delete an avatar for a list',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_list_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_list_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/avatar';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_list_contacts_bulk
#
# Delete contacts from a list (bulk)
# 
# @param DeleteListContactsBulkInputObject $delete_list_contacts_bulk_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'delete_list_contacts_bulk_input_object' => {
        data_type => 'DeleteListContactsBulkInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_list_contacts_bulk' } = { 
    	summary => 'Delete contacts from a list (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_list_contacts_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_list_contacts_bulk_input_object' is set
    unless (exists $args{'delete_list_contacts_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_list_contacts_bulk_input_object' when calling delete_list_contacts_bulk");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_list_contacts_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_list_contacts_bulk_input_object'}) {
        $_body_data = $args{'delete_list_contacts_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_lists_bulk
#
# Delete lists (bulk)
# 
# @param DeleteListsBulkInputObject $delete_lists_bulk_input_object  (required)
{
    my $params = {
    'delete_lists_bulk_input_object' => {
        data_type => 'DeleteListsBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_lists_bulk' } = { 
    	summary => 'Delete lists (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_lists_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_lists_bulk_input_object' is set
    unless (exists $args{'delete_lists_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_lists_bulk_input_object' when calling delete_lists_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'delete_lists_bulk_input_object'}) {
        $_body_data = $args{'delete_lists_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_message_session
#
# Delete a session
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_message_session' } = { 
    	summary => 'Delete a session',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_message_session {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_message_session");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_message_sessions_bulk
#
# Delete sessions (bulk)
# 
# @param DeleteMessageSessionsBulkInputObject $delete_message_sessions_bulk_input_object  (required)
{
    my $params = {
    'delete_message_sessions_bulk_input_object' => {
        data_type => 'DeleteMessageSessionsBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_message_sessions_bulk' } = { 
    	summary => 'Delete sessions (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_message_sessions_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_message_sessions_bulk_input_object' is set
    unless (exists $args{'delete_message_sessions_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_message_sessions_bulk_input_object' when calling delete_message_sessions_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'delete_message_sessions_bulk_input_object'}) {
        $_body_data = $args{'delete_message_sessions_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_outbound_message
#
# Delete message
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_outbound_message' } = { 
    	summary => 'Delete message',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_outbound_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_outbound_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_outbound_messages_bulk
#
# Delete messages (bulk)
# 
# @param DeleteOutboundMessagesBulkInputObject $delete_outbound_messages_bulk_input_object  (required)
{
    my $params = {
    'delete_outbound_messages_bulk_input_object' => {
        data_type => 'DeleteOutboundMessagesBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_outbound_messages_bulk' } = { 
    	summary => 'Delete messages (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_outbound_messages_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_outbound_messages_bulk_input_object' is set
    unless (exists $args{'delete_outbound_messages_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_outbound_messages_bulk_input_object' when calling delete_outbound_messages_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'delete_outbound_messages_bulk_input_object'}) {
        $_body_data = $args{'delete_outbound_messages_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_scheduled_message
#
# Delete a single scheduled message
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_scheduled_message' } = { 
    	summary => 'Delete a single scheduled message',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_scheduled_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_scheduled_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/schedules/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_scheduled_messages_bulk
#
# Delete scheduled messages (bulk)
# 
# @param DeleteScheduledMessagesBulkInputObject $delete_scheduled_messages_bulk_input_object  (required)
{
    my $params = {
    'delete_scheduled_messages_bulk_input_object' => {
        data_type => 'DeleteScheduledMessagesBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_scheduled_messages_bulk' } = { 
    	summary => 'Delete scheduled messages (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_scheduled_messages_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_scheduled_messages_bulk_input_object' is set
    unless (exists $args{'delete_scheduled_messages_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_scheduled_messages_bulk_input_object' when calling delete_scheduled_messages_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/schedules/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'delete_scheduled_messages_bulk_input_object'}) {
        $_body_data = $args{'delete_scheduled_messages_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_sender_id
#
# Delete a Sender ID
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_sender_id' } = { 
    	summary => 'Delete a Sender ID',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_sender_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_sender_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/senderids/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_template
#
# Delete a template
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_template' } = { 
    	summary => 'Delete a template',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_template {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_template");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_templates_bulk
#
# Delete templates (bulk)
# 
# @param DeleteTemplatesBulkInputObject $delete_templates_bulk_input_object  (required)
{
    my $params = {
    'delete_templates_bulk_input_object' => {
        data_type => 'DeleteTemplatesBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_templates_bulk' } = { 
    	summary => 'Delete templates (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_templates_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_templates_bulk_input_object' is set
    unless (exists $args{'delete_templates_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_templates_bulk_input_object' when calling delete_templates_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'delete_templates_bulk_input_object'}) {
        $_body_data = $args{'delete_templates_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# do_carrier_lookup
#
# Carrier Lookup
# 
# @param string $phone Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).  (required)
# @param string $country This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)
{
    my $params = {
    'phone' => {
        data_type => 'string',
        description => 'Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). ',
        required => '1',
    },
    'country' => {
        data_type => 'string',
        description => 'This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'do_carrier_lookup' } = { 
    	summary => 'Carrier Lookup',
        params => $params,
        returns => 'DoCarrierLookupResponse',
        };
}
# @return DoCarrierLookupResponse
#
sub do_carrier_lookup {
    my ($self, %args) = @_;

    # verify the required parameter 'phone' is set
    unless (exists $args{'phone'}) {
      croak("Missing the required parameter 'phone' when calling do_carrier_lookup");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lookups/{phone}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    # path params
    if ( exists $args{'phone'}) {
        my $_base_variable = "{" . "phone" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DoCarrierLookupResponse', $response);
    return $_response_object;
}

#
# do_email_lookup
#
# Email Lookup
# 
# @param string $email Email address. (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'Email address.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'do_email_lookup' } = { 
    	summary => 'Email Lookup',
        params => $params,
        returns => 'DoEmailLookupResponse',
        };
}
# @return DoEmailLookupResponse
#
sub do_email_lookup {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling do_email_lookup");
    }

    # parse inputs
    my $_resource_path = '/api/v2/email-lookups/{email}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DoEmailLookupResponse', $response);
    return $_response_object;
}

#
# get_all_bulk_sessions
#
# Get all bulk sessions
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_bulk_sessions' } = { 
    	summary => 'Get all bulk sessions',
        params => $params,
        returns => 'GetAllBulkSessionsPaginatedResponse',
        };
}
# @return GetAllBulkSessionsPaginatedResponse
#
sub get_all_bulk_sessions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/bulks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllBulkSessionsPaginatedResponse', $response);
    return $_response_object;
}

#
# get_all_chats
#
# Get all chats
# 
# @param string $status Fetch only (a)ctive, (c)losed or (d)eleted chats. (optional)
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param int $voice Fetch results with voice calls. (optional, default to 0)
# @param int $flat Should additional contact info be included? (optional, default to 0)
{
    my $params = {
    'status' => {
        data_type => 'string',
        description => 'Fetch only (a)ctive, (c)losed or (d)eleted chats.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'voice' => {
        data_type => 'int',
        description => 'Fetch results with voice calls.',
        required => '0',
    },
    'flat' => {
        data_type => 'int',
        description => 'Should additional contact info be included?',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_chats' } = { 
    	summary => 'Get all chats',
        params => $params,
        returns => 'GetAllChatsPaginatedResponse',
        };
}
# @return GetAllChatsPaginatedResponse
#
sub get_all_chats {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'voice'}) {
        $query_params->{'voice'} = $self->{api_client}->to_query_value($args{'voice'});
    }

    # query params
    if ( exists $args{'flat'}) {
        $query_params->{'flat'} = $self->{api_client}->to_query_value($args{'flat'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllChatsPaginatedResponse', $response);
    return $_response_object;
}

#
# get_all_inbound_messages
#
# Get all inbound messages
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_inbound_messages' } = { 
    	summary => 'Get all inbound messages',
        params => $params,
        returns => 'GetAllInboundMessagesPaginatedResponse',
        };
}
# @return GetAllInboundMessagesPaginatedResponse
#
sub get_all_inbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/replies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllInboundMessagesPaginatedResponse', $response);
    return $_response_object;
}

#
# get_all_message_sessions
#
# Get all sessions
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_message_sessions' } = { 
    	summary => 'Get all sessions',
        params => $params,
        returns => 'GetAllMessageSessionsPaginatedResponse',
        };
}
# @return GetAllMessageSessionsPaginatedResponse
#
sub get_all_message_sessions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/sessions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllMessageSessionsPaginatedResponse', $response);
    return $_response_object;
}

#
# get_all_outbound_messages
#
# Get all messages
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param int $last_id Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'last_id' => {
        data_type => 'int',
        description => 'Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_outbound_messages' } = { 
    	summary => 'Get all messages',
        params => $params,
        returns => 'GetAllOutboundMessagesPaginatedResponse',
        };
}
# @return GetAllOutboundMessagesPaginatedResponse
#
sub get_all_outbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/messages';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'last_id'}) {
        $query_params->{'lastId'} = $self->{api_client}->to_query_value($args{'last_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllOutboundMessagesPaginatedResponse', $response);
    return $_response_object;
}

#
# get_all_scheduled_messages
#
# Get all scheduled messages
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $status Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Fetch schedules with a specific status: a - actual, c - completed, x - all.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_scheduled_messages' } = { 
    	summary => 'Get all scheduled messages',
        params => $params,
        returns => 'GetAllScheduledMessagesPaginatedResponse',
        };
}
# @return GetAllScheduledMessagesPaginatedResponse
#
sub get_all_scheduled_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/schedules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllScheduledMessagesPaginatedResponse', $response);
    return $_response_object;
}

#
# get_all_templates
#
# Get all templates
# 
# @param int $page Fetch specified results page. (optional)
# @param int $limit The number of results per page. (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_templates' } = { 
    	summary => 'Get all templates',
        params => $params,
        returns => 'GetAllTemplatesPaginatedResponse',
        };
}
# @return GetAllTemplatesPaginatedResponse
#
sub get_all_templates {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/templates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllTemplatesPaginatedResponse', $response);
    return $_response_object;
}

#
# get_available_dedicated_numbers
#
# Find dedicated numbers available for purchase
# 
# @param string $country The 2-letter dedicated number country ISO code. (required)
# @param int $prefix Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)
# @param int $tollfree Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)
{
    my $params = {
    'country' => {
        data_type => 'string',
        description => 'The 2-letter dedicated number country ISO code.',
        required => '1',
    },
    'prefix' => {
        data_type => 'int',
        description => 'Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country.',
        required => '0',
    },
    'tollfree' => {
        data_type => 'int',
        description => 'Should we show only tollfree numbers (tollfree available only for US).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_available_dedicated_numbers' } = { 
    	summary => 'Find dedicated numbers available for purchase',
        params => $params,
        returns => 'GetAvailableDedicatedNumbersResponse',
        };
}
# @return GetAvailableDedicatedNumbersResponse
#
sub get_available_dedicated_numbers {
    my ($self, %args) = @_;

    # verify the required parameter 'country' is set
    unless (exists $args{'country'}) {
      croak("Missing the required parameter 'country' when calling get_available_dedicated_numbers");
    }

    # parse inputs
    my $_resource_path = '/api/v2/numbers/available';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'prefix'}) {
        $query_params->{'prefix'} = $self->{api_client}->to_query_value($args{'prefix'});
    }

    # query params
    if ( exists $args{'tollfree'}) {
        $query_params->{'tollfree'} = $self->{api_client}->to_query_value($args{'tollfree'});
    }

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAvailableDedicatedNumbersResponse', $response);
    return $_response_object;
}

#
# get_available_sender_setting_options
#
# Get available sender settings
# 
# @param string $country The 2-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)
{
    my $params = {
    'country' => {
        data_type => 'string',
        description => 'The 2-letter ISO country ID. If not specified, it returns all the available sender settings.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_available_sender_setting_options' } = { 
    	summary => 'Get available sender settings',
        params => $params,
        returns => 'GetAvailableSenderSettingOptionsResponse',
        };
}
# @return GetAvailableSenderSettingOptionsResponse
#
sub get_available_sender_setting_options {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/sources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAvailableSenderSettingOptionsResponse', $response);
    return $_response_object;
}

#
# get_balance_notification_options
#
# Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_balance_notification_options' } = { 
    	summary => 'Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance',
        params => $params,
        returns => 'GetBalanceNotificationOptionsResponse',
        };
}
# @return GetBalanceNotificationOptionsResponse
#
sub get_balance_notification_options {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/balance/bundles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBalanceNotificationOptionsResponse', $response);
    return $_response_object;
}

#
# get_balance_notification_settings
#
# Get balance notification settings
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_balance_notification_settings' } = { 
    	summary => 'Get balance notification settings',
        params => $params,
        returns => 'GetBalanceNotificationSettingsResponse',
        };
}
# @return GetBalanceNotificationSettingsResponse
#
sub get_balance_notification_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/balance';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBalanceNotificationSettingsResponse', $response);
    return $_response_object;
}

#
# get_blocked_contacts
#
# Get blocked contacts
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $query Find blocked contacts by specified search query. (optional)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find blocked contacts by specified search query.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_blocked_contacts' } = { 
    	summary => 'Get blocked contacts',
        params => $params,
        returns => 'GetBlockedContactsPaginatedResponse',
        };
}
# @return GetBlockedContactsPaginatedResponse
#
sub get_blocked_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contacts/block/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBlockedContactsPaginatedResponse', $response);
    return $_response_object;
}

#
# get_bulk_session
#
# Get bulk session status
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_bulk_session' } = { 
    	summary => 'Get bulk session status',
        params => $params,
        returns => 'BulkSession',
        };
}
# @return BulkSession
#
sub get_bulk_session {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_bulk_session");
    }

    # parse inputs
    my $_resource_path = '/api/v2/bulks/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BulkSession', $response);
    return $_response_object;
}

#
# get_callback_settings
#
# Fetch callback URL settings
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_callback_settings' } = { 
    	summary => 'Fetch callback URL settings',
        params => $params,
        returns => 'GetCallbackSettingsResponse',
        };
}
# @return GetCallbackSettingsResponse
#
sub get_callback_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/callback/settings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCallbackSettingsResponse', $response);
    return $_response_object;
}

#
# get_chat
#
# Get a single chat
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chat' } = { 
    	summary => 'Get a single chat',
        params => $params,
        returns => 'Chat',
        };
}
# @return Chat
#
sub get_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_chat");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Chat', $response);
    return $_response_object;
}

#
# get_chat_by_phone
#
# Find chats by phone
# 
# @param string $phone  (required)
# @param int $upsert Create a new chat if not found. (optional, default to 0)
# @param int $reopen Reopen chat if found or do not change status. (optional, default to 0)
{
    my $params = {
    'phone' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'upsert' => {
        data_type => 'int',
        description => 'Create a new chat if not found.',
        required => '0',
    },
    'reopen' => {
        data_type => 'int',
        description => 'Reopen chat if found or do not change status.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chat_by_phone' } = { 
    	summary => 'Find chats by phone',
        params => $params,
        returns => 'Chat',
        };
}
# @return Chat
#
sub get_chat_by_phone {
    my ($self, %args) = @_;

    # verify the required parameter 'phone' is set
    unless (exists $args{'phone'}) {
      croak("Missing the required parameter 'phone' when calling get_chat_by_phone");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/{phone}/by/phone';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'upsert'}) {
        $query_params->{'upsert'} = $self->{api_client}->to_query_value($args{'upsert'});
    }

    # query params
    if ( exists $args{'reopen'}) {
        $query_params->{'reopen'} = $self->{api_client}->to_query_value($args{'reopen'});
    }

    # path params
    if ( exists $args{'phone'}) {
        my $_base_variable = "{" . "phone" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Chat', $response);
    return $_response_object;
}

#
# get_chat_messages
#
# Get chat messages
# 
# @param int $id  (required)
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $query Find messages by specified search query. (optional)
# @param string $start Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified. (optional)
# @param string $end Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified. (optional)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
# @param int $voice Fetch results with voice calls. (optional, default to 0)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find messages by specified search query.',
        required => '0',
    },
    'start' => {
        data_type => 'string',
        description => 'Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified.',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => 'Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    'voice' => {
        data_type => 'int',
        description => 'Fetch results with voice calls.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chat_messages' } = { 
    	summary => 'Get chat messages',
        params => $params,
        returns => 'GetChatMessagesPaginatedResponse',
        };
}
# @return GetChatMessagesPaginatedResponse
#
sub get_chat_messages {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_chat_messages");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/{id}/message';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # query params
    if ( exists $args{'voice'}) {
        $query_params->{'voice'} = $self->{api_client}->to_query_value($args{'voice'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetChatMessagesPaginatedResponse', $response);
    return $_response_object;
}

#
# get_contact
#
# Get the details of a specific contact
# 
# @param int $id Contact ID. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'Contact ID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact' } = { 
    	summary => 'Get the details of a specific contact',
        params => $params,
        returns => 'Contact',
        };
}
# @return Contact
#
sub get_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Contact', $response);
    return $_response_object;
}

#
# get_contact_by_phone
#
# Get the details of a specific contact by phone number
# 
# @param string $phone  (required)
{
    my $params = {
    'phone' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_by_phone' } = { 
    	summary => 'Get the details of a specific contact by phone number',
        params => $params,
        returns => 'Contact',
        };
}
# @return Contact
#
sub get_contact_by_phone {
    my ($self, %args) = @_;

    # verify the required parameter 'phone' is set
    unless (exists $args{'phone'}) {
      croak("Missing the required parameter 'phone' when calling get_contact_by_phone");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/phone/{phone}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'phone'}) {
        my $_base_variable = "{" . "phone" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Contact', $response);
    return $_response_object;
}

#
# get_contact_if_blocked
#
# Check if a phone number is blocked
# 
# @param string $phone Phone number to check. (required)
{
    my $params = {
    'phone' => {
        data_type => 'string',
        description => 'Phone number to check.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_if_blocked' } = { 
    	summary => 'Check if a phone number is blocked',
        params => $params,
        returns => 'Contact',
        };
}
# @return Contact
#
sub get_contact_if_blocked {
    my ($self, %args) = @_;

    # verify the required parameter 'phone' is set
    unless (exists $args{'phone'}) {
      croak("Missing the required parameter 'phone' when calling get_contact_if_blocked");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/block/phone';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'phone'}) {
        $query_params->{'phone'} = $self->{api_client}->to_query_value($args{'phone'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Contact', $response);
    return $_response_object;
}

#
# get_contact_import_session_progress
#
# Check import progress
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_import_session_progress' } = { 
    	summary => 'Check import progress',
        params => $params,
        returns => 'GetContactImportSessionProgressResponse',
        };
}
# @return GetContactImportSessionProgressResponse
#
sub get_contact_import_session_progress {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_import_session_progress");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/import/progress/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetContactImportSessionProgressResponse', $response);
    return $_response_object;
}

#
# get_contact_note
#
# Get a contact note
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_note' } = { 
    	summary => 'Get a contact note',
        params => $params,
        returns => 'ContactNote',
        };
}
# @return ContactNote
#
sub get_contact_note {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_note");
    }

    # parse inputs
    my $_resource_path = '/api/v2/notes/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactNote', $response);
    return $_response_object;
}

#
# get_contact_notes
#
# Fetch notes assigned to a given contact
# 
# @param int $id  (required)
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_notes' } = { 
    	summary => 'Fetch notes assigned to a given contact',
        params => $params,
        returns => 'GetContactNotesPaginatedResponse',
        };
}
# @return GetContactNotesPaginatedResponse
#
sub get_contact_notes {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_notes");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/notes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetContactNotesPaginatedResponse', $response);
    return $_response_object;
}

#
# get_contacts
#
# Get all contacts
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param int $shared Should shared contacts be included? (optional, default to 0)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'shared' => {
        data_type => 'int',
        description => 'Should shared contacts be included?',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contacts' } = { 
    	summary => 'Get all contacts',
        params => $params,
        returns => 'GetContactsPaginatedResponse',
        };
}
# @return GetContactsPaginatedResponse
#
sub get_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'shared'}) {
        $query_params->{'shared'} = $self->{api_client}->to_query_value($args{'shared'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetContactsPaginatedResponse', $response);
    return $_response_object;
}

#
# get_contacts_autocomplete
#
# Get contacts autocomplete suggestions
# 
# @param string $query Find recipients by specified search query. (required)
# @param int $limit The number of results per page. (optional, default to 10)
# @param int $lists Should lists be returned or not? (optional, default to 0)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'Find recipients by specified search query.',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'lists' => {
        data_type => 'int',
        description => 'Should lists be returned or not?',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contacts_autocomplete' } = { 
    	summary => 'Get contacts autocomplete suggestions',
        params => $params,
        returns => 'GetContactsAutocompleteResponse',
        };
}
# @return GetContactsAutocompleteResponse
#
sub get_contacts_autocomplete {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling get_contacts_autocomplete");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/autocomplete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'lists'}) {
        $query_params->{'lists'} = $self->{api_client}->to_query_value($args{'lists'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetContactsAutocompleteResponse', $response);
    return $_response_object;
}

#
# get_contacts_by_list_id
#
# Get all contacts in a list
# 
# @param int $id Given group ID. (required)
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'Given group ID.',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contacts_by_list_id' } = { 
    	summary => 'Get all contacts in a list',
        params => $params,
        returns => 'GetContactsByListIdPaginatedResponse',
        };
}
# @return GetContactsByListIdPaginatedResponse
#
sub get_contacts_by_list_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contacts_by_list_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetContactsByListIdPaginatedResponse', $response);
    return $_response_object;
}

#
# get_countries
#
# Get countries
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_countries' } = { 
    	summary => 'Get countries',
        params => $params,
        returns => 'GetCountriesResponse',
        };
}
# @return GetCountriesResponse
#
sub get_countries {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/countries';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCountriesResponse', $response);
    return $_response_object;
}

#
# get_current_user
#
# Get current account information
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_current_user' } = { 
    	summary => 'Get current account information',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub get_current_user {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# get_custom_field
#
# Get the details of a specific custom field
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_custom_field' } = { 
    	summary => 'Get the details of a specific custom field',
        params => $params,
        returns => 'UserCustomField',
        };
}
# @return UserCustomField
#
sub get_custom_field {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_custom_field");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserCustomField', $response);
    return $_response_object;
}

#
# get_custom_fields
#
# Get all custom fields
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_custom_fields' } = { 
    	summary => 'Get all custom fields',
        params => $params,
        returns => 'GetCustomFieldsPaginatedResponse',
        };
}
# @return GetCustomFieldsPaginatedResponse
#
sub get_custom_fields {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/customfields';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCustomFieldsPaginatedResponse', $response);
    return $_response_object;
}

#
# get_dedicated_number
#
# Get the details of a specific dedicated number
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dedicated_number' } = { 
    	summary => 'Get the details of a specific dedicated number',
        params => $params,
        returns => 'UsersInbound',
        };
}
# @return UsersInbound
#
sub get_dedicated_number {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_dedicated_number");
    }

    # parse inputs
    my $_resource_path = '/api/v2/numbers/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UsersInbound', $response);
    return $_response_object;
}

#
# get_favorites
#
# Get favorite contacts and lists
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $query Find contacts or lists by specified search query. (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find contacts or lists by specified search query.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_favorites' } = { 
    	summary => 'Get favorite contacts and lists',
        params => $params,
        returns => 'GetFavoritesPaginatedResponse',
        };
}
# @return GetFavoritesPaginatedResponse
#
sub get_favorites {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contacts/favorite';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetFavoritesPaginatedResponse', $response);
    return $_response_object;
}

#
# get_inbound_message
#
# Get a single inbound message
# 
# @param int $id The unique numeric ID for the inbound message. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The unique numeric ID for the inbound message.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbound_message' } = { 
    	summary => 'Get a single inbound message',
        params => $params,
        returns => 'MessageIn',
        };
}
# @return MessageIn
#
sub get_inbound_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_inbound_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/replies/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessageIn', $response);
    return $_response_object;
}

#
# get_inbound_messages_notification_settings
#
# Get inbound messages notification settings
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_inbound_messages_notification_settings' } = { 
    	summary => 'Get inbound messages notification settings',
        params => $params,
        returns => 'GetInboundMessagesNotificationSettingsResponse',
        };
}
# @return GetInboundMessagesNotificationSettingsResponse
#
sub get_inbound_messages_notification_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/inbound';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetInboundMessagesNotificationSettingsResponse', $response);
    return $_response_object;
}

#
# get_invoices
#
# Get all invoices
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_invoices' } = { 
    	summary => 'Get all invoices',
        params => $params,
        returns => 'GetInvoicesPaginatedResponse',
        };
}
# @return GetInvoicesPaginatedResponse
#
sub get_invoices {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/invoices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetInvoicesPaginatedResponse', $response);
    return $_response_object;
}

#
# get_list
#
# Get the details of a specific list
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_list' } = { 
    	summary => 'Get the details of a specific list',
        params => $params,
        returns => 'List',
        };
}
# @return List
#
sub get_list {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('List', $response);
    return $_response_object;
}

#
# get_list_contacts_ids
#
# Get all contact IDs in a list
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_list_contacts_ids' } = { 
    	summary => 'Get all contact IDs in a list',
        params => $params,
        returns => 'GetListContactsIdsResponse',
        };
}
# @return GetListContactsIdsResponse
#
sub get_list_contacts_ids {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_list_contacts_ids");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts/ids';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetListContactsIdsResponse', $response);
    return $_response_object;
}

#
# get_lists
#
# Get all lists
# 
# @param int $page The current fetched page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
# @param int $favorite_only Return only favorited lists. (optional, default to 0)
# @param int $only_mine Return only current user lists. (optional, default to 0)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'The current fetched page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    'favorite_only' => {
        data_type => 'int',
        description => 'Return only favorited lists.',
        required => '0',
    },
    'only_mine' => {
        data_type => 'int',
        description => 'Return only current user lists.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_lists' } = { 
    	summary => 'Get all lists',
        params => $params,
        returns => 'GetListsPaginatedResponse',
        };
}
# @return GetListsPaginatedResponse
#
sub get_lists {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/lists';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # query params
    if ( exists $args{'favorite_only'}) {
        $query_params->{'favoriteOnly'} = $self->{api_client}->to_query_value($args{'favorite_only'});
    }

    # query params
    if ( exists $args{'only_mine'}) {
        $query_params->{'onlyMine'} = $self->{api_client}->to_query_value($args{'only_mine'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetListsPaginatedResponse', $response);
    return $_response_object;
}

#
# get_lists_of_contact
#
# Get a contact's lists
# 
# @param int $id  (required)
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_lists_of_contact' } = { 
    	summary => 'Get a contact&#39;s lists',
        params => $params,
        returns => 'GetListsOfContactPaginatedResponse',
        };
}
# @return GetListsOfContactPaginatedResponse
#
sub get_lists_of_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_lists_of_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/lists';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetListsOfContactPaginatedResponse', $response);
    return $_response_object;
}

#
# get_message_preview
#
# Preview message
# 
# @param string $text Message text. Required if **template_id** is not set. (optional)
# @param int $template_id Template used instead of message text. Required if **text** is not set. (optional)
# @param int $sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)
# @param string $sending_date_time Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)
# @param string $sending_timezone The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)
# @param string $contacts Comma-separated array of contact resources id message will be sent to. (optional)
# @param string $lists Comma-separated array of list resources id message will be sent to. (optional)
# @param string $phones Comma-separated array of E.164 phone numbers message will be sent to. (optional)
# @param int $cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)
# @param int $parts_count Maximum message parts count (TextMagic allows sending of 1 to 6 message parts). (optional, default to 6)
# @param int $reference_id Custom message reference id which can be used in your application infrastructure. (optional)
# @param string $from One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)
# @param string $rule An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)
# @param int $create_chat Should the sending method try to create new Chat(if not exist) with specified recipients? (optional, default to 0)
# @param int $tts Send Text-to-Speech message. (optional, default to 0)
# @param int $local Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)
# @param string $local_country The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'Message text. Required if **template_id** is not set.',
        required => '0',
    },
    'template_id' => {
        data_type => 'int',
        description => 'Template used instead of message text. Required if **text** is not set.',
        required => '0',
    },
    'sending_time' => {
        data_type => 'int',
        description => 'DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now.',
        required => '0',
    },
    'sending_date_time' => {
        data_type => 'string',
        description => 'Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone.',
        required => '0',
    },
    'sending_timezone' => {
        data_type => 'string',
        description => 'The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone.',
        required => '0',
    },
    'contacts' => {
        data_type => 'string',
        description => 'Comma-separated array of contact resources id message will be sent to.',
        required => '0',
    },
    'lists' => {
        data_type => 'string',
        description => 'Comma-separated array of list resources id message will be sent to.',
        required => '0',
    },
    'phones' => {
        data_type => 'string',
        description => 'Comma-separated array of E.164 phone numbers message will be sent to.',
        required => '0',
    },
    'cut_extra' => {
        data_type => 'int',
        description => 'Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead.',
        required => '0',
    },
    'parts_count' => {
        data_type => 'int',
        description => 'Maximum message parts count (TextMagic allows sending of 1 to 6 message parts).',
        required => '0',
    },
    'reference_id' => {
        data_type => 'int',
        description => 'Custom message reference id which can be used in your application infrastructure.',
        required => '0',
    },
    'from' => {
        data_type => 'string',
        description => 'One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs).',
        required => '0',
    },
    'rule' => {
        data_type => 'string',
        description => 'An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details.',
        required => '0',
    },
    'create_chat' => {
        data_type => 'int',
        description => 'Should the sending method try to create new Chat(if not exist) with specified recipients?',
        required => '0',
    },
    'tts' => {
        data_type => 'int',
        description => 'Send Text-to-Speech message.',
        required => '0',
    },
    'local' => {
        data_type => 'int',
        description => 'Treat phone numbers passed in the \\&#39;phones\\&#39; field as local.',
        required => '0',
    },
    'local_country' => {
        data_type => 'string',
        description => 'The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message_preview' } = { 
    	summary => 'Preview message',
        params => $params,
        returns => 'GetMessagePreviewResponse',
        };
}
# @return GetMessagePreviewResponse
#
sub get_message_preview {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/messages/preview';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'template_id'}) {
        $query_params->{'templateId'} = $self->{api_client}->to_query_value($args{'template_id'});
    }

    # query params
    if ( exists $args{'sending_time'}) {
        $query_params->{'sendingTime'} = $self->{api_client}->to_query_value($args{'sending_time'});
    }

    # query params
    if ( exists $args{'sending_date_time'}) {
        $query_params->{'sendingDateTime'} = $self->{api_client}->to_query_value($args{'sending_date_time'});
    }

    # query params
    if ( exists $args{'sending_timezone'}) {
        $query_params->{'sendingTimezone'} = $self->{api_client}->to_query_value($args{'sending_timezone'});
    }

    # query params
    if ( exists $args{'contacts'}) {
        $query_params->{'contacts'} = $self->{api_client}->to_query_value($args{'contacts'});
    }

    # query params
    if ( exists $args{'lists'}) {
        $query_params->{'lists'} = $self->{api_client}->to_query_value($args{'lists'});
    }

    # query params
    if ( exists $args{'phones'}) {
        $query_params->{'phones'} = $self->{api_client}->to_query_value($args{'phones'});
    }

    # query params
    if ( exists $args{'cut_extra'}) {
        $query_params->{'cutExtra'} = $self->{api_client}->to_query_value($args{'cut_extra'});
    }

    # query params
    if ( exists $args{'parts_count'}) {
        $query_params->{'partsCount'} = $self->{api_client}->to_query_value($args{'parts_count'});
    }

    # query params
    if ( exists $args{'reference_id'}) {
        $query_params->{'referenceId'} = $self->{api_client}->to_query_value($args{'reference_id'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'rule'}) {
        $query_params->{'rule'} = $self->{api_client}->to_query_value($args{'rule'});
    }

    # query params
    if ( exists $args{'create_chat'}) {
        $query_params->{'createChat'} = $self->{api_client}->to_query_value($args{'create_chat'});
    }

    # query params
    if ( exists $args{'tts'}) {
        $query_params->{'tts'} = $self->{api_client}->to_query_value($args{'tts'});
    }

    # query params
    if ( exists $args{'local'}) {
        $query_params->{'local'} = $self->{api_client}->to_query_value($args{'local'});
    }

    # query params
    if ( exists $args{'local_country'}) {
        $query_params->{'localCountry'} = $self->{api_client}->to_query_value($args{'local_country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagePreviewResponse', $response);
    return $_response_object;
}

#
# get_message_price
#
# Check message price
# 
# @param int $include_blocked Should we show the pricing for blocked contacts? (optional, default to 0)
# @param string $text Message text. Required if the **template_id** is not set. (optional)
# @param int $template_id Template used instead of message text. Required if the **text** is not set. (optional)
# @param int $sending_time DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)
# @param string $sending_date_time Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)
# @param string $sending_timezone The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)
# @param string $contacts Comma-separated array of contact resources id message will be sent to. (optional)
# @param string $lists Comma-separated array of list resources id message will be sent to. (optional)
# @param string $phones Comma-separated array of E.164 phone numbers message will be sent to. (optional)
# @param int $cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)
# @param int $parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). (optional, default to 6)
# @param int $reference_id Custom message reference id which can be used in your application infrastructure. (optional)
# @param string $from One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)
# @param string $rule An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)
# @param int $create_chat Should the sending method try to create new Chat (if not exist) with specified recipients? (optional, default to 0)
# @param int $tts Send a Text-to-Speech message. (optional, default to 0)
# @param int $local Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)
# @param string $local_country The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)
{
    my $params = {
    'include_blocked' => {
        data_type => 'int',
        description => 'Should we show the pricing for blocked contacts?',
        required => '0',
    },
    'text' => {
        data_type => 'string',
        description => 'Message text. Required if the **template_id** is not set.',
        required => '0',
    },
    'template_id' => {
        data_type => 'int',
        description => 'Template used instead of message text. Required if the **text** is not set.',
        required => '0',
    },
    'sending_time' => {
        data_type => 'int',
        description => 'DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now.',
        required => '0',
    },
    'sending_date_time' => {
        data_type => 'string',
        description => 'Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone.',
        required => '0',
    },
    'sending_timezone' => {
        data_type => 'string',
        description => 'The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone.',
        required => '0',
    },
    'contacts' => {
        data_type => 'string',
        description => 'Comma-separated array of contact resources id message will be sent to.',
        required => '0',
    },
    'lists' => {
        data_type => 'string',
        description => 'Comma-separated array of list resources id message will be sent to.',
        required => '0',
    },
    'phones' => {
        data_type => 'string',
        description => 'Comma-separated array of E.164 phone numbers message will be sent to.',
        required => '0',
    },
    'cut_extra' => {
        data_type => 'int',
        description => 'Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead.',
        required => '0',
    },
    'parts_count' => {
        data_type => 'int',
        description => 'Maximum message parts count (TextMagic allows sending 1 to 6 message parts).',
        required => '0',
    },
    'reference_id' => {
        data_type => 'int',
        description => 'Custom message reference id which can be used in your application infrastructure.',
        required => '0',
    },
    'from' => {
        data_type => 'string',
        description => 'One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs).',
        required => '0',
    },
    'rule' => {
        data_type => 'string',
        description => 'An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details.',
        required => '0',
    },
    'create_chat' => {
        data_type => 'int',
        description => 'Should the sending method try to create new Chat (if not exist) with specified recipients?',
        required => '0',
    },
    'tts' => {
        data_type => 'int',
        description => 'Send a Text-to-Speech message.',
        required => '0',
    },
    'local' => {
        data_type => 'int',
        description => 'Treat phone numbers passed in the \\&#39;phones\\&#39; field as local.',
        required => '0',
    },
    'local_country' => {
        data_type => 'string',
        description => 'The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message_price' } = { 
    	summary => 'Check message price',
        params => $params,
        returns => 'GetMessagePriceResponse',
        };
}
# @return GetMessagePriceResponse
#
sub get_message_price {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/messages/price/normalized';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'include_blocked'}) {
        $query_params->{'includeBlocked'} = $self->{api_client}->to_query_value($args{'include_blocked'});
    }

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'template_id'}) {
        $query_params->{'templateId'} = $self->{api_client}->to_query_value($args{'template_id'});
    }

    # query params
    if ( exists $args{'sending_time'}) {
        $query_params->{'sendingTime'} = $self->{api_client}->to_query_value($args{'sending_time'});
    }

    # query params
    if ( exists $args{'sending_date_time'}) {
        $query_params->{'sendingDateTime'} = $self->{api_client}->to_query_value($args{'sending_date_time'});
    }

    # query params
    if ( exists $args{'sending_timezone'}) {
        $query_params->{'sendingTimezone'} = $self->{api_client}->to_query_value($args{'sending_timezone'});
    }

    # query params
    if ( exists $args{'contacts'}) {
        $query_params->{'contacts'} = $self->{api_client}->to_query_value($args{'contacts'});
    }

    # query params
    if ( exists $args{'lists'}) {
        $query_params->{'lists'} = $self->{api_client}->to_query_value($args{'lists'});
    }

    # query params
    if ( exists $args{'phones'}) {
        $query_params->{'phones'} = $self->{api_client}->to_query_value($args{'phones'});
    }

    # query params
    if ( exists $args{'cut_extra'}) {
        $query_params->{'cutExtra'} = $self->{api_client}->to_query_value($args{'cut_extra'});
    }

    # query params
    if ( exists $args{'parts_count'}) {
        $query_params->{'partsCount'} = $self->{api_client}->to_query_value($args{'parts_count'});
    }

    # query params
    if ( exists $args{'reference_id'}) {
        $query_params->{'referenceId'} = $self->{api_client}->to_query_value($args{'reference_id'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'rule'}) {
        $query_params->{'rule'} = $self->{api_client}->to_query_value($args{'rule'});
    }

    # query params
    if ( exists $args{'create_chat'}) {
        $query_params->{'createChat'} = $self->{api_client}->to_query_value($args{'create_chat'});
    }

    # query params
    if ( exists $args{'tts'}) {
        $query_params->{'tts'} = $self->{api_client}->to_query_value($args{'tts'});
    }

    # query params
    if ( exists $args{'local'}) {
        $query_params->{'local'} = $self->{api_client}->to_query_value($args{'local'});
    }

    # query params
    if ( exists $args{'local_country'}) {
        $query_params->{'localCountry'} = $self->{api_client}->to_query_value($args{'local_country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagePriceResponse', $response);
    return $_response_object;
}

#
# get_message_session
#
# Get a session`s details
# 
# @param int $id Session ID. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'Session ID.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message_session' } = { 
    	summary => 'Get a session&#x60;s details',
        params => $params,
        returns => 'MessageSession',
        };
}
# @return MessageSession
#
sub get_message_session {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_message_session");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessageSession', $response);
    return $_response_object;
}

#
# get_message_session_stat
#
# Get a session`s statistics
# 
# @param int $id  (required)
# @param int $include_deleted Search also in deleted messages. (optional, default to 0)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'include_deleted' => {
        data_type => 'int',
        description => 'Search also in deleted messages.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message_session_stat' } = { 
    	summary => 'Get a session&#x60;s statistics',
        params => $params,
        returns => 'GetMessageSessionStatResponse',
        };
}
# @return GetMessageSessionStatResponse
#
sub get_message_session_stat {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_message_session_stat");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/{id}/stat';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'include_deleted'}) {
        $query_params->{'includeDeleted'} = $self->{api_client}->to_query_value($args{'include_deleted'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessageSessionStatResponse', $response);
    return $_response_object;
}

#
# get_messages_by_session_id
#
# Get a session`s messages
# 
# @param int $id  (required)
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $statuses Find messages by status. (optional)
# @param int $include_deleted Search also in deleted messages. (optional, default to 0)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'statuses' => {
        data_type => 'string',
        description => 'Find messages by status.',
        required => '0',
    },
    'include_deleted' => {
        data_type => 'int',
        description => 'Search also in deleted messages.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_messages_by_session_id' } = { 
    	summary => 'Get a session&#x60;s messages',
        params => $params,
        returns => 'GetMessagesBySessionIdPaginatedResponse',
        };
}
# @return GetMessagesBySessionIdPaginatedResponse
#
sub get_messages_by_session_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_messages_by_session_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/{id}/messages';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'statuses'}) {
        $query_params->{'statuses'} = $self->{api_client}->to_query_value($args{'statuses'});
    }

    # query params
    if ( exists $args{'include_deleted'}) {
        $query_params->{'includeDeleted'} = $self->{api_client}->to_query_value($args{'include_deleted'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagesBySessionIdPaginatedResponse', $response);
    return $_response_object;
}

#
# get_messaging_counters
#
# Get sent/received messages counters values
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_messaging_counters' } = { 
    	summary => 'Get sent/received messages counters values',
        params => $params,
        returns => 'GetMessagingCountersResponse',
        };
}
# @return GetMessagingCountersResponse
#
sub get_messaging_counters {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/stats/messaging/data';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagingCountersResponse', $response);
    return $_response_object;
}

#
# get_messaging_stat
#
# Get messaging statistics
# 
# @param string $by *   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year.  (optional, default to off)
# @param int $start Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)
# @param int $end Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)
{
    my $params = {
    'by' => {
        data_type => 'string',
        description => '*   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year. ',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior. ',
        required => '0',
    },
    'end' => {
        data_type => 'int',
        description => 'Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_messaging_stat' } = { 
    	summary => 'Get messaging statistics',
        params => $params,
        returns => 'GetMessagingStatResponse',
        };
}
# @return GetMessagingStatResponse
#
sub get_messaging_stat {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/stats/messaging';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'by'}) {
        $query_params->{'by'} = $self->{api_client}->to_query_value($args{'by'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagingStatResponse', $response);
    return $_response_object;
}

#
# get_outbound_message
#
# Get a single message
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_outbound_message' } = { 
    	summary => 'Get a single message',
        params => $params,
        returns => 'MessageOut',
        };
}
# @return MessageOut
#
sub get_outbound_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_outbound_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessageOut', $response);
    return $_response_object;
}

#
# get_outbound_messages_history
#
# Get history
# 
# @param int $limit The number of results per page. (optional, default to 10)
# @param int $last_id Filter results by ID, selecting all values lesser than the specified ID. (optional)
# @param string $query Find message by specified search query. (optional)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'last_id' => {
        data_type => 'int',
        description => 'Filter results by ID, selecting all values lesser than the specified ID.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find message by specified search query.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_outbound_messages_history' } = { 
    	summary => 'Get history',
        params => $params,
        returns => 'GetOutboundMessagesHistoryPaginatedResponse',
        };
}
# @return GetOutboundMessagesHistoryPaginatedResponse
#
sub get_outbound_messages_history {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/history';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'last_id'}) {
        $query_params->{'lastId'} = $self->{api_client}->to_query_value($args{'last_id'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOutboundMessagesHistoryPaginatedResponse', $response);
    return $_response_object;
}

#
# get_scheduled_message
#
# Get a single scheduled message
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_scheduled_message' } = { 
    	summary => 'Get a single scheduled message',
        params => $params,
        returns => 'MessagesIcs',
        };
}
# @return MessagesIcs
#
sub get_scheduled_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_scheduled_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/schedules/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessagesIcs', $response);
    return $_response_object;
}

#
# get_sender_id
#
# Get the details of a specific Sender ID
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_sender_id' } = { 
    	summary => 'Get the details of a specific Sender ID',
        params => $params,
        returns => 'SenderId',
        };
}
# @return SenderId
#
sub get_sender_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_sender_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/senderids/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SenderId', $response);
    return $_response_object;
}

#
# get_sender_ids
#
# Get all your approved Sender IDs
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_sender_ids' } = { 
    	summary => 'Get all your approved Sender IDs',
        params => $params,
        returns => 'GetSenderIdsPaginatedResponse',
        };
}
# @return GetSenderIdsPaginatedResponse
#
sub get_sender_ids {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/senderids';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSenderIdsPaginatedResponse', $response);
    return $_response_object;
}

#
# get_sender_settings
#
# Get current sender settings
# 
# @param string $country Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters. (optional)
{
    my $params = {
    'country' => {
        data_type => 'string',
        description => 'Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_sender_settings' } = { 
    	summary => 'Get current sender settings',
        params => $params,
        returns => 'GetSenderSettingsResponse',
        };
}
# @return GetSenderSettingsResponse
#
sub get_sender_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/sender/settings/normalized';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSenderSettingsResponse', $response);
    return $_response_object;
}

#
# get_spending_stat
#
# Get spending statistics
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $start Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)
# @param string $end Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'start' => {
        data_type => 'string',
        description => 'Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior. ',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => 'Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_spending_stat' } = { 
    	summary => 'Get spending statistics',
        params => $params,
        returns => 'GetSpendingStatPaginatedResponse',
        };
}
# @return GetSpendingStatPaginatedResponse
#
sub get_spending_stat {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/stats/spending';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSpendingStatPaginatedResponse', $response);
    return $_response_object;
}

#
# get_subaccount
#
# Get sub-account information
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subaccount' } = { 
    	summary => 'Get sub-account information',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub get_subaccount {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_subaccount");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# get_subaccounts
#
# Get a sub-accounts list
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subaccounts' } = { 
    	summary => 'Get a sub-accounts list',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub get_subaccounts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# get_subaccounts_with_tokens
#
# Get all sub-accounts with their REST API tokens associated with a specified app name
# 
# @param GetSubaccountsWithTokensInputObject $get_subaccounts_with_tokens_input_object  (required)
# @param Number $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'get_subaccounts_with_tokens_input_object' => {
        data_type => 'GetSubaccountsWithTokensInputObject',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'Number',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subaccounts_with_tokens' } = { 
    	summary => 'Get all sub-accounts with their REST API tokens associated with a specified app name',
        params => $params,
        returns => 'GetSubaccountsWithTokensResponse',
        };
}
# @return GetSubaccountsWithTokensResponse
#
sub get_subaccounts_with_tokens {
    my ($self, %args) = @_;

    # verify the required parameter 'get_subaccounts_with_tokens_input_object' is set
    unless (exists $args{'get_subaccounts_with_tokens_input_object'}) {
      croak("Missing the required parameter 'get_subaccounts_with_tokens_input_object' when calling get_subaccounts_with_tokens");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts/tokens/list';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_subaccounts_with_tokens_input_object'}) {
        $_body_data = $args{'get_subaccounts_with_tokens_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSubaccountsWithTokensResponse', $response);
    return $_response_object;
}

#
# get_template
#
# Get a template`s details
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_template' } = { 
    	summary => 'Get a template&#x60;s details',
        params => $params,
        returns => 'MessageTemplate',
        };
}
# @return MessageTemplate
#
sub get_template {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_template");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessageTemplate', $response);
    return $_response_object;
}

#
# get_timezones
#
# Get timezones
# 
# @param int $full Return full info about timezones in array (0 or 1). Default is 0. (optional, default to 0)
{
    my $params = {
    'full' => {
        data_type => 'int',
        description => 'Return full info about timezones in array (0 or 1). Default is 0.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_timezones' } = { 
    	summary => 'Get timezones',
        params => $params,
        returns => 'GetTimezonesResponse',
        };
}
# @return GetTimezonesResponse
#
sub get_timezones {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/timezones';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'full'}) {
        $query_params->{'full'} = $self->{api_client}->to_query_value($args{'full'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetTimezonesResponse', $response);
    return $_response_object;
}

#
# get_unread_messages_total
#
# Get unread messages number
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_unread_messages_total' } = { 
    	summary => 'Get unread messages number',
        params => $params,
        returns => 'GetUnreadMessagesTotalResponse',
        };
}
# @return GetUnreadMessagesTotalResponse
#
sub get_unread_messages_total {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/unread/count';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetUnreadMessagesTotalResponse', $response);
    return $_response_object;
}

#
# get_unsubscribed_contact
#
# Get the details of a specific unsubscribed contact
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_unsubscribed_contact' } = { 
    	summary => 'Get the details of a specific unsubscribed contact',
        params => $params,
        returns => 'UnsubscribedContact',
        };
}
# @return UnsubscribedContact
#
sub get_unsubscribed_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_unsubscribed_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/unsubscribers/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UnsubscribedContact', $response);
    return $_response_object;
}

#
# get_unsubscribers
#
# Get all unsubscribed contacts
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_unsubscribers' } = { 
    	summary => 'Get all unsubscribed contacts',
        params => $params,
        returns => 'GetUnsubscribersPaginatedResponse',
        };
}
# @return GetUnsubscribersPaginatedResponse
#
sub get_unsubscribers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/unsubscribers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetUnsubscribersPaginatedResponse', $response);
    return $_response_object;
}

#
# get_user_dedicated_numbers
#
# Get all your dedicated numbers
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param int $survey_id Fetch only those numbers that are ready for the survey. (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'survey_id' => {
        data_type => 'int',
        description => 'Fetch only those numbers that are ready for the survey.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_dedicated_numbers' } = { 
    	summary => 'Get all your dedicated numbers',
        params => $params,
        returns => 'GetUserDedicatedNumbersPaginatedResponse',
        };
}
# @return GetUserDedicatedNumbersPaginatedResponse
#
sub get_user_dedicated_numbers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/numbers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'survey_id'}) {
        $query_params->{'surveyId'} = $self->{api_client}->to_query_value($args{'survey_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetUserDedicatedNumbersPaginatedResponse', $response);
    return $_response_object;
}

#
# import_contacts
#
# Import contacts
# 
# @param File $file File containing contacts in csv or xls(x) formats. (required)
# @param string $column Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required.  (required)
# @param int $list_id List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)
# @param string $list_name List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)
{
    my $params = {
    'file' => {
        data_type => 'File',
        description => 'File containing contacts in csv or xls(x) formats.',
        required => '1',
    },
    'column' => {
        data_type => 'string',
        description => 'Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. ',
        required => '1',
    },
    'list_id' => {
        data_type => 'int',
        description => 'List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified. ',
        required => '0',
    },
    'list_name' => {
        data_type => 'string',
        description => 'List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'import_contacts' } = { 
    	summary => 'Import contacts',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub import_contacts {
    my ($self, %args) = @_;

    # verify the required parameter 'file' is set
    unless (exists $args{'file'}) {
      croak("Missing the required parameter 'file' when calling import_contacts");
    }

    # verify the required parameter 'column' is set
    unless (exists $args{'column'}) {
      croak("Missing the required parameter 'column' when calling import_contacts");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/import/normalized';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # query params
    if ( exists $args{'column'}) {
        $query_params->{'column'} = $self->{api_client}->to_query_value($args{'column'});
    }

    # query params
    if ( exists $args{'list_id'}) {
        $query_params->{'listId'} = $self->{api_client}->to_query_value($args{'list_id'});
    }

    # query params
    if ( exists $args{'list_name'}) {
        $query_params->{'listName'} = $self->{api_client}->to_query_value($args{'list_name'});
    }

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# invite_subaccount
#
# Invite a new sub-account
# 
# @param InviteSubaccountInputObject $invite_subaccount_input_object  (required)
{
    my $params = {
    'invite_subaccount_input_object' => {
        data_type => 'InviteSubaccountInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'invite_subaccount' } = { 
    	summary => 'Invite a new sub-account',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub invite_subaccount {
    my ($self, %args) = @_;

    # verify the required parameter 'invite_subaccount_input_object' is set
    unless (exists $args{'invite_subaccount_input_object'}) {
      croak("Missing the required parameter 'invite_subaccount_input_object' when calling invite_subaccount");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'invite_subaccount_input_object'}) {
        $_body_data = $args{'invite_subaccount_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mark_chats_read_bulk
#
# Mark chats as read (bulk)
# 
# @param MarkChatsReadBulkInputObject $mark_chats_read_bulk_input_object  (required)
{
    my $params = {
    'mark_chats_read_bulk_input_object' => {
        data_type => 'MarkChatsReadBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mark_chats_read_bulk' } = { 
    	summary => 'Mark chats as read (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mark_chats_read_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'mark_chats_read_bulk_input_object' is set
    unless (exists $args{'mark_chats_read_bulk_input_object'}) {
      croak("Missing the required parameter 'mark_chats_read_bulk_input_object' when calling mark_chats_read_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/read/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'mark_chats_read_bulk_input_object'}) {
        $_body_data = $args{'mark_chats_read_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mark_chats_unread_bulk
#
# Mark chats as unread (bulk)
# 
# @param MarkChatsUnreadBulkInputObject $mark_chats_unread_bulk_input_object  (required)
{
    my $params = {
    'mark_chats_unread_bulk_input_object' => {
        data_type => 'MarkChatsUnreadBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mark_chats_unread_bulk' } = { 
    	summary => 'Mark chats as unread (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mark_chats_unread_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'mark_chats_unread_bulk_input_object' is set
    unless (exists $args{'mark_chats_unread_bulk_input_object'}) {
      croak("Missing the required parameter 'mark_chats_unread_bulk_input_object' when calling mark_chats_unread_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/unread/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'mark_chats_unread_bulk_input_object'}) {
        $_body_data = $args{'mark_chats_unread_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mute_chat
#
# Mute chat sounds
# 
# @param MuteChatInputObject $mute_chat_input_object  (required)
{
    my $params = {
    'mute_chat_input_object' => {
        data_type => 'MuteChatInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mute_chat' } = { 
    	summary => 'Mute chat sounds',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub mute_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'mute_chat_input_object' is set
    unless (exists $args{'mute_chat_input_object'}) {
      croak("Missing the required parameter 'mute_chat_input_object' when calling mute_chat");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/mute';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'mute_chat_input_object'}) {
        $_body_data = $args{'mute_chat_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# mute_chats_bulk
#
# Mute chats (bulk)
# 
# @param MuteChatsBulkInputObject $mute_chats_bulk_input_object  (required)
{
    my $params = {
    'mute_chats_bulk_input_object' => {
        data_type => 'MuteChatsBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mute_chats_bulk' } = { 
    	summary => 'Mute chats (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mute_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'mute_chats_bulk_input_object' is set
    unless (exists $args{'mute_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'mute_chats_bulk_input_object' when calling mute_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/mute/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'mute_chats_bulk_input_object'}) {
        $_body_data = $args{'mute_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ping
#
# Ping
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'ping' } = { 
    	summary => 'Ping',
        params => $params,
        returns => 'PingResponse',
        };
}
# @return PingResponse
#
sub ping {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/ping';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PingResponse', $response);
    return $_response_object;
}

#
# reopen_chats_bulk
#
# Reopen chats (bulk)
# 
# @param ReopenChatsBulkInputObject $reopen_chats_bulk_input_object  (required)
{
    my $params = {
    'reopen_chats_bulk_input_object' => {
        data_type => 'ReopenChatsBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reopen_chats_bulk' } = { 
    	summary => 'Reopen chats (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reopen_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'reopen_chats_bulk_input_object' is set
    unless (exists $args{'reopen_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'reopen_chats_bulk_input_object' when calling reopen_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/reopen/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'reopen_chats_bulk_input_object'}) {
        $_body_data = $args{'reopen_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# request_new_subaccount_token
#
# Request a new REST API token for sub-account
# 
# @param RequestNewSubaccountTokenInputObject $request_new_subaccount_token_input_object  (required)
{
    my $params = {
    'request_new_subaccount_token_input_object' => {
        data_type => 'RequestNewSubaccountTokenInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_new_subaccount_token' } = { 
    	summary => 'Request a new REST API token for sub-account',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub request_new_subaccount_token {
    my ($self, %args) = @_;

    # verify the required parameter 'request_new_subaccount_token_input_object' is set
    unless (exists $args{'request_new_subaccount_token_input_object'}) {
      croak("Missing the required parameter 'request_new_subaccount_token_input_object' when calling request_new_subaccount_token");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts/tokens';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_new_subaccount_token_input_object'}) {
        $_body_data = $args{'request_new_subaccount_token_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# request_sender_id
#
# Apply for a new Sender ID
# 
# @param RequestSenderIdInputObject $request_sender_id_input_object  (required)
{
    my $params = {
    'request_sender_id_input_object' => {
        data_type => 'RequestSenderIdInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_sender_id' } = { 
    	summary => 'Apply for a new Sender ID',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub request_sender_id {
    my ($self, %args) = @_;

    # verify the required parameter 'request_sender_id_input_object' is set
    unless (exists $args{'request_sender_id_input_object'}) {
      croak("Missing the required parameter 'request_sender_id_input_object' when calling request_sender_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/senderids';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_sender_id_input_object'}) {
        $_body_data = $args{'request_sender_id_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# search_chats
#
# Find chats by message text
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $query Find chats by specified search query. (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find chats by specified search query.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_chats' } = { 
    	summary => 'Find chats by message text',
        params => $params,
        returns => 'SearchChatsPaginatedResponse',
        };
}
# @return SearchChatsPaginatedResponse
#
sub search_chats {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchChatsPaginatedResponse', $response);
    return $_response_object;
}

#
# search_chats_by_ids
#
# Find chats (bulk)
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $ids Find chats by ID(s). (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find chats by ID(s).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_chats_by_ids' } = { 
    	summary => 'Find chats (bulk)',
        params => $params,
        returns => 'SearchChatsByIdsPaginatedResponse',
        };
}
# @return SearchChatsByIdsPaginatedResponse
#
sub search_chats_by_ids {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/search/ids';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchChatsByIdsPaginatedResponse', $response);
    return $_response_object;
}

#
# search_chats_by_receipent
#
# Find chats by recipient
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $query Find chats by specified search query. (optional)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find chats by specified search query.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_chats_by_receipent' } = { 
    	summary => 'Find chats by recipient',
        params => $params,
        returns => 'SearchChatsByReceipentPaginatedResponse',
        };
}
# @return SearchChatsByReceipentPaginatedResponse
#
sub search_chats_by_receipent {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/search/recipients';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchChatsByReceipentPaginatedResponse', $response);
    return $_response_object;
}

#
# search_contacts
#
# Find contacts by given criteria
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param int $shared Should shared contacts be included? (optional, default to 0)
# @param string $ids Find contacts by IDs. (optional)
# @param int $list_id Find contacts by List ID. (optional)
# @param int $include_blocked Should blocked contacts be included? (optional)
# @param string $query Find contacts by specified search query. (optional)
# @param int $local Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0. (optional, default to 0)
# @param int $exact_match Return only exactly matching contacts. Default is 0. (optional, default to 0)
# @param string $country The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country. (optional)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'shared' => {
        data_type => 'int',
        description => 'Should shared contacts be included?',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find contacts by IDs.',
        required => '0',
    },
    'list_id' => {
        data_type => 'int',
        description => 'Find contacts by List ID.',
        required => '0',
    },
    'include_blocked' => {
        data_type => 'int',
        description => 'Should blocked contacts be included?',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find contacts by specified search query.',
        required => '0',
    },
    'local' => {
        data_type => 'int',
        description => 'Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0.',
        required => '0',
    },
    'exact_match' => {
        data_type => 'int',
        description => 'Return only exactly matching contacts. Default is 0.',
        required => '0',
    },
    'country' => {
        data_type => 'string',
        description => 'The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_contacts' } = { 
    	summary => 'Find contacts by given criteria',
        params => $params,
        returns => 'SearchContactsPaginatedResponse',
        };
}
# @return SearchContactsPaginatedResponse
#
sub search_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contacts/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'shared'}) {
        $query_params->{'shared'} = $self->{api_client}->to_query_value($args{'shared'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'list_id'}) {
        $query_params->{'listId'} = $self->{api_client}->to_query_value($args{'list_id'});
    }

    # query params
    if ( exists $args{'include_blocked'}) {
        $query_params->{'includeBlocked'} = $self->{api_client}->to_query_value($args{'include_blocked'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'local'}) {
        $query_params->{'local'} = $self->{api_client}->to_query_value($args{'local'});
    }

    # query params
    if ( exists $args{'exact_match'}) {
        $query_params->{'exactMatch'} = $self->{api_client}->to_query_value($args{'exact_match'});
    }

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchContactsPaginatedResponse', $response);
    return $_response_object;
}

#
# search_inbound_messages
#
# Find inbound messages
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $ids Find message by ID(s). (optional)
# @param string $query Find recipients by specified search query. (optional)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
# @param int $expand Expand by adding firstName, lastName and contactId. (optional, default to 0)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find message by ID(s).',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find recipients by specified search query.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    'expand' => {
        data_type => 'int',
        description => 'Expand by adding firstName, lastName and contactId.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_inbound_messages' } = { 
    	summary => 'Find inbound messages',
        params => $params,
        returns => 'SearchInboundMessagesPaginatedResponse',
        };
}
# @return SearchInboundMessagesPaginatedResponse
#
sub search_inbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/replies/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # query params
    if ( exists $args{'expand'}) {
        $query_params->{'expand'} = $self->{api_client}->to_query_value($args{'expand'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchInboundMessagesPaginatedResponse', $response);
    return $_response_object;
}

#
# search_lists
#
# Find lists by given criteria
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $ids Find lists by IDs. (optional)
# @param string $query Find lists by specified search query. (optional)
# @param int $only_mine Return only current user lists. (optional, default to 0)
# @param int $only_default Return only default lists. (optional, default to 0)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find lists by IDs.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find lists by specified search query.',
        required => '0',
    },
    'only_mine' => {
        data_type => 'int',
        description => 'Return only current user lists.',
        required => '0',
    },
    'only_default' => {
        data_type => 'int',
        description => 'Return only default lists.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_lists' } = { 
    	summary => 'Find lists by given criteria',
        params => $params,
        returns => 'SearchListsPaginatedResponse',
        };
}
# @return SearchListsPaginatedResponse
#
sub search_lists {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/lists/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'only_mine'}) {
        $query_params->{'onlyMine'} = $self->{api_client}->to_query_value($args{'only_mine'});
    }

    # query params
    if ( exists $args{'only_default'}) {
        $query_params->{'onlyDefault'} = $self->{api_client}->to_query_value($args{'only_default'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchListsPaginatedResponse', $response);
    return $_response_object;
}

#
# search_outbound_messages
#
# Find messages
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param int $last_id Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)
# @param string $ids Find message by ID(s). (optional)
# @param int $session_id Find messages by session ID. (optional)
# @param string $statuses Find messages by status. (optional)
# @param int $include_deleted Search also in deleted messages. (optional, default to 0)
# @param string $query Find messages by specified search query. (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'last_id' => {
        data_type => 'int',
        description => 'Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified.',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find message by ID(s).',
        required => '0',
    },
    'session_id' => {
        data_type => 'int',
        description => 'Find messages by session ID.',
        required => '0',
    },
    'statuses' => {
        data_type => 'string',
        description => 'Find messages by status.',
        required => '0',
    },
    'include_deleted' => {
        data_type => 'int',
        description => 'Search also in deleted messages.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find messages by specified search query.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_outbound_messages' } = { 
    	summary => 'Find messages',
        params => $params,
        returns => 'SearchOutboundMessagesPaginatedResponse',
        };
}
# @return SearchOutboundMessagesPaginatedResponse
#
sub search_outbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/messages/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'last_id'}) {
        $query_params->{'lastId'} = $self->{api_client}->to_query_value($args{'last_id'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'session_id'}) {
        $query_params->{'sessionId'} = $self->{api_client}->to_query_value($args{'session_id'});
    }

    # query params
    if ( exists $args{'statuses'}) {
        $query_params->{'statuses'} = $self->{api_client}->to_query_value($args{'statuses'});
    }

    # query params
    if ( exists $args{'include_deleted'}) {
        $query_params->{'includeDeleted'} = $self->{api_client}->to_query_value($args{'include_deleted'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchOutboundMessagesPaginatedResponse', $response);
    return $_response_object;
}

#
# search_scheduled_messages
#
# Find scheduled messages
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $query Find messages by specified search query. (optional)
# @param string $ids Find schedules by ID(s). (optional)
# @param string $status Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)
# @param string $order_by Order results by some field. Default is id. (optional, default to id)
# @param string $direction Order direction. Default is desc. (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find messages by specified search query.',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find schedules by ID(s).',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Fetch schedules with a specific status: a - actual, c - completed, x - all.',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id.',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_scheduled_messages' } = { 
    	summary => 'Find scheduled messages',
        params => $params,
        returns => 'SearchScheduledMessagesPaginatedResponse',
        };
}
# @return SearchScheduledMessagesPaginatedResponse
#
sub search_scheduled_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/schedules/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchScheduledMessagesPaginatedResponse', $response);
    return $_response_object;
}

#
# search_templates
#
# Find templates by criteria
# 
# @param int $page Fetch specified results page. (optional, default to 1)
# @param int $limit The number of results per page. (optional, default to 10)
# @param string $ids Find template by ID(s). (optional)
# @param string $name Find template by name. (optional)
# @param string $content Find template by content. (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page.',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The number of results per page.',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find template by ID(s).',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Find template by name.',
        required => '0',
    },
    'content' => {
        data_type => 'string',
        description => 'Find template by content.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_templates' } = { 
    	summary => 'Find templates by criteria',
        params => $params,
        returns => 'SearchTemplatesPaginatedResponse',
        };
}
# @return SearchTemplatesPaginatedResponse
#
sub search_templates {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/templates/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'content'}) {
        $query_params->{'content'} = $self->{api_client}->to_query_value($args{'content'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchTemplatesPaginatedResponse', $response);
    return $_response_object;
}

#
# send_message
#
# Send message
# 
# @param SendMessageInputObject $send_message_input_object  (required)
{
    my $params = {
    'send_message_input_object' => {
        data_type => 'SendMessageInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_message' } = { 
    	summary => 'Send message',
        params => $params,
        returns => 'SendMessageResponse',
        };
}
# @return SendMessageResponse
#
sub send_message {
    my ($self, %args) = @_;

    # verify the required parameter 'send_message_input_object' is set
    unless (exists $args{'send_message_input_object'}) {
      croak("Missing the required parameter 'send_message_input_object' when calling send_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'send_message_input_object'}) {
        $_body_data = $args{'send_message_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SendMessageResponse', $response);
    return $_response_object;
}

#
# send_phone_verification_code_tfa
#
# Step 1: Send a verification code 
# 
# @param SendPhoneVerificationCodeTFAInputObject $send_phone_verification_code_tfa_input_object  (required)
{
    my $params = {
    'send_phone_verification_code_tfa_input_object' => {
        data_type => 'SendPhoneVerificationCodeTFAInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_phone_verification_code_tfa' } = { 
    	summary => 'Step 1: Send a verification code ',
        params => $params,
        returns => 'SendPhoneVerificationCodeResponse',
        };
}
# @return SendPhoneVerificationCodeResponse
#
sub send_phone_verification_code_tfa {
    my ($self, %args) = @_;

    # verify the required parameter 'send_phone_verification_code_tfa_input_object' is set
    unless (exists $args{'send_phone_verification_code_tfa_input_object'}) {
      croak("Missing the required parameter 'send_phone_verification_code_tfa_input_object' when calling send_phone_verification_code_tfa");
    }

    # parse inputs
    my $_resource_path = '/api/v2/verify';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'send_phone_verification_code_tfa_input_object'}) {
        $_body_data = $args{'send_phone_verification_code_tfa_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SendPhoneVerificationCodeResponse', $response);
    return $_response_object;
}

#
# set_chat_status
#
# Change chat status
# 
# @param SetChatStatusInputObject $set_chat_status_input_object  (required)
{
    my $params = {
    'set_chat_status_input_object' => {
        data_type => 'SetChatStatusInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_chat_status' } = { 
    	summary => 'Change chat status',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub set_chat_status {
    my ($self, %args) = @_;

    # verify the required parameter 'set_chat_status_input_object' is set
    unless (exists $args{'set_chat_status_input_object'}) {
      croak("Missing the required parameter 'set_chat_status_input_object' when calling set_chat_status");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/status';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'set_chat_status_input_object'}) {
        $_body_data = $args{'set_chat_status_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# unblock_contact
#
# Unblock a contact by phone number
# 
# @param UnblockContactInputObject $unblock_contact_input_object  (required)
{
    my $params = {
    'unblock_contact_input_object' => {
        data_type => 'UnblockContactInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'unblock_contact' } = { 
    	summary => 'Unblock a contact by phone number',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub unblock_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'unblock_contact_input_object' is set
    unless (exists $args{'unblock_contact_input_object'}) {
      croak("Missing the required parameter 'unblock_contact_input_object' when calling unblock_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/unblock';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unblock_contact_input_object'}) {
        $_body_data = $args{'unblock_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# unblock_contacts_bulk
#
# Unblock contacts (bulk)
# 
# @param UnblockContactsBulkInputObject $unblock_contacts_bulk_input_object  (required)
{
    my $params = {
    'unblock_contacts_bulk_input_object' => {
        data_type => 'UnblockContactsBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'unblock_contacts_bulk' } = { 
    	summary => 'Unblock contacts (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub unblock_contacts_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'unblock_contacts_bulk_input_object' is set
    unless (exists $args{'unblock_contacts_bulk_input_object'}) {
      croak("Missing the required parameter 'unblock_contacts_bulk_input_object' when calling unblock_contacts_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/unblock/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unblock_contacts_bulk_input_object'}) {
        $_body_data = $args{'unblock_contacts_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# unmute_chats_bulk
#
# Unmute chats (bulk)
# 
# @param UnmuteChatsBulkInputObject $unmute_chats_bulk_input_object  (required)
{
    my $params = {
    'unmute_chats_bulk_input_object' => {
        data_type => 'UnmuteChatsBulkInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'unmute_chats_bulk' } = { 
    	summary => 'Unmute chats (bulk)',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub unmute_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'unmute_chats_bulk_input_object' is set
    unless (exists $args{'unmute_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'unmute_chats_bulk_input_object' when calling unmute_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/unmute/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unmute_chats_bulk_input_object'}) {
        $_body_data = $args{'unmute_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# unsubscribe_contact
#
# Manually unsubscribe a contact
# 
# @param UnsubscribeContactInputObject $unsubscribe_contact_input_object  (required)
{
    my $params = {
    'unsubscribe_contact_input_object' => {
        data_type => 'UnsubscribeContactInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'unsubscribe_contact' } = { 
    	summary => 'Manually unsubscribe a contact',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub unsubscribe_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'unsubscribe_contact_input_object' is set
    unless (exists $args{'unsubscribe_contact_input_object'}) {
      croak("Missing the required parameter 'unsubscribe_contact_input_object' when calling unsubscribe_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/unsubscribers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'unsubscribe_contact_input_object'}) {
        $_body_data = $args{'unsubscribe_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_balance_notification_settings
#
# Update balance notification settings
# 
# @param UpdateBalanceNotificationSettingsInputObject $update_balance_notification_settings_input_object  (required)
{
    my $params = {
    'update_balance_notification_settings_input_object' => {
        data_type => 'UpdateBalanceNotificationSettingsInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_balance_notification_settings' } = { 
    	summary => 'Update balance notification settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_balance_notification_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'update_balance_notification_settings_input_object' is set
    unless (exists $args{'update_balance_notification_settings_input_object'}) {
      croak("Missing the required parameter 'update_balance_notification_settings_input_object' when calling update_balance_notification_settings");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/balance';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'update_balance_notification_settings_input_object'}) {
        $_body_data = $args{'update_balance_notification_settings_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_callback_settings
#
# Update callback URL settings
# 
# @param UpdateCallbackSettingsInputObject $update_callback_settings_input_object  (required)
{
    my $params = {
    'update_callback_settings_input_object' => {
        data_type => 'UpdateCallbackSettingsInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_callback_settings' } = { 
    	summary => 'Update callback URL settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_callback_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'update_callback_settings_input_object' is set
    unless (exists $args{'update_callback_settings_input_object'}) {
      croak("Missing the required parameter 'update_callback_settings_input_object' when calling update_callback_settings");
    }

    # parse inputs
    my $_resource_path = '/api/v2/callback/settings';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'update_callback_settings_input_object'}) {
        $_body_data = $args{'update_callback_settings_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_chat_desktop_notification_settings
#
# Update chat desktop notification settings
# 
# @param UpdateChatDesktopNotificationSettingsInputObject $update_chat_desktop_notification_settings_input_object  (required)
{
    my $params = {
    'update_chat_desktop_notification_settings_input_object' => {
        data_type => 'UpdateChatDesktopNotificationSettingsInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_chat_desktop_notification_settings' } = { 
    	summary => 'Update chat desktop notification settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_chat_desktop_notification_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'update_chat_desktop_notification_settings_input_object' is set
    unless (exists $args{'update_chat_desktop_notification_settings_input_object'}) {
      croak("Missing the required parameter 'update_chat_desktop_notification_settings_input_object' when calling update_chat_desktop_notification_settings");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/desktop/notification';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'update_chat_desktop_notification_settings_input_object'}) {
        $_body_data = $args{'update_chat_desktop_notification_settings_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_contact
#
# Edit a contact
# 
# @param UpdateContactInputObject $update_contact_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'update_contact_input_object' => {
        data_type => 'UpdateContactInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_contact' } = { 
    	summary => 'Edit a contact',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'update_contact_input_object' is set
    unless (exists $args{'update_contact_input_object'}) {
      croak("Missing the required parameter 'update_contact_input_object' when calling update_contact");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/normalized';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_contact_input_object'}) {
        $_body_data = $args{'update_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_contact_note
#
# Update a contact note
# 
# @param UpdateContactNoteInputObject $update_contact_note_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'update_contact_note_input_object' => {
        data_type => 'UpdateContactNoteInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_contact_note' } = { 
    	summary => 'Update a contact note',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_contact_note {
    my ($self, %args) = @_;

    # verify the required parameter 'update_contact_note_input_object' is set
    unless (exists $args{'update_contact_note_input_object'}) {
      croak("Missing the required parameter 'update_contact_note_input_object' when calling update_contact_note");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_contact_note");
    }

    # parse inputs
    my $_resource_path = '/api/v2/notes/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_contact_note_input_object'}) {
        $_body_data = $args{'update_contact_note_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_current_user
#
# Edit current account info
# 
# @param UpdateCurrentUserInputObject $update_current_user_input_object  (required)
{
    my $params = {
    'update_current_user_input_object' => {
        data_type => 'UpdateCurrentUserInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_current_user' } = { 
    	summary => 'Edit current account info',
        params => $params,
        returns => 'UpdateCurrentUserResponse',
        };
}
# @return UpdateCurrentUserResponse
#
sub update_current_user {
    my ($self, %args) = @_;

    # verify the required parameter 'update_current_user_input_object' is set
    unless (exists $args{'update_current_user_input_object'}) {
      croak("Missing the required parameter 'update_current_user_input_object' when calling update_current_user");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'update_current_user_input_object'}) {
        $_body_data = $args{'update_current_user_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateCurrentUserResponse', $response);
    return $_response_object;
}

#
# update_custom_field
#
# Edit a custom field
# 
# @param UpdateCustomFieldInputObject $update_custom_field_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'update_custom_field_input_object' => {
        data_type => 'UpdateCustomFieldInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_custom_field' } = { 
    	summary => 'Edit a custom field',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_custom_field {
    my ($self, %args) = @_;

    # verify the required parameter 'update_custom_field_input_object' is set
    unless (exists $args{'update_custom_field_input_object'}) {
      croak("Missing the required parameter 'update_custom_field_input_object' when calling update_custom_field");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_custom_field");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_custom_field_input_object'}) {
        $_body_data = $args{'update_custom_field_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_custom_field_value
#
# Edit the custom field value of a specified contact
# 
# @param UpdateCustomFieldValueInputObject $update_custom_field_value_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'update_custom_field_value_input_object' => {
        data_type => 'UpdateCustomFieldValueInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_custom_field_value' } = { 
    	summary => 'Edit the custom field value of a specified contact',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_custom_field_value {
    my ($self, %args) = @_;

    # verify the required parameter 'update_custom_field_value_input_object' is set
    unless (exists $args{'update_custom_field_value_input_object'}) {
      croak("Missing the required parameter 'update_custom_field_value_input_object' when calling update_custom_field_value");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_custom_field_value");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields/{id}/update';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_custom_field_value_input_object'}) {
        $_body_data = $args{'update_custom_field_value_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_inbound_messages_notification_settings
#
# Update inbound messages notification settings
# 
# @param UpdateInboundMessagesNotificationSettingsInputObject $update_inbound_messages_notification_settings_input_object  (required)
{
    my $params = {
    'update_inbound_messages_notification_settings_input_object' => {
        data_type => 'UpdateInboundMessagesNotificationSettingsInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_inbound_messages_notification_settings' } = { 
    	summary => 'Update inbound messages notification settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_inbound_messages_notification_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'update_inbound_messages_notification_settings_input_object' is set
    unless (exists $args{'update_inbound_messages_notification_settings_input_object'}) {
      croak("Missing the required parameter 'update_inbound_messages_notification_settings_input_object' when calling update_inbound_messages_notification_settings");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/inbound';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'update_inbound_messages_notification_settings_input_object'}) {
        $_body_data = $args{'update_inbound_messages_notification_settings_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_list
#
# Edit a list
# 
# @param int $id  (required)
# @param UpdateListObject $update_list_object  (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'update_list_object' => {
        data_type => 'UpdateListObject',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_list' } = { 
    	summary => 'Edit a list',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_list {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_list_object'}) {
        $_body_data = $args{'update_list_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_sender_setting
#
# Change sender settings
# 
# @param UpdateSenderSettingInputObject $update_sender_setting_input_object  (required)
{
    my $params = {
    'update_sender_setting_input_object' => {
        data_type => 'UpdateSenderSettingInputObject',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_sender_setting' } = { 
    	summary => 'Change sender settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_sender_setting {
    my ($self, %args) = @_;

    # verify the required parameter 'update_sender_setting_input_object' is set
    unless (exists $args{'update_sender_setting_input_object'}) {
      croak("Missing the required parameter 'update_sender_setting_input_object' when calling update_sender_setting");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sender/settings';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'update_sender_setting_input_object'}) {
        $_body_data = $args{'update_sender_setting_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_template
#
# Update a template
# 
# @param UpdateTemplateInputObject $update_template_input_object  (required)
# @param int $id  (required)
{
    my $params = {
    'update_template_input_object' => {
        data_type => 'UpdateTemplateInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_template' } = { 
    	summary => 'Update a template',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_template {
    my ($self, %args) = @_;

    # verify the required parameter 'update_template_input_object' is set
    unless (exists $args{'update_template_input_object'}) {
      croak("Missing the required parameter 'update_template_input_object' when calling update_template");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_template");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_template_input_object'}) {
        $_body_data = $args{'update_template_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# upload_avatar
#
# Upload an avatar
# 
# @param File $image User avatar. Should be a PNG or JPG file not more than 10 MB. (required)
{
    my $params = {
    'image' => {
        data_type => 'File',
        description => 'User avatar. Should be a PNG or JPG file not more than 10 MB.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_avatar' } = { 
    	summary => 'Upload an avatar',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub upload_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'image' is set
    unless (exists $args{'image'}) {
      croak("Missing the required parameter 'image' when calling upload_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/avatar';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'image'} ) {
        $form_params->{'image'} = [] unless defined $form_params->{'image'};
        push @{$form_params->{'image'}}, $args{'image'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# upload_contact_avatar
#
# Upload an avatar
# 
# @param File $image Contact avatar. Should be a PNG or JPG file not more than 10 MB. (required)
# @param int $id  (required)
{
    my $params = {
    'image' => {
        data_type => 'File',
        description => 'Contact avatar. Should be a PNG or JPG file not more than 10 MB.',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_contact_avatar' } = { 
    	summary => 'Upload an avatar',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub upload_contact_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'image' is set
    unless (exists $args{'image'}) {
      croak("Missing the required parameter 'image' when calling upload_contact_avatar");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling upload_contact_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/avatar';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'image'} ) {
        $form_params->{'image'} = [] unless defined $form_params->{'image'};
        push @{$form_params->{'image'}}, $args{'image'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# upload_list_avatar
#
# Add an avatar for a list
# 
# @param File $image List avatar. Should be a PNG or JPG file not more than 10 MB. (required)
# @param int $id  (required)
{
    my $params = {
    'image' => {
        data_type => 'File',
        description => 'List avatar. Should be a PNG or JPG file not more than 10 MB.',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_list_avatar' } = { 
    	summary => 'Add an avatar for a list',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub upload_list_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'image' is set
    unless (exists $args{'image'}) {
      croak("Missing the required parameter 'image' when calling upload_list_avatar");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling upload_list_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/avatar';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'image'} ) {
        $form_params->{'image'} = [] unless defined $form_params->{'image'};
        push @{$form_params->{'image'}}, $args{'image'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# upload_message_attachment
#
# Upload message attachment
# 
# @param File $file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats. (required)
{
    my $params = {
    'file' => {
        data_type => 'File',
        description => 'Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_message_attachment' } = { 
    	summary => 'Upload message attachment',
        params => $params,
        returns => 'UploadMessageAttachmentResponse',
        };
}
# @return UploadMessageAttachmentResponse
#
sub upload_message_attachment {
    my ($self, %args) = @_;

    # verify the required parameter 'file' is set
    unless (exists $args{'file'}) {
      croak("Missing the required parameter 'file' when calling upload_message_attachment");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages/attachment';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UploadMessageAttachmentResponse', $response);
    return $_response_object;
}

#
# upload_message_mms_attachment
#
# Upload message mms attachment
# 
# @param File $file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats. (required)
{
    my $params = {
    'file' => {
        data_type => 'File',
        description => 'Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_message_mms_attachment' } = { 
    	summary => 'Upload message mms attachment',
        params => $params,
        returns => 'UploadMessageAttachmentResponse',
        };
}
# @return UploadMessageAttachmentResponse
#
sub upload_message_mms_attachment {
    my ($self, %args) = @_;

    # verify the required parameter 'file' is set
    unless (exists $args{'file'}) {
      croak("Missing the required parameter 'file' when calling upload_message_mms_attachment");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages/mms/attachment';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UploadMessageAttachmentResponse', $response);
    return $_response_object;
}

1;
