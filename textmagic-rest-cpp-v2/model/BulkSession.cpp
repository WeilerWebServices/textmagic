/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BulkSession.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

BulkSession::BulkSession()
{
    m_Id = 0;
    m_Status = utility::conversions::to_string_t("");
    m_ItemsProcessed = 0;
    m_ItemsTotal = 0;
    m_CreatedAt = utility::datetime();
    m_Text = utility::conversions::to_string_t("");
}

BulkSession::~BulkSession()
{
}

void BulkSession::validate()
{
    // TODO: implement validation
}

web::json::value BulkSession::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("itemsProcessed")] = ModelBase::toJson(m_ItemsProcessed);
    val[utility::conversions::to_string_t("itemsTotal")] = ModelBase::toJson(m_ItemsTotal);
    val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    val[utility::conversions::to_string_t("session")] = ModelBase::toJson(m_Session);
    val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);

    return val;
}

void BulkSession::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("itemsProcessed")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("itemsProcessed")];
        if(!fieldValue.is_null())
        {
            setItemsProcessed(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("itemsTotal")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("itemsTotal")];
        if(!fieldValue.is_null())
        {
            setItemsTotal(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("createdAt")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("session")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("session")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MessageSession> newItem(new MessageSession());
            newItem->fromJson(fieldValue);
            setSession( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("text")];
        if(!fieldValue.is_null())
        {
            setText(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void BulkSession::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("itemsProcessed"), m_ItemsProcessed));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("itemsTotal"), m_ItemsTotal));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    m_Session->toMultipart(multipart, utility::conversions::to_string_t("session."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
}

void BulkSession::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setItemsProcessed(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("itemsProcessed"))));
    setItemsTotal(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("itemsTotal"))));
    setCreatedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt"))));
    std::shared_ptr<MessageSession> newSession(new MessageSession());
    newSession->fromMultiPart(multipart, utility::conversions::to_string_t("session."));
    setSession( newSession );
    setText(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("text"))));
}

int32_t BulkSession::getId() const
{
    return m_Id;
}


void BulkSession::setId(int32_t value)
{
    m_Id = value;
    
}
utility::string_t BulkSession::getStatus() const
{
    return m_Status;
}


void BulkSession::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
int32_t BulkSession::getItemsProcessed() const
{
    return m_ItemsProcessed;
}


void BulkSession::setItemsProcessed(int32_t value)
{
    m_ItemsProcessed = value;
    
}
int32_t BulkSession::getItemsTotal() const
{
    return m_ItemsTotal;
}


void BulkSession::setItemsTotal(int32_t value)
{
    m_ItemsTotal = value;
    
}
utility::datetime BulkSession::getCreatedAt() const
{
    return m_CreatedAt;
}


void BulkSession::setCreatedAt(utility::datetime value)
{
    m_CreatedAt = value;
    
}
std::shared_ptr<MessageSession> BulkSession::getSession() const
{
    return m_Session;
}


void BulkSession::setSession(std::shared_ptr<MessageSession> value)
{
    m_Session = value;
    
}
utility::string_t BulkSession::getText() const
{
    return m_Text;
}


void BulkSession::setText(utility::string_t value)
{
    m_Text = value;
    
}
}
}
}
}

