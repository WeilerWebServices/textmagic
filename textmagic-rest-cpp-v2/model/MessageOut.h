/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * MessageOut.h
 *
 * 
 */

#ifndef COM_TEXTMAGIC_CLIENT_MODEL_MessageOut_H_
#define COM_TEXTMAGIC_CLIENT_MODEL_MessageOut_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace textmagic {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  MessageOut
    : public ModelBase
{
public:
    MessageOut();
    virtual ~MessageOut();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MessageOut members

    /// <summary>
    /// Message ID.
    /// </summary>
    int32_t getId() const;
        void setId(int32_t value);
    /// <summary>
    /// Message sender (phone number or alphanumeric Sender ID).
    /// </summary>
    utility::string_t getSender() const;
    bool senderIsSet() const;
    void unsetSender();
    void setSender(utility::string_t value);
    /// <summary>
    /// Recipient&#x60;s phone number.
    /// </summary>
    utility::string_t getReceiver() const;
    bool receiverIsSet() const;
    void unsetReceiver();
    void setReceiver(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getText() const;
        void setText(utility::string_t value);
    /// <summary>
    /// Delivery status of the message. See [message delivery statuses](https://docs.textmagic.com/#section/Delivery-status-codes) for details. 
    /// </summary>
    utility::string_t getStatus() const;
        void setStatus(utility::string_t value);
    /// <summary>
    /// Recipient contact ID.
    /// </summary>
    int32_t getContactId() const;
        void setContactId(int32_t value);
    /// <summary>
    /// Message Session ID of a message.
    /// </summary>
    int32_t getSessionId() const;
        void setSessionId(int32_t value);
    /// <summary>
    /// Sending time.
    /// </summary>
    utility::datetime getMessageTime() const;
        void setMessageTime(utility::datetime value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAvatar() const;
        void setAvatar(utility::string_t value);
    /// <summary>
    /// Indicates that the message has been deleted.
    /// </summary>
    bool isDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();
    void setDeleted(bool value);
    /// <summary>
    /// Message charset. Could be: *   **ISO-8859-1** for plaintext SMS; *   **UTF-16BE** for Unicode SMS. 
    /// </summary>
    utility::string_t getCharset() const;
        void setCharset(utility::string_t value);
    /// <summary>
    /// Human-readable message charset label. Could be: *   **ISO-8859-1** for plaintext SMS; *   **UTF-16BE** for Unicode SMS; *   **Voice** for voice services (Text-to-Speech or Voice Broadcast) messages. 
    /// </summary>
    utility::string_t getCharsetLabel() const;
        void setCharsetLabel(utility::string_t value);
    /// <summary>
    /// Contact first name. Could be substituted from your [Contacts](https://docs.textmagic.com/#tag/Contacts) (even if you submitted the phone number instead of the contact ID). 
    /// </summary>
    utility::string_t getFirstName() const;
        void setFirstName(utility::string_t value);
    /// <summary>
    /// Contact last name.
    /// </summary>
    utility::string_t getLastName() const;
        void setLastName(utility::string_t value);
    /// <summary>
    /// The 2-letter ISO country code of the recipient&#39;s phone number. 
    /// </summary>
    utility::string_t getCountry() const;
        void setCountry(utility::string_t value);
    /// <summary>
    /// Receipent&#x60;s phone number.
    /// </summary>
    utility::string_t getPhone() const;
    bool phoneIsSet() const;
    void unsetPhone();
    void setPhone(utility::string_t value);
    /// <summary>
    /// Message price.
    /// </summary>
    float getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(float value);
    /// <summary>
    /// Message parts (multiples of 160 characters) count.
    /// </summary>
    int32_t getPartsCount() const;
        void setPartsCount(int32_t value);
    /// <summary>
    /// The user email which this message came from. For Email2SMS and Distribution Lists the messages, it is an original email address - in other cases, it is an account email address.
    /// </summary>
    utility::string_t getFromEmail() const;
    bool fromEmailIsSet() const;
    void unsetFromEmail();
    void setFromEmail(utility::string_t value);
    /// <summary>
    /// The Phone number used to send the SMS.
    /// </summary>
    utility::string_t getFromNumber() const;
    bool fromNumberIsSet() const;
    void unsetFromNumber();
    void setFromNumber(utility::string_t value);

protected:
    int32_t m_Id;
        utility::string_t m_Sender;
    bool m_SenderIsSet;
    utility::string_t m_Receiver;
    bool m_ReceiverIsSet;
    utility::string_t m_Text;
        utility::string_t m_Status;
        int32_t m_ContactId;
        int32_t m_SessionId;
        utility::datetime m_MessageTime;
        utility::string_t m_Avatar;
        bool m_Deleted;
    bool m_DeletedIsSet;
    utility::string_t m_Charset;
        utility::string_t m_CharsetLabel;
        utility::string_t m_FirstName;
        utility::string_t m_LastName;
        utility::string_t m_Country;
        utility::string_t m_Phone;
    bool m_PhoneIsSet;
    float m_Price;
    bool m_PriceIsSet;
    int32_t m_PartsCount;
        utility::string_t m_FromEmail;
    bool m_FromEmailIsSet;
    utility::string_t m_FromNumber;
    bool m_FromNumberIsSet;
};

}
}
}
}

#endif /* COM_TEXTMAGIC_CLIENT_MODEL_MessageOut_H_ */
