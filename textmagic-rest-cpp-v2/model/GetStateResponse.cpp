/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetStateResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetStateResponse::GetStateResponse()
{
    m_SystemCacheClear = 0;
    m_SystemExit = 0;
    m_SystemAlert = 0;
    m_SystemAccountStateChanged = 0;
    m_MessageDeleted = 0;
    m_MessageIncoming = 0;
    m_MessageIncomingDeleted = 0;
    m_MessageStateChanged = 0;
    m_MessageBulkEnd = 0;
    m_MessageWipeEnd = 0;
    m_MessageSent = 0;
    m_MessageSessionDeleted = 0;
    m_MessageCacheClear = 0;
    m_MessageIncomingCacheClear = 0;
    m_MessageScheduleAdded = 0;
    m_MessageScheduleStateChanged = 0;
    m_MessageScheduleDeleted = 0;
    m_MessageScheduleCacheClear = 0;
    m_MessageTemplateCacheClear = 0;
    m_CallFinished = 0;
    m_ChatCreated = 0;
    m_ChatMarkedAsRead = 0;
    m_ChatMuted = 0;
    m_ChatUnmuted = 0;
    m_ChatPinned = 0;
    m_ChatUnpinned = 0;
    m_ChatDeleted = 0;
    m_ChatClosed = 0;
    m_ChatReopened = 0;
    m_ChatCacheClear = 0;
    m_ContactAdded = 0;
    m_ContactDeleted = 0;
    m_ContactStateChanged = 0;
    m_ListAdded = 0;
    m_ListDeleted = 0;
    m_ListStateChanged = 0;
    m_ContactWipeEnd = 0;
    m_ContactImportEnd = 0;
    m_ContactCacheClear = 0;
    m_ListCacheClear = 0;
    m_CustomFieldsCacheClear = 0;
}

GetStateResponse::~GetStateResponse()
{
}

void GetStateResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetStateResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("systemCacheClear")] = ModelBase::toJson(m_SystemCacheClear);
    val[utility::conversions::to_string_t("systemExit")] = ModelBase::toJson(m_SystemExit);
    val[utility::conversions::to_string_t("systemAlert")] = ModelBase::toJson(m_SystemAlert);
    val[utility::conversions::to_string_t("systemAccountStateChanged")] = ModelBase::toJson(m_SystemAccountStateChanged);
    val[utility::conversions::to_string_t("messageDeleted")] = ModelBase::toJson(m_MessageDeleted);
    val[utility::conversions::to_string_t("messageIncoming")] = ModelBase::toJson(m_MessageIncoming);
    val[utility::conversions::to_string_t("messageIncomingDeleted")] = ModelBase::toJson(m_MessageIncomingDeleted);
    val[utility::conversions::to_string_t("messageStateChanged")] = ModelBase::toJson(m_MessageStateChanged);
    val[utility::conversions::to_string_t("messageBulkEnd")] = ModelBase::toJson(m_MessageBulkEnd);
    val[utility::conversions::to_string_t("messageWipeEnd")] = ModelBase::toJson(m_MessageWipeEnd);
    val[utility::conversions::to_string_t("messageSent")] = ModelBase::toJson(m_MessageSent);
    val[utility::conversions::to_string_t("messageSessionDeleted")] = ModelBase::toJson(m_MessageSessionDeleted);
    val[utility::conversions::to_string_t("messageCacheClear")] = ModelBase::toJson(m_MessageCacheClear);
    val[utility::conversions::to_string_t("messageIncomingCacheClear")] = ModelBase::toJson(m_MessageIncomingCacheClear);
    val[utility::conversions::to_string_t("messageScheduleAdded")] = ModelBase::toJson(m_MessageScheduleAdded);
    val[utility::conversions::to_string_t("messageScheduleStateChanged")] = ModelBase::toJson(m_MessageScheduleStateChanged);
    val[utility::conversions::to_string_t("messageScheduleDeleted")] = ModelBase::toJson(m_MessageScheduleDeleted);
    val[utility::conversions::to_string_t("messageScheduleCacheClear")] = ModelBase::toJson(m_MessageScheduleCacheClear);
    val[utility::conversions::to_string_t("messageTemplateCacheClear")] = ModelBase::toJson(m_MessageTemplateCacheClear);
    val[utility::conversions::to_string_t("callFinished")] = ModelBase::toJson(m_CallFinished);
    val[utility::conversions::to_string_t("chatCreated")] = ModelBase::toJson(m_ChatCreated);
    val[utility::conversions::to_string_t("chatMarkedAsRead")] = ModelBase::toJson(m_ChatMarkedAsRead);
    val[utility::conversions::to_string_t("chatMuted")] = ModelBase::toJson(m_ChatMuted);
    val[utility::conversions::to_string_t("chatUnmuted")] = ModelBase::toJson(m_ChatUnmuted);
    val[utility::conversions::to_string_t("chatPinned")] = ModelBase::toJson(m_ChatPinned);
    val[utility::conversions::to_string_t("chatUnpinned")] = ModelBase::toJson(m_ChatUnpinned);
    val[utility::conversions::to_string_t("chatDeleted")] = ModelBase::toJson(m_ChatDeleted);
    val[utility::conversions::to_string_t("chatClosed")] = ModelBase::toJson(m_ChatClosed);
    val[utility::conversions::to_string_t("chatReopened")] = ModelBase::toJson(m_ChatReopened);
    val[utility::conversions::to_string_t("chatCacheClear")] = ModelBase::toJson(m_ChatCacheClear);
    val[utility::conversions::to_string_t("contactAdded")] = ModelBase::toJson(m_ContactAdded);
    val[utility::conversions::to_string_t("contactDeleted")] = ModelBase::toJson(m_ContactDeleted);
    val[utility::conversions::to_string_t("contactStateChanged")] = ModelBase::toJson(m_ContactStateChanged);
    val[utility::conversions::to_string_t("listAdded")] = ModelBase::toJson(m_ListAdded);
    val[utility::conversions::to_string_t("listDeleted")] = ModelBase::toJson(m_ListDeleted);
    val[utility::conversions::to_string_t("listStateChanged")] = ModelBase::toJson(m_ListStateChanged);
    val[utility::conversions::to_string_t("contactWipeEnd")] = ModelBase::toJson(m_ContactWipeEnd);
    val[utility::conversions::to_string_t("contactImportEnd")] = ModelBase::toJson(m_ContactImportEnd);
    val[utility::conversions::to_string_t("contactCacheClear")] = ModelBase::toJson(m_ContactCacheClear);
    val[utility::conversions::to_string_t("listCacheClear")] = ModelBase::toJson(m_ListCacheClear);
    val[utility::conversions::to_string_t("customFieldsCacheClear")] = ModelBase::toJson(m_CustomFieldsCacheClear);

    return val;
}

void GetStateResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("systemCacheClear")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("systemCacheClear")];
        if(!fieldValue.is_null())
        {
            setSystemCacheClear(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("systemExit")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("systemExit")];
        if(!fieldValue.is_null())
        {
            setSystemExit(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("systemAlert")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("systemAlert")];
        if(!fieldValue.is_null())
        {
            setSystemAlert(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("systemAccountStateChanged")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("systemAccountStateChanged")];
        if(!fieldValue.is_null())
        {
            setSystemAccountStateChanged(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageDeleted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageDeleted")];
        if(!fieldValue.is_null())
        {
            setMessageDeleted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageIncoming")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageIncoming")];
        if(!fieldValue.is_null())
        {
            setMessageIncoming(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageIncomingDeleted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageIncomingDeleted")];
        if(!fieldValue.is_null())
        {
            setMessageIncomingDeleted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageStateChanged")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageStateChanged")];
        if(!fieldValue.is_null())
        {
            setMessageStateChanged(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageBulkEnd")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageBulkEnd")];
        if(!fieldValue.is_null())
        {
            setMessageBulkEnd(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageWipeEnd")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageWipeEnd")];
        if(!fieldValue.is_null())
        {
            setMessageWipeEnd(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageSent")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageSent")];
        if(!fieldValue.is_null())
        {
            setMessageSent(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageSessionDeleted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageSessionDeleted")];
        if(!fieldValue.is_null())
        {
            setMessageSessionDeleted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageCacheClear")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageCacheClear")];
        if(!fieldValue.is_null())
        {
            setMessageCacheClear(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageIncomingCacheClear")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageIncomingCacheClear")];
        if(!fieldValue.is_null())
        {
            setMessageIncomingCacheClear(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageScheduleAdded")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageScheduleAdded")];
        if(!fieldValue.is_null())
        {
            setMessageScheduleAdded(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageScheduleStateChanged")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageScheduleStateChanged")];
        if(!fieldValue.is_null())
        {
            setMessageScheduleStateChanged(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageScheduleDeleted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageScheduleDeleted")];
        if(!fieldValue.is_null())
        {
            setMessageScheduleDeleted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageScheduleCacheClear")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageScheduleCacheClear")];
        if(!fieldValue.is_null())
        {
            setMessageScheduleCacheClear(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageTemplateCacheClear")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageTemplateCacheClear")];
        if(!fieldValue.is_null())
        {
            setMessageTemplateCacheClear(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("callFinished")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("callFinished")];
        if(!fieldValue.is_null())
        {
            setCallFinished(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatCreated")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatCreated")];
        if(!fieldValue.is_null())
        {
            setChatCreated(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatMarkedAsRead")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatMarkedAsRead")];
        if(!fieldValue.is_null())
        {
            setChatMarkedAsRead(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatMuted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatMuted")];
        if(!fieldValue.is_null())
        {
            setChatMuted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatUnmuted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatUnmuted")];
        if(!fieldValue.is_null())
        {
            setChatUnmuted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatPinned")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatPinned")];
        if(!fieldValue.is_null())
        {
            setChatPinned(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatUnpinned")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatUnpinned")];
        if(!fieldValue.is_null())
        {
            setChatUnpinned(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatDeleted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatDeleted")];
        if(!fieldValue.is_null())
        {
            setChatDeleted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatClosed")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatClosed")];
        if(!fieldValue.is_null())
        {
            setChatClosed(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatReopened")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatReopened")];
        if(!fieldValue.is_null())
        {
            setChatReopened(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chatCacheClear")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("chatCacheClear")];
        if(!fieldValue.is_null())
        {
            setChatCacheClear(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contactAdded")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contactAdded")];
        if(!fieldValue.is_null())
        {
            setContactAdded(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contactDeleted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contactDeleted")];
        if(!fieldValue.is_null())
        {
            setContactDeleted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contactStateChanged")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contactStateChanged")];
        if(!fieldValue.is_null())
        {
            setContactStateChanged(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("listAdded")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("listAdded")];
        if(!fieldValue.is_null())
        {
            setListAdded(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("listDeleted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("listDeleted")];
        if(!fieldValue.is_null())
        {
            setListDeleted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("listStateChanged")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("listStateChanged")];
        if(!fieldValue.is_null())
        {
            setListStateChanged(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contactWipeEnd")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contactWipeEnd")];
        if(!fieldValue.is_null())
        {
            setContactWipeEnd(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contactImportEnd")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contactImportEnd")];
        if(!fieldValue.is_null())
        {
            setContactImportEnd(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contactCacheClear")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contactCacheClear")];
        if(!fieldValue.is_null())
        {
            setContactCacheClear(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("listCacheClear")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("listCacheClear")];
        if(!fieldValue.is_null())
        {
            setListCacheClear(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customFieldsCacheClear")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("customFieldsCacheClear")];
        if(!fieldValue.is_null())
        {
            setCustomFieldsCacheClear(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void GetStateResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("systemCacheClear"), m_SystemCacheClear));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("systemExit"), m_SystemExit));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("systemAlert"), m_SystemAlert));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("systemAccountStateChanged"), m_SystemAccountStateChanged));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageDeleted"), m_MessageDeleted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageIncoming"), m_MessageIncoming));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageIncomingDeleted"), m_MessageIncomingDeleted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageStateChanged"), m_MessageStateChanged));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageBulkEnd"), m_MessageBulkEnd));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageWipeEnd"), m_MessageWipeEnd));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageSent"), m_MessageSent));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageSessionDeleted"), m_MessageSessionDeleted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageCacheClear"), m_MessageCacheClear));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageIncomingCacheClear"), m_MessageIncomingCacheClear));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageScheduleAdded"), m_MessageScheduleAdded));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageScheduleStateChanged"), m_MessageScheduleStateChanged));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageScheduleDeleted"), m_MessageScheduleDeleted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageScheduleCacheClear"), m_MessageScheduleCacheClear));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageTemplateCacheClear"), m_MessageTemplateCacheClear));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("callFinished"), m_CallFinished));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatCreated"), m_ChatCreated));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatMarkedAsRead"), m_ChatMarkedAsRead));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatMuted"), m_ChatMuted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatUnmuted"), m_ChatUnmuted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatPinned"), m_ChatPinned));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatUnpinned"), m_ChatUnpinned));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatDeleted"), m_ChatDeleted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatClosed"), m_ChatClosed));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatReopened"), m_ChatReopened));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chatCacheClear"), m_ChatCacheClear));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contactAdded"), m_ContactAdded));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contactDeleted"), m_ContactDeleted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contactStateChanged"), m_ContactStateChanged));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("listAdded"), m_ListAdded));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("listDeleted"), m_ListDeleted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("listStateChanged"), m_ListStateChanged));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contactWipeEnd"), m_ContactWipeEnd));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contactImportEnd"), m_ContactImportEnd));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contactCacheClear"), m_ContactCacheClear));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("listCacheClear"), m_ListCacheClear));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customFieldsCacheClear"), m_CustomFieldsCacheClear));
}

void GetStateResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setSystemCacheClear(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("systemCacheClear"))));
    setSystemExit(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("systemExit"))));
    setSystemAlert(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("systemAlert"))));
    setSystemAccountStateChanged(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("systemAccountStateChanged"))));
    setMessageDeleted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageDeleted"))));
    setMessageIncoming(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageIncoming"))));
    setMessageIncomingDeleted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageIncomingDeleted"))));
    setMessageStateChanged(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageStateChanged"))));
    setMessageBulkEnd(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageBulkEnd"))));
    setMessageWipeEnd(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageWipeEnd"))));
    setMessageSent(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageSent"))));
    setMessageSessionDeleted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageSessionDeleted"))));
    setMessageCacheClear(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageCacheClear"))));
    setMessageIncomingCacheClear(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageIncomingCacheClear"))));
    setMessageScheduleAdded(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageScheduleAdded"))));
    setMessageScheduleStateChanged(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageScheduleStateChanged"))));
    setMessageScheduleDeleted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageScheduleDeleted"))));
    setMessageScheduleCacheClear(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageScheduleCacheClear"))));
    setMessageTemplateCacheClear(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageTemplateCacheClear"))));
    setCallFinished(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("callFinished"))));
    setChatCreated(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatCreated"))));
    setChatMarkedAsRead(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatMarkedAsRead"))));
    setChatMuted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatMuted"))));
    setChatUnmuted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatUnmuted"))));
    setChatPinned(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatPinned"))));
    setChatUnpinned(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatUnpinned"))));
    setChatDeleted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatDeleted"))));
    setChatClosed(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatClosed"))));
    setChatReopened(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatReopened"))));
    setChatCacheClear(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chatCacheClear"))));
    setContactAdded(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contactAdded"))));
    setContactDeleted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contactDeleted"))));
    setContactStateChanged(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contactStateChanged"))));
    setListAdded(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("listAdded"))));
    setListDeleted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("listDeleted"))));
    setListStateChanged(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("listStateChanged"))));
    setContactWipeEnd(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contactWipeEnd"))));
    setContactImportEnd(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contactImportEnd"))));
    setContactCacheClear(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contactCacheClear"))));
    setListCacheClear(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("listCacheClear"))));
    setCustomFieldsCacheClear(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("customFieldsCacheClear"))));
}

int32_t GetStateResponse::getSystemCacheClear() const
{
    return m_SystemCacheClear;
}


void GetStateResponse::setSystemCacheClear(int32_t value)
{
    m_SystemCacheClear = value;
    
}
int32_t GetStateResponse::getSystemExit() const
{
    return m_SystemExit;
}


void GetStateResponse::setSystemExit(int32_t value)
{
    m_SystemExit = value;
    
}
int32_t GetStateResponse::getSystemAlert() const
{
    return m_SystemAlert;
}


void GetStateResponse::setSystemAlert(int32_t value)
{
    m_SystemAlert = value;
    
}
int32_t GetStateResponse::getSystemAccountStateChanged() const
{
    return m_SystemAccountStateChanged;
}


void GetStateResponse::setSystemAccountStateChanged(int32_t value)
{
    m_SystemAccountStateChanged = value;
    
}
int32_t GetStateResponse::getMessageDeleted() const
{
    return m_MessageDeleted;
}


void GetStateResponse::setMessageDeleted(int32_t value)
{
    m_MessageDeleted = value;
    
}
int32_t GetStateResponse::getMessageIncoming() const
{
    return m_MessageIncoming;
}


void GetStateResponse::setMessageIncoming(int32_t value)
{
    m_MessageIncoming = value;
    
}
int32_t GetStateResponse::getMessageIncomingDeleted() const
{
    return m_MessageIncomingDeleted;
}


void GetStateResponse::setMessageIncomingDeleted(int32_t value)
{
    m_MessageIncomingDeleted = value;
    
}
int32_t GetStateResponse::getMessageStateChanged() const
{
    return m_MessageStateChanged;
}


void GetStateResponse::setMessageStateChanged(int32_t value)
{
    m_MessageStateChanged = value;
    
}
int32_t GetStateResponse::getMessageBulkEnd() const
{
    return m_MessageBulkEnd;
}


void GetStateResponse::setMessageBulkEnd(int32_t value)
{
    m_MessageBulkEnd = value;
    
}
int32_t GetStateResponse::getMessageWipeEnd() const
{
    return m_MessageWipeEnd;
}


void GetStateResponse::setMessageWipeEnd(int32_t value)
{
    m_MessageWipeEnd = value;
    
}
int32_t GetStateResponse::getMessageSent() const
{
    return m_MessageSent;
}


void GetStateResponse::setMessageSent(int32_t value)
{
    m_MessageSent = value;
    
}
int32_t GetStateResponse::getMessageSessionDeleted() const
{
    return m_MessageSessionDeleted;
}


void GetStateResponse::setMessageSessionDeleted(int32_t value)
{
    m_MessageSessionDeleted = value;
    
}
int32_t GetStateResponse::getMessageCacheClear() const
{
    return m_MessageCacheClear;
}


void GetStateResponse::setMessageCacheClear(int32_t value)
{
    m_MessageCacheClear = value;
    
}
int32_t GetStateResponse::getMessageIncomingCacheClear() const
{
    return m_MessageIncomingCacheClear;
}


void GetStateResponse::setMessageIncomingCacheClear(int32_t value)
{
    m_MessageIncomingCacheClear = value;
    
}
int32_t GetStateResponse::getMessageScheduleAdded() const
{
    return m_MessageScheduleAdded;
}


void GetStateResponse::setMessageScheduleAdded(int32_t value)
{
    m_MessageScheduleAdded = value;
    
}
int32_t GetStateResponse::getMessageScheduleStateChanged() const
{
    return m_MessageScheduleStateChanged;
}


void GetStateResponse::setMessageScheduleStateChanged(int32_t value)
{
    m_MessageScheduleStateChanged = value;
    
}
int32_t GetStateResponse::getMessageScheduleDeleted() const
{
    return m_MessageScheduleDeleted;
}


void GetStateResponse::setMessageScheduleDeleted(int32_t value)
{
    m_MessageScheduleDeleted = value;
    
}
int32_t GetStateResponse::getMessageScheduleCacheClear() const
{
    return m_MessageScheduleCacheClear;
}


void GetStateResponse::setMessageScheduleCacheClear(int32_t value)
{
    m_MessageScheduleCacheClear = value;
    
}
int32_t GetStateResponse::getMessageTemplateCacheClear() const
{
    return m_MessageTemplateCacheClear;
}


void GetStateResponse::setMessageTemplateCacheClear(int32_t value)
{
    m_MessageTemplateCacheClear = value;
    
}
int32_t GetStateResponse::getCallFinished() const
{
    return m_CallFinished;
}


void GetStateResponse::setCallFinished(int32_t value)
{
    m_CallFinished = value;
    
}
int32_t GetStateResponse::getChatCreated() const
{
    return m_ChatCreated;
}


void GetStateResponse::setChatCreated(int32_t value)
{
    m_ChatCreated = value;
    
}
int32_t GetStateResponse::getChatMarkedAsRead() const
{
    return m_ChatMarkedAsRead;
}


void GetStateResponse::setChatMarkedAsRead(int32_t value)
{
    m_ChatMarkedAsRead = value;
    
}
int32_t GetStateResponse::getChatMuted() const
{
    return m_ChatMuted;
}


void GetStateResponse::setChatMuted(int32_t value)
{
    m_ChatMuted = value;
    
}
int32_t GetStateResponse::getChatUnmuted() const
{
    return m_ChatUnmuted;
}


void GetStateResponse::setChatUnmuted(int32_t value)
{
    m_ChatUnmuted = value;
    
}
int32_t GetStateResponse::getChatPinned() const
{
    return m_ChatPinned;
}


void GetStateResponse::setChatPinned(int32_t value)
{
    m_ChatPinned = value;
    
}
int32_t GetStateResponse::getChatUnpinned() const
{
    return m_ChatUnpinned;
}


void GetStateResponse::setChatUnpinned(int32_t value)
{
    m_ChatUnpinned = value;
    
}
int32_t GetStateResponse::getChatDeleted() const
{
    return m_ChatDeleted;
}


void GetStateResponse::setChatDeleted(int32_t value)
{
    m_ChatDeleted = value;
    
}
int32_t GetStateResponse::getChatClosed() const
{
    return m_ChatClosed;
}


void GetStateResponse::setChatClosed(int32_t value)
{
    m_ChatClosed = value;
    
}
int32_t GetStateResponse::getChatReopened() const
{
    return m_ChatReopened;
}


void GetStateResponse::setChatReopened(int32_t value)
{
    m_ChatReopened = value;
    
}
int32_t GetStateResponse::getChatCacheClear() const
{
    return m_ChatCacheClear;
}


void GetStateResponse::setChatCacheClear(int32_t value)
{
    m_ChatCacheClear = value;
    
}
int32_t GetStateResponse::getContactAdded() const
{
    return m_ContactAdded;
}


void GetStateResponse::setContactAdded(int32_t value)
{
    m_ContactAdded = value;
    
}
int32_t GetStateResponse::getContactDeleted() const
{
    return m_ContactDeleted;
}


void GetStateResponse::setContactDeleted(int32_t value)
{
    m_ContactDeleted = value;
    
}
int32_t GetStateResponse::getContactStateChanged() const
{
    return m_ContactStateChanged;
}


void GetStateResponse::setContactStateChanged(int32_t value)
{
    m_ContactStateChanged = value;
    
}
int32_t GetStateResponse::getListAdded() const
{
    return m_ListAdded;
}


void GetStateResponse::setListAdded(int32_t value)
{
    m_ListAdded = value;
    
}
int32_t GetStateResponse::getListDeleted() const
{
    return m_ListDeleted;
}


void GetStateResponse::setListDeleted(int32_t value)
{
    m_ListDeleted = value;
    
}
int32_t GetStateResponse::getListStateChanged() const
{
    return m_ListStateChanged;
}


void GetStateResponse::setListStateChanged(int32_t value)
{
    m_ListStateChanged = value;
    
}
int32_t GetStateResponse::getContactWipeEnd() const
{
    return m_ContactWipeEnd;
}


void GetStateResponse::setContactWipeEnd(int32_t value)
{
    m_ContactWipeEnd = value;
    
}
int32_t GetStateResponse::getContactImportEnd() const
{
    return m_ContactImportEnd;
}


void GetStateResponse::setContactImportEnd(int32_t value)
{
    m_ContactImportEnd = value;
    
}
int32_t GetStateResponse::getContactCacheClear() const
{
    return m_ContactCacheClear;
}


void GetStateResponse::setContactCacheClear(int32_t value)
{
    m_ContactCacheClear = value;
    
}
int32_t GetStateResponse::getListCacheClear() const
{
    return m_ListCacheClear;
}


void GetStateResponse::setListCacheClear(int32_t value)
{
    m_ListCacheClear = value;
    
}
int32_t GetStateResponse::getCustomFieldsCacheClear() const
{
    return m_CustomFieldsCacheClear;
}


void GetStateResponse::setCustomFieldsCacheClear(int32_t value)
{
    m_CustomFieldsCacheClear = value;
    
}
}
}
}
}

