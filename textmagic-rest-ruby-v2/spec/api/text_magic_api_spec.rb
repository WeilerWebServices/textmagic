=begin
#TextMagic API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'spec_helper'
require 'json'

# Unit tests for TextMagic::TextMagicApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TextMagicApi' do
  before do
    # run before each test
    @instance = TextMagic::TextMagicApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TextMagicApi' do
    it 'should create an instance of TextMagicApi' do
      expect(@instance).to be_instance_of(TextMagic::TextMagicApi)
    end
  end

  # unit tests for assign_contacts_to_list
  # Assign contacts to a list
  # &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
  # @param assign_contacts_to_list_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'assign_contacts_to_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for block_contact
  # Block a contact by phone number
  # Block a contact from inbound and outbound communication by phone number.
  # @param block_contact_input_object 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'block_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for buy_dedicated_number
  # Buy a dedicated number
  # To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
  # @param buy_dedicated_number_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'buy_dedicated_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cancel_verification
  # Cancel verification process
  # You can cancel the verification not earlier than 30 seconds after the initial request.
  # @param verify_id The verifyId that you received in Step 1.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'cancel_verification test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for check_phone_verification_code_tfa
  # Step 2: Check the verification code 
  # Check received code from user with the code which was actually sent.
  # @param check_phone_verification_code_tfa_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'check_phone_verification_code_tfa test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clear_and_assign_contacts_to_list
  # Reset list members to the specified contacts
  # 
  # @param clear_and_assign_contacts_to_list_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'clear_and_assign_contacts_to_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for close_chats_bulk
  # Close chats (bulk)
  # Close chats by chat IDs or close all chats
  # @param close_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'close_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for close_read_chats
  # Close read chats
  # Close all chats that have no unread messages.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'close_read_chats test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for close_subaccount
  # Close sub-account
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'close_subaccount test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact
  # Add a new contact
  # 
  # @param create_contact_input_object 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'create_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact_note
  # Create a new contact note
  # 
  # @param create_contact_note_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'create_contact_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_custom_field
  # Add a new custom field
  # 
  # @param create_custom_field_input_object 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'create_custom_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_list
  # Create a new list
  # 
  # @param create_list_input_object 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'create_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_template
  # Create a template
  # There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
  # @param create_template_input_object 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'create_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_all_contacts
  # Delete contacts (bulk)
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_all_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_all_outbound_messages
  # Delete all messages
  # Delete all messages.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_all_outbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_avatar
  # Delete an avatar
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_chat_messages
  # Delete chat messages by ID(s)
  # Delete messages from chat by given message IDs.
  # @param delete_chat_messages_bulk_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_chat_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_chats_bulk
  # Delete chats (bulk)
  # Delete chats by given IDs or delete all chats.
  # @param delete_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact
  # Delete a contact
  # &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact_avatar
  # Delete an avatar
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact_note
  # Delete a contact note
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact_notes_bulk
  # Delete contact notes (bulk)
  # 
  # @param id 
  # @param delete_contact_notes_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact_notes_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contacts_by_ids
  # Delete contacts by IDs (bulk)
  # 
  # @param delete_contacts_by_ids_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contacts_by_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contacts_from_list
  # Unassign contacts from a list
  # &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
  # @param delete_contacs_from_list_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contacts_from_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_custom_field
  # Delete a custom field
  # &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_custom_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_dedicated_number
  # Cancel a dedicated number subscription
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_dedicated_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_inbound_message
  # Delete a single inbound message
  # &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
  # @param id The unique numeric ID for the inbound message.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_inbound_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_inbound_messages_bulk
  # Delete inbound messages (bulk)
  # &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
  # @param delete_inbound_messages_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_inbound_messages_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_list
  # Delete a list
  # This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_list_avatar
  # Delete an avatar for a list
  # Delete an avatar for a list
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_list_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_list_contacts_bulk
  # Delete contacts from a list (bulk)
  # Delete contacts from a list (bulk)
  # @param delete_list_contacts_bulk_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_list_contacts_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_lists_bulk
  # Delete lists (bulk)
  # 
  # @param delete_lists_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_lists_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_message_session
  # Delete a session
  # Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_message_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_message_sessions_bulk
  # Delete sessions (bulk)
  # Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
  # @param delete_message_sessions_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_message_sessions_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_outbound_message
  # Delete message
  # Delete a single message.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_outbound_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_outbound_messages_bulk
  # Delete messages (bulk)
  # Delete outbound messages by the given ID(s) or delete all outbound messages.
  # @param delete_outbound_messages_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_outbound_messages_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_scheduled_message
  # Delete a single scheduled message
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_scheduled_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_scheduled_messages_bulk
  # Delete scheduled messages (bulk)
  # 
  # @param delete_scheduled_messages_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_scheduled_messages_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_sender_id
  # Delete a Sender ID
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_sender_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_template
  # Delete a template
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_templates_bulk
  # Delete templates (bulk)
  # Delete templates by given IDs or delete all templates.
  # @param delete_templates_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_templates_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for do_carrier_lookup
  # Carrier Lookup
  # This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
  # @param phone Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :country This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**. 
  # @return [DoCarrierLookupResponse]
  describe 'do_carrier_lookup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for do_email_lookup
  # Email Lookup
  # To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
  # @param email Email address.
  # @param [Hash] opts the optional parameters
  # @return [DoEmailLookupResponse]
  describe 'do_email_lookup test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_bulk_sessions
  # Get all bulk sessions
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetAllBulkSessionsPaginatedResponse]
  describe 'get_all_bulk_sessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_chats
  # Get all chats
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status Fetch only (a)ctive, (c)losed or (d)eleted chats.
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [Integer] :voice Fetch results with voice calls.
  # @option opts [Integer] :flat Should additional contact info be included?
  # @return [GetAllChatsPaginatedResponse]
  describe 'get_all_chats test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_inbound_messages
  # Get all inbound messages
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @return [GetAllInboundMessagesPaginatedResponse]
  describe 'get_all_inbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_message_sessions
  # Get all sessions
  # Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetAllMessageSessionsPaginatedResponse]
  describe 'get_all_message_sessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_outbound_messages
  # Get all messages
  # Get all user oubound messages.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified.
  # @return [GetAllOutboundMessagesPaginatedResponse]
  describe 'get_all_outbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_scheduled_messages
  # Get all scheduled messages
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :status Fetch schedules with a specific status: a - actual, c - completed, x - all.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @return [GetAllScheduledMessagesPaginatedResponse]
  describe 'get_all_scheduled_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_templates
  # Get all templates
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetAllTemplatesPaginatedResponse]
  describe 'get_all_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_dedicated_numbers
  # Find dedicated numbers available for purchase
  # 
  # @param country The 2-letter dedicated number country ISO code.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :prefix Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country.
  # @option opts [Integer] :tollfree Should we show only tollfree numbers (tollfree available only for US).
  # @return [GetAvailableDedicatedNumbersResponse]
  describe 'get_available_dedicated_numbers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_sender_setting_options
  # Get available sender settings
  # Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :country The 2-letter ISO country ID. If not specified, it returns all the available sender settings.
  # @return [GetAvailableSenderSettingOptionsResponse]
  describe 'get_available_sender_setting_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_balance_notification_options
  # Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
  # 
  # @param [Hash] opts the optional parameters
  # @return [GetBalanceNotificationOptionsResponse]
  describe 'get_balance_notification_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_balance_notification_settings
  # Get balance notification settings
  # 
  # @param [Hash] opts the optional parameters
  # @return [GetBalanceNotificationSettingsResponse]
  describe 'get_balance_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_blocked_contacts
  # Get blocked contacts
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :query Find blocked contacts by specified search query.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @return [GetBlockedContactsPaginatedResponse]
  describe 'get_blocked_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bulk_session
  # Get bulk session status
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [BulkSession]
  describe 'get_bulk_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_callback_settings
  # Fetch callback URL settings
  # 
  # @param [Hash] opts the optional parameters
  # @return [GetCallbackSettingsResponse]
  describe 'get_callback_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_chat
  # Get a single chat
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Chat]
  describe 'get_chat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_chat_by_phone
  # Find chats by phone
  # 
  # @param phone 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :upsert Create a new chat if not found.
  # @option opts [Integer] :reopen Reopen chat if found or do not change status.
  # @return [Chat]
  describe 'get_chat_by_phone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_chat_messages
  # Get chat messages
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :query Find messages by specified search query.
  # @option opts [String] :start Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified.
  # @option opts [String] :_end Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified.
  # @option opts [String] :direction Order direction. Default is desc.
  # @option opts [Integer] :voice Fetch results with voice calls.
  # @return [GetChatMessagesPaginatedResponse]
  describe 'get_chat_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact
  # Get the details of a specific contact
  # 
  # @param id Contact ID.
  # @param [Hash] opts the optional parameters
  # @return [Contact]
  describe 'get_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_by_phone
  # Get the details of a specific contact by phone number
  # 
  # @param phone 
  # @param [Hash] opts the optional parameters
  # @return [Contact]
  describe 'get_contact_by_phone test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_if_blocked
  # Check if a phone number is blocked
  # 
  # @param phone Phone number to check.
  # @param [Hash] opts the optional parameters
  # @return [Contact]
  describe 'get_contact_if_blocked test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_import_session_progress
  # Check import progress
  # Get contact import session progress.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [GetContactImportSessionProgressResponse]
  describe 'get_contact_import_session_progress test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_note
  # Get a contact note
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ContactNote]
  describe 'get_contact_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_notes
  # Fetch notes assigned to a given contact
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetContactNotesPaginatedResponse]
  describe 'get_contact_notes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contacts
  # Get all contacts
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :shared Should shared contacts be included?
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @return [GetContactsPaginatedResponse]
  describe 'get_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contacts_autocomplete
  # Get contacts autocomplete suggestions
  # Get contacts autocomplete suggestions by given search terms.
  # @param query Find recipients by specified search query.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :lists Should lists be returned or not?
  # @return [GetContactsAutocompleteResponse]
  describe 'get_contacts_autocomplete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contacts_by_list_id
  # Get all contacts in a list
  # A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
  # @param id Given group ID.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @return [GetContactsByListIdPaginatedResponse]
  describe 'get_contacts_by_list_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_countries
  # Get countries
  # 
  # @param [Hash] opts the optional parameters
  # @return [GetCountriesResponse]
  describe 'get_countries test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_current_user
  # Get current account information
  # 
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_current_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_custom_field
  # Get the details of a specific custom field
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [UserCustomField]
  describe 'get_custom_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_custom_fields
  # Get all custom fields
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetCustomFieldsPaginatedResponse]
  describe 'get_custom_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dedicated_number
  # Get the details of a specific dedicated number
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [UsersInbound]
  describe 'get_dedicated_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_favorites
  # Get favorite contacts and lists
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :query Find contacts or lists by specified search query.
  # @return [GetFavoritesPaginatedResponse]
  describe 'get_favorites test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inbound_message
  # Get a single inbound message
  # 
  # @param id The unique numeric ID for the inbound message.
  # @param [Hash] opts the optional parameters
  # @return [MessageIn]
  describe 'get_inbound_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inbound_messages_notification_settings
  # Get inbound messages notification settings
  # 
  # @param [Hash] opts the optional parameters
  # @return [GetInboundMessagesNotificationSettingsResponse]
  describe 'get_inbound_messages_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoices
  # Get all invoices
  # With the TextMagic API, you can check the invoices and transactions for your account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetInvoicesPaginatedResponse]
  describe 'get_invoices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_list
  # Get the details of a specific list
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Array]
  describe 'get_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_list_contacts_ids
  # Get all contact IDs in a list
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [GetListContactsIdsResponse]
  describe 'get_list_contacts_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_lists
  # Get all lists
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page The current fetched page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @option opts [Integer] :favorite_only Return only favorited lists.
  # @option opts [Integer] :only_mine Return only current user lists.
  # @return [GetListsPaginatedResponse]
  describe 'get_lists test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_lists_of_contact
  # Get a contact&#39;s lists
  # Get all the lists in which a contact is included.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetListsOfContactPaginatedResponse]
  describe 'get_lists_of_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_preview
  # Preview message
  # Get a messages preview (with tags merged) of up to 100 messages per session.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :text Message text. Required if **template_id** is not set.
  # @option opts [Integer] :template_id Template used instead of message text. Required if **text** is not set.
  # @option opts [Integer] :sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now.
  # @option opts [String] :sending_date_time Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone.
  # @option opts [String] :sending_timezone The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone.
  # @option opts [String] :contacts Comma-separated array of contact resources id message will be sent to.
  # @option opts [String] :lists Comma-separated array of list resources id message will be sent to.
  # @option opts [String] :phones Comma-separated array of E.164 phone numbers message will be sent to.
  # @option opts [Integer] :cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead.
  # @option opts [Integer] :parts_count Maximum message parts count (TextMagic allows sending of 1 to 6 message parts).
  # @option opts [Integer] :reference_id Custom message reference id which can be used in your application infrastructure.
  # @option opts [String] :from One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs).
  # @option opts [String] :rule An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details.
  # @option opts [Integer] :create_chat Should the sending method try to create new Chat(if not exist) with specified recipients?
  # @option opts [Integer] :tts Send Text-to-Speech message.
  # @option opts [Integer] :local Treat phone numbers passed in the \\&#39;phones\\&#39; field as local.
  # @option opts [String] :local_country The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country.
  # @return [GetMessagePreviewResponse]
  describe 'get_message_preview test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_price
  # Check message price
  # Check pricing for a new outbound message.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :include_blocked Should we show the pricing for blocked contacts?
  # @option opts [String] :text Message text. Required if the **template_id** is not set.
  # @option opts [Integer] :template_id Template used instead of message text. Required if the **text** is not set.
  # @option opts [Integer] :sending_time DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now.
  # @option opts [String] :sending_date_time Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone.
  # @option opts [String] :sending_timezone The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone.
  # @option opts [String] :contacts Comma-separated array of contact resources id message will be sent to.
  # @option opts [String] :lists Comma-separated array of list resources id message will be sent to.
  # @option opts [String] :phones Comma-separated array of E.164 phone numbers message will be sent to.
  # @option opts [Integer] :cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead.
  # @option opts [Integer] :parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts).
  # @option opts [Integer] :reference_id Custom message reference id which can be used in your application infrastructure.
  # @option opts [String] :from One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs).
  # @option opts [String] :rule An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details.
  # @option opts [Integer] :create_chat Should the sending method try to create new Chat (if not exist) with specified recipients?
  # @option opts [Integer] :tts Send a Text-to-Speech message.
  # @option opts [Integer] :local Treat phone numbers passed in the \\&#39;phones\\&#39; field as local.
  # @option opts [String] :local_country The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country.
  # @return [GetMessagePriceResponse]
  describe 'get_message_price test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_session
  # Get a session&#x60;s details
  # Get a specific session’s details.
  # @param id Session ID.
  # @param [Hash] opts the optional parameters
  # @return [MessageSession]
  describe 'get_message_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_session_stat
  # Get a session&#x60;s statistics
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :include_deleted Search also in deleted messages.
  # @return [GetMessageSessionStatResponse]
  describe 'get_message_session_stat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_messages_by_session_id
  # Get a session&#x60;s messages
  # A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :statuses Find messages by status.
  # @option opts [Integer] :include_deleted Search also in deleted messages.
  # @return [GetMessagesBySessionIdPaginatedResponse]
  describe 'get_messages_by_session_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_messaging_counters
  # Get sent/received messages counters values
  # Get total contacts, sent messages and received messages counters values.
  # @param [Hash] opts the optional parameters
  # @return [GetMessagingCountersResponse]
  describe 'get_messaging_counters test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_messaging_stat
  # Get messaging statistics
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :by *   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year. 
  # @option opts [Integer] :start Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior. 
  # @option opts [Integer] :_end Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today. 
  # @return [GetMessagingStatResponse]
  describe 'get_messaging_stat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_outbound_message
  # Get a single message
  # Get a single outgoing message.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [MessageOut]
  describe 'get_outbound_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_outbound_messages_history
  # Get history
  # Get the outbound messages history.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID.
  # @option opts [String] :query Find message by specified search query.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @return [GetOutboundMessagesHistoryPaginatedResponse]
  describe 'get_outbound_messages_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_scheduled_message
  # Get a single scheduled message
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [MessagesIcs]
  describe 'get_scheduled_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sender_id
  # Get the details of a specific Sender ID
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [SenderId]
  describe 'get_sender_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sender_ids
  # Get all your approved Sender IDs
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetSenderIdsPaginatedResponse]
  describe 'get_sender_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sender_settings
  # Get current sender settings
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :country Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters.
  # @return [GetSenderSettingsResponse]
  describe 'get_sender_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_spending_stat
  # Get spending statistics
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :start Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior. 
  # @option opts [String] :_end Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today. 
  # @return [GetSpendingStatPaginatedResponse]
  describe 'get_spending_stat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subaccount
  # Get sub-account information
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_subaccount test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subaccounts
  # Get a sub-accounts list
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [User]
  describe 'get_subaccounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subaccounts_with_tokens
  # Get all sub-accounts with their REST API tokens associated with a specified app name
  # Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
  # @param get_subaccounts_with_tokens_input_object 
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetSubaccountsWithTokensResponse]
  describe 'get_subaccounts_with_tokens test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_template
  # Get a template&#x60;s details
  # Get a single template.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [MessageTemplate]
  describe 'get_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_timezones
  # Get timezones
  # Return all available timezone IDs
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :full Return full info about timezones in array (0 or 1). Default is 0.
  # @return [GetTimezonesResponse]
  describe 'get_timezones test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_unread_messages_total
  # Get unread messages number
  # Get the total amount of unread messages in the current user chats.
  # @param [Hash] opts the optional parameters
  # @return [GetUnreadMessagesTotalResponse]
  describe 'get_unread_messages_total test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_unsubscribed_contact
  # Get the details of a specific unsubscribed contact
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [UnsubscribedContact]
  describe 'get_unsubscribed_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_unsubscribers
  # Get all unsubscribed contacts
  # When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @return [GetUnsubscribersPaginatedResponse]
  describe 'get_unsubscribers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_dedicated_numbers
  # Get all your dedicated numbers
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :survey_id Fetch only those numbers that are ready for the survey.
  # @return [GetUserDedicatedNumbersPaginatedResponse]
  describe 'get_user_dedicated_numbers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_contacts
  # Import contacts
  # Import contacts from the CSV, XLS or XLSX file.
  # @param file File containing contacts in csv or xls(x) formats.
  # @param column Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :list_id List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified. 
  # @option opts [String] :list_name List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified. 
  # @return [ResourceLinkResponse]
  describe 'import_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invite_subaccount
  # Invite a new sub-account
  # 
  # @param invite_subaccount_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'invite_subaccount test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mark_chats_read_bulk
  # Mark chats as read (bulk)
  # Mark several chats as read by chat IDs or mark all chats as read
  # @param mark_chats_read_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mark_chats_read_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mark_chats_unread_bulk
  # Mark chats as unread (bulk)
  # Mark several chats as UNread by chat IDs or mark all chats as UNread
  # @param mark_chats_unread_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mark_chats_unread_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mute_chat
  # Mute chat sounds
  # 
  # @param mute_chat_input_object 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'mute_chat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mute_chats_bulk
  # Mute chats (bulk)
  # Mute several chats by chat ids or mute all chats.
  # @param mute_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mute_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ping
  # Ping
  # Make a simple ping request.
  # @param [Hash] opts the optional parameters
  # @return [PingResponse]
  describe 'ping test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reopen_chats_bulk
  # Reopen chats (bulk)
  # Reopen chats by chat IDs or reopen all chats
  # @param reopen_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'reopen_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_new_subaccount_token
  # Request a new REST API token for sub-account
  # Returning user object, key and app name.
  # @param request_new_subaccount_token_input_object 
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'request_new_subaccount_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_sender_id
  # Apply for a new Sender ID
  # &gt; Sender IDs are shared among all of your sub-accounts.
  # @param request_sender_id_input_object 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'request_sender_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_chats
  # Find chats by message text
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :query Find chats by specified search query.
  # @return [SearchChatsPaginatedResponse]
  describe 'search_chats test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_chats_by_ids
  # Find chats (bulk)
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :ids Find chats by ID(s).
  # @return [SearchChatsByIdsPaginatedResponse]
  describe 'search_chats_by_ids test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_chats_by_receipent
  # Find chats by recipient
  # Find chats by recipient (contact, list name or phone number).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :query Find chats by specified search query.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @return [SearchChatsByReceipentPaginatedResponse]
  describe 'search_chats_by_receipent test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_contacts
  # Find contacts by given criteria
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :shared Should shared contacts be included?
  # @option opts [String] :ids Find contacts by IDs.
  # @option opts [Integer] :list_id Find contacts by List ID.
  # @option opts [Integer] :include_blocked Should blocked contacts be included?
  # @option opts [String] :query Find contacts by specified search query.
  # @option opts [Integer] :local Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0.
  # @option opts [Integer] :exact_match Return only exactly matching contacts. Default is 0.
  # @option opts [String] :country The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @return [SearchContactsPaginatedResponse]
  describe 'search_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_inbound_messages
  # Find inbound messages
  # Find inbound messages by given parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :ids Find message by ID(s).
  # @option opts [String] :query Find recipients by specified search query.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @option opts [Integer] :expand Expand by adding firstName, lastName and contactId.
  # @return [SearchInboundMessagesPaginatedResponse]
  describe 'search_inbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_lists
  # Find lists by given criteria
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :ids Find lists by IDs.
  # @option opts [String] :query Find lists by specified search query.
  # @option opts [Integer] :only_mine Return only current user lists.
  # @option opts [Integer] :only_default Return only default lists.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @return [SearchListsPaginatedResponse]
  describe 'search_lists test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_outbound_messages
  # Find messages
  # Find outbound messages by given parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [Integer] :last_id Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified.
  # @option opts [String] :ids Find message by ID(s).
  # @option opts [Integer] :session_id Find messages by session ID.
  # @option opts [String] :statuses Find messages by status.
  # @option opts [Integer] :include_deleted Search also in deleted messages.
  # @option opts [String] :query Find messages by specified search query.
  # @return [SearchOutboundMessagesPaginatedResponse]
  describe 'search_outbound_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_scheduled_messages
  # Find scheduled messages
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :query Find messages by specified search query.
  # @option opts [String] :ids Find schedules by ID(s).
  # @option opts [String] :status Fetch schedules with a specific status: a - actual, c - completed, x - all.
  # @option opts [String] :order_by Order results by some field. Default is id.
  # @option opts [String] :direction Order direction. Default is desc.
  # @return [SearchScheduledMessagesPaginatedResponse]
  describe 'search_scheduled_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_templates
  # Find templates by criteria
  # Find user templates by given parameters.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Fetch specified results page.
  # @option opts [Integer] :limit The number of results per page.
  # @option opts [String] :ids Find template by ID(s).
  # @option opts [String] :name Find template by name.
  # @option opts [String] :content Find template by content.
  # @return [SearchTemplatesPaginatedResponse]
  describe 'search_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_message
  # Send message
  # This is the main entrypoint to send messages. See the examples above for the reference.
  # @param send_message_input_object 
  # @param [Hash] opts the optional parameters
  # @return [SendMessageResponse]
  describe 'send_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_phone_verification_code_tfa
  # Step 1: Send a verification code 
  # Sends a verification code to a specified phone number.
  # @param send_phone_verification_code_tfa_input_object 
  # @param [Hash] opts the optional parameters
  # @return [SendPhoneVerificationCodeResponse]
  describe 'send_phone_verification_code_tfa test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_chat_status
  # Change chat status
  # Set the status of the chat given by ID.
  # @param set_chat_status_input_object 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'set_chat_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unblock_contact
  # Unblock a contact by phone number
  # Unblock a contact by phone number
  # @param unblock_contact_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'unblock_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unblock_contacts_bulk
  # Unblock contacts (bulk)
  # Unblock several contacts by blocked contact IDs or unblock all contacts.
  # @param unblock_contacts_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'unblock_contacts_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unmute_chats_bulk
  # Unmute chats (bulk)
  # Unmute several chats by chat ids or unmute all chats.
  # @param unmute_chats_bulk_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'unmute_chats_bulk test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unsubscribe_contact
  # Manually unsubscribe a contact
  # &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
  # @param unsubscribe_contact_input_object 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'unsubscribe_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_balance_notification_settings
  # Update balance notification settings
  # 
  # @param update_balance_notification_settings_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_balance_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_callback_settings
  # Update callback URL settings
  # 
  # @param update_callback_settings_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_callback_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_chat_desktop_notification_settings
  # Update chat desktop notification settings
  # 
  # @param update_chat_desktop_notification_settings_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_chat_desktop_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_contact
  # Edit a contact
  # 
  # @param update_contact_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'update_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_contact_note
  # Update a contact note
  # 
  # @param update_contact_note_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'update_contact_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_current_user
  # Edit current account info
  # 
  # @param update_current_user_input_object 
  # @param [Hash] opts the optional parameters
  # @return [UpdateCurrentUserResponse]
  describe 'update_current_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_custom_field
  # Edit a custom field
  # 
  # @param update_custom_field_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'update_custom_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_custom_field_value
  # Edit the custom field value of a specified contact
  # 
  # @param update_custom_field_value_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'update_custom_field_value test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_inbound_messages_notification_settings
  # Update inbound messages notification settings
  # 
  # @param update_inbound_messages_notification_settings_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_inbound_messages_notification_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_list
  # Edit a list
  # 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateListObject] :update_list_object 
  # @return [ResourceLinkResponse]
  describe 'update_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_sender_setting
  # Change sender settings
  # 
  # @param update_sender_setting_input_object 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_sender_setting test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_template
  # Update a template
  # 
  # @param update_template_input_object 
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'update_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_avatar
  # Upload an avatar
  # 
  # @param image User avatar. Should be a PNG or JPG file not more than 10 MB.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'upload_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_contact_avatar
  # Upload an avatar
  # 
  # @param image Contact avatar. Should be a PNG or JPG file not more than 10 MB.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'upload_contact_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_list_avatar
  # Add an avatar for a list
  # Add an avatar for a list
  # @param image List avatar. Should be a PNG or JPG file not more than 10 MB.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ResourceLinkResponse]
  describe 'upload_list_avatar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_message_attachment
  # Upload message attachment
  # Upload a new file to insert it as a link.
  # @param file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.
  # @param [Hash] opts the optional parameters
  # @return [UploadMessageAttachmentResponse]
  describe 'upload_message_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_message_mms_attachment
  # Upload message mms attachment
  # Upload a new file to mms.
  # @param file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.
  # @param [Hash] opts the optional parameters
  # @return [UploadMessageAttachmentResponse]
  describe 'upload_message_mms_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
