/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UnsubscribedContact.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

UnsubscribedContact::UnsubscribedContact()
{
    m_Id = 0;
    m_Phone = utility::conversions::to_string_t("");
    m_UnsubscribeTime = utility::datetime();
    m_FirstName = utility::conversions::to_string_t("");
    m_LastName = utility::conversions::to_string_t("");
}

UnsubscribedContact::~UnsubscribedContact()
{
}

void UnsubscribedContact::validate()
{
    // TODO: implement validation
}

web::json::value UnsubscribedContact::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    val[utility::conversions::to_string_t("unsubscribeTime")] = ModelBase::toJson(m_UnsubscribeTime);
    val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);

    return val;
}

void UnsubscribedContact::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phone")];
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unsubscribeTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unsubscribeTime")];
        if(!fieldValue.is_null())
        {
            setUnsubscribeTime(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UnsubscribedContact::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unsubscribeTime"), m_UnsubscribeTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
}

void UnsubscribedContact::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    setUnsubscribeTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unsubscribeTime"))));
    setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
}

int32_t UnsubscribedContact::getId() const
{
    return m_Id;
}


void UnsubscribedContact::setId(int32_t value)
{
    m_Id = value;
    
}
utility::string_t UnsubscribedContact::getPhone() const
{
    return m_Phone;
}


void UnsubscribedContact::setPhone(utility::string_t value)
{
    m_Phone = value;
    
}
utility::datetime UnsubscribedContact::getUnsubscribeTime() const
{
    return m_UnsubscribeTime;
}


void UnsubscribedContact::setUnsubscribeTime(utility::datetime value)
{
    m_UnsubscribeTime = value;
    
}
utility::string_t UnsubscribedContact::getFirstName() const
{
    return m_FirstName;
}


void UnsubscribedContact::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    
}
utility::string_t UnsubscribedContact::getLastName() const
{
    return m_LastName;
}


void UnsubscribedContact::setLastName(utility::string_t value)
{
    m_LastName = value;
    
}
}
}
}
}

