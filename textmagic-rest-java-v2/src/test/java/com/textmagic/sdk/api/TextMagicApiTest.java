/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.api;

import com.textmagic.sdk.ApiException;
import com.textmagic.sdk.model.AssignContactsToListInputObject;
import com.textmagic.sdk.model.BadRequestResponse;
import java.math.BigDecimal;
import com.textmagic.sdk.model.BlockContactInputObject;
import com.textmagic.sdk.model.BulkSession;
import com.textmagic.sdk.model.BuyDedicatedNumberInputObject;
import com.textmagic.sdk.model.Chat;
import com.textmagic.sdk.model.CheckPhoneVerificationCodeTFAInputObject;
import com.textmagic.sdk.model.ClearAndAssignContactsToListInputObject;
import com.textmagic.sdk.model.CloseChatsBulkInputObject;
import com.textmagic.sdk.model.Contact;
import com.textmagic.sdk.model.ContactNote;
import com.textmagic.sdk.model.CreateContactInputObject;
import com.textmagic.sdk.model.CreateContactNoteInputObject;
import com.textmagic.sdk.model.CreateCustomFieldInputObject;
import com.textmagic.sdk.model.CreateListInputObject;
import com.textmagic.sdk.model.CreateTemplateInputObject;
import com.textmagic.sdk.model.DeleteChatMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteChatsBulkInputObject;
import com.textmagic.sdk.model.DeleteContacsFromListObject;
import com.textmagic.sdk.model.DeleteContactNotesBulkInputObject;
import com.textmagic.sdk.model.DeleteContactsByIdsInputObject;
import com.textmagic.sdk.model.DeleteInboundMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteListContactsBulkInputObject;
import com.textmagic.sdk.model.DeleteListsBulkInputObject;
import com.textmagic.sdk.model.DeleteMessageSessionsBulkInputObject;
import com.textmagic.sdk.model.DeleteOutboundMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteScheduledMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteTemplatesBulkInputObject;
import com.textmagic.sdk.model.DoCarrierLookupResponse;
import com.textmagic.sdk.model.DoEmailLookupResponse;
import java.io.File;
import com.textmagic.sdk.model.GetAllBulkSessionsPaginatedResponse;
import com.textmagic.sdk.model.GetAllChatsPaginatedResponse;
import com.textmagic.sdk.model.GetAllInboundMessagesPaginatedResponse;
import com.textmagic.sdk.model.GetAllMessageSessionsPaginatedResponse;
import com.textmagic.sdk.model.GetAllOutboundMessagesPaginatedResponse;
import com.textmagic.sdk.model.GetAllScheduledMessagesPaginatedResponse;
import com.textmagic.sdk.model.GetAllTemplatesPaginatedResponse;
import com.textmagic.sdk.model.GetAvailableDedicatedNumbersResponse;
import com.textmagic.sdk.model.GetAvailableSenderSettingOptionsResponse;
import com.textmagic.sdk.model.GetBalanceNotificationOptionsResponse;
import com.textmagic.sdk.model.GetBalanceNotificationSettingsResponse;
import com.textmagic.sdk.model.GetBlockedContactsPaginatedResponse;
import com.textmagic.sdk.model.GetCallbackSettingsResponse;
import com.textmagic.sdk.model.GetChatMessagesPaginatedResponse;
import com.textmagic.sdk.model.GetContactImportSessionProgressResponse;
import com.textmagic.sdk.model.GetContactNotesPaginatedResponse;
import com.textmagic.sdk.model.GetContactsAutocompleteResponse;
import com.textmagic.sdk.model.GetContactsByListIdPaginatedResponse;
import com.textmagic.sdk.model.GetContactsPaginatedResponse;
import com.textmagic.sdk.model.GetCountriesResponse;
import com.textmagic.sdk.model.GetCustomFieldsPaginatedResponse;
import com.textmagic.sdk.model.GetFavoritesPaginatedResponse;
import com.textmagic.sdk.model.GetInboundMessagesNotificationSettingsResponse;
import com.textmagic.sdk.model.GetInvoicesPaginatedResponse;
import com.textmagic.sdk.model.GetListContactsIdsResponse;
import com.textmagic.sdk.model.GetListsOfContactPaginatedResponse;
import com.textmagic.sdk.model.GetListsPaginatedResponse;
import com.textmagic.sdk.model.GetMessagePreviewResponse;
import com.textmagic.sdk.model.GetMessagePriceResponse;
import com.textmagic.sdk.model.GetMessageSessionStatResponse;
import com.textmagic.sdk.model.GetMessagesBySessionIdPaginatedResponse;
import com.textmagic.sdk.model.GetMessagingCountersResponse;
import com.textmagic.sdk.model.GetMessagingStatResponse;
import com.textmagic.sdk.model.GetOutboundMessagesHistoryPaginatedResponse;
import com.textmagic.sdk.model.GetSenderIdsPaginatedResponse;
import com.textmagic.sdk.model.GetSenderSettingsResponse;
import com.textmagic.sdk.model.GetSpendingStatPaginatedResponse;
import com.textmagic.sdk.model.GetSubaccountsWithTokensInputObject;
import com.textmagic.sdk.model.GetSubaccountsWithTokensResponse;
import com.textmagic.sdk.model.GetTimezonesResponse;
import com.textmagic.sdk.model.GetUnreadMessagesTotalResponse;
import com.textmagic.sdk.model.GetUnsubscribersPaginatedResponse;
import com.textmagic.sdk.model.GetUserDedicatedNumbersPaginatedResponse;
import com.textmagic.sdk.model.InviteSubaccountInputObject;
import com.textmagic.sdk.model.MarkChatsReadBulkInputObject;
import com.textmagic.sdk.model.MarkChatsUnreadBulkInputObject;
import com.textmagic.sdk.model.MessageIn;
import com.textmagic.sdk.model.MessageOut;
import com.textmagic.sdk.model.MessageSession;
import com.textmagic.sdk.model.MessageTemplate;
import com.textmagic.sdk.model.MessagesIcs;
import com.textmagic.sdk.model.MuteChatInputObject;
import com.textmagic.sdk.model.MuteChatsBulkInputObject;
import com.textmagic.sdk.model.NotFoundResponse;
import com.textmagic.sdk.model.PingResponse;
import com.textmagic.sdk.model.ReopenChatsBulkInputObject;
import com.textmagic.sdk.model.RequestNewSubaccountTokenInputObject;
import com.textmagic.sdk.model.RequestSenderIdInputObject;
import com.textmagic.sdk.model.ResourceLinkResponse;
import com.textmagic.sdk.model.SearchChatsByIdsPaginatedResponse;
import com.textmagic.sdk.model.SearchChatsByReceipentPaginatedResponse;
import com.textmagic.sdk.model.SearchChatsPaginatedResponse;
import com.textmagic.sdk.model.SearchContactsPaginatedResponse;
import com.textmagic.sdk.model.SearchInboundMessagesPaginatedResponse;
import com.textmagic.sdk.model.SearchListsPaginatedResponse;
import com.textmagic.sdk.model.SearchOutboundMessagesPaginatedResponse;
import com.textmagic.sdk.model.SearchScheduledMessagesPaginatedResponse;
import com.textmagic.sdk.model.SearchTemplatesPaginatedResponse;
import com.textmagic.sdk.model.SendMessageInputObject;
import com.textmagic.sdk.model.SendMessageResponse;
import com.textmagic.sdk.model.SendPhoneVerificationCodeResponse;
import com.textmagic.sdk.model.SendPhoneVerificationCodeTFAInputObject;
import com.textmagic.sdk.model.SenderId;
import com.textmagic.sdk.model.SetChatStatusInputObject;
import com.textmagic.sdk.model.UnauthorizedResponse;
import com.textmagic.sdk.model.UnblockContactInputObject;
import com.textmagic.sdk.model.UnblockContactsBulkInputObject;
import com.textmagic.sdk.model.UnmuteChatsBulkInputObject;
import com.textmagic.sdk.model.UnsubscribeContactInputObject;
import com.textmagic.sdk.model.UnsubscribedContact;
import com.textmagic.sdk.model.UpdateBalanceNotificationSettingsInputObject;
import com.textmagic.sdk.model.UpdateCallbackSettingsInputObject;
import com.textmagic.sdk.model.UpdateChatDesktopNotificationSettingsInputObject;
import com.textmagic.sdk.model.UpdateContactInputObject;
import com.textmagic.sdk.model.UpdateContactNoteInputObject;
import com.textmagic.sdk.model.UpdateCurrentUserInputObject;
import com.textmagic.sdk.model.UpdateCurrentUserResponse;
import com.textmagic.sdk.model.UpdateCustomFieldInputObject;
import com.textmagic.sdk.model.UpdateCustomFieldValueInputObject;
import com.textmagic.sdk.model.UpdateInboundMessagesNotificationSettingsInputObject;
import com.textmagic.sdk.model.UpdateListObject;
import com.textmagic.sdk.model.UpdateSenderSettingInputObject;
import com.textmagic.sdk.model.UpdateTemplateInputObject;
import com.textmagic.sdk.model.UploadMessageAttachmentResponse;
import com.textmagic.sdk.model.User;
import com.textmagic.sdk.model.UserCustomField;
import com.textmagic.sdk.model.UsersInbound;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TextMagicApi
 */
@Ignore
public class TextMagicApiTest {

    private final TextMagicApi api = new TextMagicApi();

    
    /**
     * Assign contacts to a list
     *
     * &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignContactsToListTest() throws ApiException {
        AssignContactsToListInputObject assignContactsToListInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.assignContactsToList(assignContactsToListInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Block a contact by phone number
     *
     * Block a contact from inbound and outbound communication by phone number.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blockContactTest() throws ApiException {
        BlockContactInputObject blockContactInputObject = null;
        ResourceLinkResponse response = api.blockContact(blockContactInputObject);

        // TODO: test validations
    }
    
    /**
     * Buy a dedicated number
     *
     * To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buyDedicatedNumberTest() throws ApiException {
        BuyDedicatedNumberInputObject buyDedicatedNumberInputObject = null;
        api.buyDedicatedNumber(buyDedicatedNumberInputObject);

        // TODO: test validations
    }
    
    /**
     * Cancel verification process
     *
     * You can cancel the verification not earlier than 30 seconds after the initial request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelVerificationTest() throws ApiException {
        String verifyId = null;
        api.cancelVerification(verifyId);

        // TODO: test validations
    }
    
    /**
     * Step 2: Check the verification code 
     *
     * Check received code from user with the code which was actually sent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkPhoneVerificationCodeTFATest() throws ApiException {
        CheckPhoneVerificationCodeTFAInputObject checkPhoneVerificationCodeTFAInputObject = null;
        api.checkPhoneVerificationCodeTFA(checkPhoneVerificationCodeTFAInputObject);

        // TODO: test validations
    }
    
    /**
     * Reset list members to the specified contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearAndAssignContactsToListTest() throws ApiException {
        ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.clearAndAssignContactsToList(clearAndAssignContactsToListInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Close chats (bulk)
     *
     * Close chats by chat IDs or close all chats
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeChatsBulkTest() throws ApiException {
        CloseChatsBulkInputObject closeChatsBulkInputObject = null;
        api.closeChatsBulk(closeChatsBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Close read chats
     *
     * Close all chats that have no unread messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeReadChatsTest() throws ApiException {
        api.closeReadChats();

        // TODO: test validations
    }
    
    /**
     * Close sub-account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeSubaccountTest() throws ApiException {
        Integer id = null;
        api.closeSubaccount(id);

        // TODO: test validations
    }
    
    /**
     * Add a new contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        CreateContactInputObject createContactInputObject = null;
        ResourceLinkResponse response = api.createContact(createContactInputObject);

        // TODO: test validations
    }
    
    /**
     * Create a new contact note
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactNoteTest() throws ApiException {
        CreateContactNoteInputObject createContactNoteInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.createContactNote(createContactNoteInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Add a new custom field
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCustomFieldTest() throws ApiException {
        CreateCustomFieldInputObject createCustomFieldInputObject = null;
        ResourceLinkResponse response = api.createCustomField(createCustomFieldInputObject);

        // TODO: test validations
    }
    
    /**
     * Create a new list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createListTest() throws ApiException {
        CreateListInputObject createListInputObject = null;
        ResourceLinkResponse response = api.createList(createListInputObject);

        // TODO: test validations
    }
    
    /**
     * Create a template
     *
     * There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTemplateTest() throws ApiException {
        CreateTemplateInputObject createTemplateInputObject = null;
        ResourceLinkResponse response = api.createTemplate(createTemplateInputObject);

        // TODO: test validations
    }
    
    /**
     * Delete contacts (bulk)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllContactsTest() throws ApiException {
        api.deleteAllContacts();

        // TODO: test validations
    }
    
    /**
     * Delete all messages
     *
     * Delete all messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllOutboundMessagesTest() throws ApiException {
        api.deleteAllOutboundMessages();

        // TODO: test validations
    }
    
    /**
     * Delete an avatar
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAvatarTest() throws ApiException {
        api.deleteAvatar();

        // TODO: test validations
    }
    
    /**
     * Delete chat messages by ID(s)
     *
     * Delete messages from chat by given message IDs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChatMessagesTest() throws ApiException {
        DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject = null;
        Integer id = null;
        api.deleteChatMessages(deleteChatMessagesBulkInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Delete chats (bulk)
     *
     * Delete chats by given IDs or delete all chats.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChatsBulkTest() throws ApiException {
        DeleteChatsBulkInputObject deleteChatsBulkInputObject = null;
        api.deleteChatsBulk(deleteChatsBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Delete a contact
     *
     * &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        Integer id = null;
        api.deleteContact(id);

        // TODO: test validations
    }
    
    /**
     * Delete an avatar
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactAvatarTest() throws ApiException {
        Integer id = null;
        api.deleteContactAvatar(id);

        // TODO: test validations
    }
    
    /**
     * Delete a contact note
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactNoteTest() throws ApiException {
        Integer id = null;
        api.deleteContactNote(id);

        // TODO: test validations
    }
    
    /**
     * Delete contact notes (bulk)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactNotesBulkTest() throws ApiException {
        Integer id = null;
        DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject = null;
        api.deleteContactNotesBulk(id, deleteContactNotesBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Delete contacts by IDs (bulk)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactsByIdsTest() throws ApiException {
        DeleteContactsByIdsInputObject deleteContactsByIdsInputObject = null;
        api.deleteContactsByIds(deleteContactsByIdsInputObject);

        // TODO: test validations
    }
    
    /**
     * Unassign contacts from a list
     *
     * &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactsFromListTest() throws ApiException {
        DeleteContacsFromListObject deleteContacsFromListObject = null;
        Integer id = null;
        api.deleteContactsFromList(deleteContacsFromListObject, id);

        // TODO: test validations
    }
    
    /**
     * Delete a custom field
     *
     * &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomFieldTest() throws ApiException {
        Integer id = null;
        api.deleteCustomField(id);

        // TODO: test validations
    }
    
    /**
     * Cancel a dedicated number subscription
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDedicatedNumberTest() throws ApiException {
        Integer id = null;
        api.deleteDedicatedNumber(id);

        // TODO: test validations
    }
    
    /**
     * Delete a single inbound message
     *
     * &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInboundMessageTest() throws ApiException {
        Integer id = null;
        api.deleteInboundMessage(id);

        // TODO: test validations
    }
    
    /**
     * Delete inbound messages (bulk)
     *
     * &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInboundMessagesBulkTest() throws ApiException {
        DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject = null;
        api.deleteInboundMessagesBulk(deleteInboundMessagesBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Delete a list
     *
     * This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListTest() throws ApiException {
        Integer id = null;
        api.deleteList(id);

        // TODO: test validations
    }
    
    /**
     * Delete an avatar for a list
     *
     * Delete an avatar for a list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListAvatarTest() throws ApiException {
        Integer id = null;
        api.deleteListAvatar(id);

        // TODO: test validations
    }
    
    /**
     * Delete contacts from a list (bulk)
     *
     * Delete contacts from a list (bulk)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListContactsBulkTest() throws ApiException {
        DeleteListContactsBulkInputObject deleteListContactsBulkInputObject = null;
        Integer id = null;
        api.deleteListContactsBulk(deleteListContactsBulkInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Delete lists (bulk)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListsBulkTest() throws ApiException {
        DeleteListsBulkInputObject deleteListsBulkInputObject = null;
        api.deleteListsBulk(deleteListsBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Delete a session
     *
     * Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMessageSessionTest() throws ApiException {
        Integer id = null;
        api.deleteMessageSession(id);

        // TODO: test validations
    }
    
    /**
     * Delete sessions (bulk)
     *
     * Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMessageSessionsBulkTest() throws ApiException {
        DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject = null;
        api.deleteMessageSessionsBulk(deleteMessageSessionsBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Delete message
     *
     * Delete a single message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOutboundMessageTest() throws ApiException {
        Integer id = null;
        api.deleteOutboundMessage(id);

        // TODO: test validations
    }
    
    /**
     * Delete messages (bulk)
     *
     * Delete outbound messages by the given ID(s) or delete all outbound messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOutboundMessagesBulkTest() throws ApiException {
        DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject = null;
        api.deleteOutboundMessagesBulk(deleteOutboundMessagesBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Delete a single scheduled message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteScheduledMessageTest() throws ApiException {
        Integer id = null;
        api.deleteScheduledMessage(id);

        // TODO: test validations
    }
    
    /**
     * Delete scheduled messages (bulk)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteScheduledMessagesBulkTest() throws ApiException {
        DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject = null;
        api.deleteScheduledMessagesBulk(deleteScheduledMessagesBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Delete a Sender ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSenderIdTest() throws ApiException {
        Integer id = null;
        api.deleteSenderId(id);

        // TODO: test validations
    }
    
    /**
     * Delete a template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTemplateTest() throws ApiException {
        Integer id = null;
        api.deleteTemplate(id);

        // TODO: test validations
    }
    
    /**
     * Delete templates (bulk)
     *
     * Delete templates by given IDs or delete all templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTemplatesBulkTest() throws ApiException {
        DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject = null;
        api.deleteTemplatesBulk(deleteTemplatesBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Carrier Lookup
     *
     * This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doCarrierLookupTest() throws ApiException {
        String phone = null;
        String country = null;
        DoCarrierLookupResponse response = api.doCarrierLookup(phone, country);

        // TODO: test validations
    }
    
    /**
     * Email Lookup
     *
     * To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doEmailLookupTest() throws ApiException {
        String email = null;
        DoEmailLookupResponse response = api.doEmailLookup(email);

        // TODO: test validations
    }
    
    /**
     * Get all bulk sessions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllBulkSessionsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetAllBulkSessionsPaginatedResponse response = api.getAllBulkSessions(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all chats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllChatsTest() throws ApiException {
        String status = null;
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        Integer voice = null;
        Integer flat = null;
        GetAllChatsPaginatedResponse response = api.getAllChats(status, page, limit, orderBy, voice, flat);

        // TODO: test validations
    }
    
    /**
     * Get all inbound messages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllInboundMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        String direction = null;
        GetAllInboundMessagesPaginatedResponse response = api.getAllInboundMessages(page, limit, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get all sessions
     *
     * Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllMessageSessionsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetAllMessageSessionsPaginatedResponse response = api.getAllMessageSessions(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all messages
     *
     * Get all user oubound messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllOutboundMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer lastId = null;
        GetAllOutboundMessagesPaginatedResponse response = api.getAllOutboundMessages(page, limit, lastId);

        // TODO: test validations
    }
    
    /**
     * Get all scheduled messages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllScheduledMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String status = null;
        String orderBy = null;
        String direction = null;
        GetAllScheduledMessagesPaginatedResponse response = api.getAllScheduledMessages(page, limit, status, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get all templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTemplatesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetAllTemplatesPaginatedResponse response = api.getAllTemplates(page, limit);

        // TODO: test validations
    }
    
    /**
     * Find dedicated numbers available for purchase
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAvailableDedicatedNumbersTest() throws ApiException {
        String country = null;
        Integer prefix = null;
        Integer tollfree = null;
        GetAvailableDedicatedNumbersResponse response = api.getAvailableDedicatedNumbers(country, prefix, tollfree);

        // TODO: test validations
    }
    
    /**
     * Get available sender settings
     *
     * Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAvailableSenderSettingOptionsTest() throws ApiException {
        String country = null;
        GetAvailableSenderSettingOptionsResponse response = api.getAvailableSenderSettingOptions(country);

        // TODO: test validations
    }
    
    /**
     * Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalanceNotificationOptionsTest() throws ApiException {
        GetBalanceNotificationOptionsResponse response = api.getBalanceNotificationOptions();

        // TODO: test validations
    }
    
    /**
     * Get balance notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalanceNotificationSettingsTest() throws ApiException {
        GetBalanceNotificationSettingsResponse response = api.getBalanceNotificationSettings();

        // TODO: test validations
    }
    
    /**
     * Get blocked contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockedContactsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        String orderBy = null;
        String direction = null;
        GetBlockedContactsPaginatedResponse response = api.getBlockedContacts(page, limit, query, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get bulk session status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBulkSessionTest() throws ApiException {
        Integer id = null;
        BulkSession response = api.getBulkSession(id);

        // TODO: test validations
    }
    
    /**
     * Fetch callback URL settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCallbackSettingsTest() throws ApiException {
        GetCallbackSettingsResponse response = api.getCallbackSettings();

        // TODO: test validations
    }
    
    /**
     * Get a single chat
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatTest() throws ApiException {
        Integer id = null;
        Chat response = api.getChat(id);

        // TODO: test validations
    }
    
    /**
     * Find chats by phone
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatByPhoneTest() throws ApiException {
        String phone = null;
        Integer upsert = null;
        Integer reopen = null;
        Chat response = api.getChatByPhone(phone, upsert, reopen);

        // TODO: test validations
    }
    
    /**
     * Get chat messages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatMessagesTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        String query = null;
        String start = null;
        String end = null;
        String direction = null;
        Integer voice = null;
        GetChatMessagesPaginatedResponse response = api.getChatMessages(id, page, limit, query, start, end, direction, voice);

        // TODO: test validations
    }
    
    /**
     * Get the details of a specific contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        Integer id = null;
        Contact response = api.getContact(id);

        // TODO: test validations
    }
    
    /**
     * Get the details of a specific contact by phone number
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactByPhoneTest() throws ApiException {
        String phone = null;
        Contact response = api.getContactByPhone(phone);

        // TODO: test validations
    }
    
    /**
     * Check if a phone number is blocked
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactIfBlockedTest() throws ApiException {
        String phone = null;
        Contact response = api.getContactIfBlocked(phone);

        // TODO: test validations
    }
    
    /**
     * Check import progress
     *
     * Get contact import session progress.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactImportSessionProgressTest() throws ApiException {
        Integer id = null;
        GetContactImportSessionProgressResponse response = api.getContactImportSessionProgress(id);

        // TODO: test validations
    }
    
    /**
     * Get a contact note
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactNoteTest() throws ApiException {
        Integer id = null;
        ContactNote response = api.getContactNote(id);

        // TODO: test validations
    }
    
    /**
     * Fetch notes assigned to a given contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactNotesTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        GetContactNotesPaginatedResponse response = api.getContactNotes(id, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer shared = null;
        String orderBy = null;
        String direction = null;
        GetContactsPaginatedResponse response = api.getContacts(page, limit, shared, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get contacts autocomplete suggestions
     *
     * Get contacts autocomplete suggestions by given search terms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsAutocompleteTest() throws ApiException {
        String query = null;
        Integer limit = null;
        Integer lists = null;
        GetContactsAutocompleteResponse response = api.getContactsAutocomplete(query, limit, lists);

        // TODO: test validations
    }
    
    /**
     * Get all contacts in a list
     *
     * A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsByListIdTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        String direction = null;
        GetContactsByListIdPaginatedResponse response = api.getContactsByListId(id, page, limit, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get countries
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCountriesTest() throws ApiException {
        GetCountriesResponse response = api.getCountries();

        // TODO: test validations
    }
    
    /**
     * Get current account information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        User response = api.getCurrentUser();

        // TODO: test validations
    }
    
    /**
     * Get the details of a specific custom field
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomFieldTest() throws ApiException {
        Integer id = null;
        UserCustomField response = api.getCustomField(id);

        // TODO: test validations
    }
    
    /**
     * Get all custom fields
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetCustomFieldsPaginatedResponse response = api.getCustomFields(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get the details of a specific dedicated number
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDedicatedNumberTest() throws ApiException {
        Integer id = null;
        UsersInbound response = api.getDedicatedNumber(id);

        // TODO: test validations
    }
    
    /**
     * Get favorite contacts and lists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFavoritesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        GetFavoritesPaginatedResponse response = api.getFavorites(page, limit, query);

        // TODO: test validations
    }
    
    /**
     * Get a single inbound message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboundMessageTest() throws ApiException {
        Integer id = null;
        MessageIn response = api.getInboundMessage(id);

        // TODO: test validations
    }
    
    /**
     * Get inbound messages notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboundMessagesNotificationSettingsTest() throws ApiException {
        GetInboundMessagesNotificationSettingsResponse response = api.getInboundMessagesNotificationSettings();

        // TODO: test validations
    }
    
    /**
     * Get all invoices
     *
     * With the TextMagic API, you can check the invoices and transactions for your account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoicesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetInvoicesPaginatedResponse response = api.getInvoices(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get the details of a specific list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        Integer id = null;
        List response = api.getList(id);

        // TODO: test validations
    }
    
    /**
     * Get all contact IDs in a list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListContactsIdsTest() throws ApiException {
        Integer id = null;
        GetListContactsIdsResponse response = api.getListContactsIds(id);

        // TODO: test validations
    }
    
    /**
     * Get all lists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        String direction = null;
        Integer favoriteOnly = null;
        Integer onlyMine = null;
        GetListsPaginatedResponse response = api.getLists(page, limit, orderBy, direction, favoriteOnly, onlyMine);

        // TODO: test validations
    }
    
    /**
     * Get a contact&#39;s lists
     *
     * Get all the lists in which a contact is included.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListsOfContactTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        GetListsOfContactPaginatedResponse response = api.getListsOfContact(id, page, limit);

        // TODO: test validations
    }
    
    /**
     * Preview message
     *
     * Get a messages preview (with tags merged) of up to 100 messages per session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagePreviewTest() throws ApiException {
        String text = null;
        Integer templateId = null;
        Integer sendingTime = null;
        String sendingDateTime = null;
        String sendingTimezone = null;
        String contacts = null;
        String lists = null;
        String phones = null;
        Integer cutExtra = null;
        Integer partsCount = null;
        Integer referenceId = null;
        String from = null;
        String rule = null;
        Integer createChat = null;
        Integer tts = null;
        Integer local = null;
        String localCountry = null;
        GetMessagePreviewResponse response = api.getMessagePreview(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);

        // TODO: test validations
    }
    
    /**
     * Check message price
     *
     * Check pricing for a new outbound message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagePriceTest() throws ApiException {
        Integer includeBlocked = null;
        String text = null;
        Integer templateId = null;
        Integer sendingTime = null;
        String sendingDateTime = null;
        String sendingTimezone = null;
        String contacts = null;
        String lists = null;
        String phones = null;
        Integer cutExtra = null;
        Integer partsCount = null;
        Integer referenceId = null;
        String from = null;
        String rule = null;
        Integer createChat = null;
        Integer tts = null;
        Integer local = null;
        String localCountry = null;
        GetMessagePriceResponse response = api.getMessagePrice(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);

        // TODO: test validations
    }
    
    /**
     * Get a session&#x60;s details
     *
     * Get a specific session’s details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageSessionTest() throws ApiException {
        Integer id = null;
        MessageSession response = api.getMessageSession(id);

        // TODO: test validations
    }
    
    /**
     * Get a session&#x60;s statistics
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageSessionStatTest() throws ApiException {
        Integer id = null;
        Integer includeDeleted = null;
        GetMessageSessionStatResponse response = api.getMessageSessionStat(id, includeDeleted);

        // TODO: test validations
    }
    
    /**
     * Get a session&#x60;s messages
     *
     * A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagesBySessionIdTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        String statuses = null;
        Integer includeDeleted = null;
        GetMessagesBySessionIdPaginatedResponse response = api.getMessagesBySessionId(id, page, limit, statuses, includeDeleted);

        // TODO: test validations
    }
    
    /**
     * Get sent/received messages counters values
     *
     * Get total contacts, sent messages and received messages counters values.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagingCountersTest() throws ApiException {
        GetMessagingCountersResponse response = api.getMessagingCounters();

        // TODO: test validations
    }
    
    /**
     * Get messaging statistics
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagingStatTest() throws ApiException {
        String by = null;
        Integer start = null;
        Integer end = null;
        GetMessagingStatResponse response = api.getMessagingStat(by, start, end);

        // TODO: test validations
    }
    
    /**
     * Get a single message
     *
     * Get a single outgoing message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOutboundMessageTest() throws ApiException {
        Integer id = null;
        MessageOut response = api.getOutboundMessage(id);

        // TODO: test validations
    }
    
    /**
     * Get history
     *
     * Get the outbound messages history.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOutboundMessagesHistoryTest() throws ApiException {
        Integer limit = null;
        Integer lastId = null;
        String query = null;
        String orderBy = null;
        String direction = null;
        GetOutboundMessagesHistoryPaginatedResponse response = api.getOutboundMessagesHistory(limit, lastId, query, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get a single scheduled message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScheduledMessageTest() throws ApiException {
        Integer id = null;
        MessagesIcs response = api.getScheduledMessage(id);

        // TODO: test validations
    }
    
    /**
     * Get the details of a specific Sender ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSenderIdTest() throws ApiException {
        Integer id = null;
        SenderId response = api.getSenderId(id);

        // TODO: test validations
    }
    
    /**
     * Get all your approved Sender IDs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSenderIdsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetSenderIdsPaginatedResponse response = api.getSenderIds(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get current sender settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSenderSettingsTest() throws ApiException {
        String country = null;
        GetSenderSettingsResponse response = api.getSenderSettings(country);

        // TODO: test validations
    }
    
    /**
     * Get spending statistics
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpendingStatTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String start = null;
        String end = null;
        GetSpendingStatPaginatedResponse response = api.getSpendingStat(page, limit, start, end);

        // TODO: test validations
    }
    
    /**
     * Get sub-account information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubaccountTest() throws ApiException {
        Integer id = null;
        User response = api.getSubaccount(id);

        // TODO: test validations
    }
    
    /**
     * Get a sub-accounts list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubaccountsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        User response = api.getSubaccounts(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all sub-accounts with their REST API tokens associated with a specified app name
     *
     * Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubaccountsWithTokensTest() throws ApiException {
        GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject = null;
        BigDecimal page = null;
        Integer limit = null;
        GetSubaccountsWithTokensResponse response = api.getSubaccountsWithTokens(getSubaccountsWithTokensInputObject, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get a template&#x60;s details
     *
     * Get a single template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateTest() throws ApiException {
        Integer id = null;
        MessageTemplate response = api.getTemplate(id);

        // TODO: test validations
    }
    
    /**
     * Get timezones
     *
     * Return all available timezone IDs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTimezonesTest() throws ApiException {
        Integer full = null;
        GetTimezonesResponse response = api.getTimezones(full);

        // TODO: test validations
    }
    
    /**
     * Get unread messages number
     *
     * Get the total amount of unread messages in the current user chats.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnreadMessagesTotalTest() throws ApiException {
        GetUnreadMessagesTotalResponse response = api.getUnreadMessagesTotal();

        // TODO: test validations
    }
    
    /**
     * Get the details of a specific unsubscribed contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnsubscribedContactTest() throws ApiException {
        Integer id = null;
        UnsubscribedContact response = api.getUnsubscribedContact(id);

        // TODO: test validations
    }
    
    /**
     * Get all unsubscribed contacts
     *
     * When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnsubscribersTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetUnsubscribersPaginatedResponse response = api.getUnsubscribers(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all your dedicated numbers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserDedicatedNumbersTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer surveyId = null;
        GetUserDedicatedNumbersPaginatedResponse response = api.getUserDedicatedNumbers(page, limit, surveyId);

        // TODO: test validations
    }
    
    /**
     * Import contacts
     *
     * Import contacts from the CSV, XLS or XLSX file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importContactsTest() throws ApiException {
        File file = null;
        String column = null;
        Integer listId = null;
        String listName = null;
        ResourceLinkResponse response = api.importContacts(file, column, listId, listName);

        // TODO: test validations
    }
    
    /**
     * Invite a new sub-account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inviteSubaccountTest() throws ApiException {
        InviteSubaccountInputObject inviteSubaccountInputObject = null;
        api.inviteSubaccount(inviteSubaccountInputObject);

        // TODO: test validations
    }
    
    /**
     * Mark chats as read (bulk)
     *
     * Mark several chats as read by chat IDs or mark all chats as read
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markChatsReadBulkTest() throws ApiException {
        MarkChatsReadBulkInputObject markChatsReadBulkInputObject = null;
        api.markChatsReadBulk(markChatsReadBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Mark chats as unread (bulk)
     *
     * Mark several chats as UNread by chat IDs or mark all chats as UNread
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markChatsUnreadBulkTest() throws ApiException {
        MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject = null;
        api.markChatsUnreadBulk(markChatsUnreadBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Mute chat sounds
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void muteChatTest() throws ApiException {
        MuteChatInputObject muteChatInputObject = null;
        ResourceLinkResponse response = api.muteChat(muteChatInputObject);

        // TODO: test validations
    }
    
    /**
     * Mute chats (bulk)
     *
     * Mute several chats by chat ids or mute all chats.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void muteChatsBulkTest() throws ApiException {
        MuteChatsBulkInputObject muteChatsBulkInputObject = null;
        api.muteChatsBulk(muteChatsBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Ping
     *
     * Make a simple ping request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        PingResponse response = api.ping();

        // TODO: test validations
    }
    
    /**
     * Reopen chats (bulk)
     *
     * Reopen chats by chat IDs or reopen all chats
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reopenChatsBulkTest() throws ApiException {
        ReopenChatsBulkInputObject reopenChatsBulkInputObject = null;
        api.reopenChatsBulk(reopenChatsBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Request a new REST API token for sub-account
     *
     * Returning user object, key and app name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestNewSubaccountTokenTest() throws ApiException {
        RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject = null;
        User response = api.requestNewSubaccountToken(requestNewSubaccountTokenInputObject);

        // TODO: test validations
    }
    
    /**
     * Apply for a new Sender ID
     *
     * &gt; Sender IDs are shared among all of your sub-accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestSenderIdTest() throws ApiException {
        RequestSenderIdInputObject requestSenderIdInputObject = null;
        ResourceLinkResponse response = api.requestSenderId(requestSenderIdInputObject);

        // TODO: test validations
    }
    
    /**
     * Find chats by message text
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchChatsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        SearchChatsPaginatedResponse response = api.searchChats(page, limit, query);

        // TODO: test validations
    }
    
    /**
     * Find chats (bulk)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchChatsByIdsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String ids = null;
        SearchChatsByIdsPaginatedResponse response = api.searchChatsByIds(page, limit, ids);

        // TODO: test validations
    }
    
    /**
     * Find chats by recipient
     *
     * Find chats by recipient (contact, list name or phone number).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchChatsByReceipentTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        String orderBy = null;
        SearchChatsByReceipentPaginatedResponse response = api.searchChatsByReceipent(page, limit, query, orderBy);

        // TODO: test validations
    }
    
    /**
     * Find contacts by given criteria
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchContactsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer shared = null;
        String ids = null;
        Integer listId = null;
        Integer includeBlocked = null;
        String query = null;
        Integer local = null;
        Integer exactMatch = null;
        String country = null;
        String orderBy = null;
        String direction = null;
        SearchContactsPaginatedResponse response = api.searchContacts(page, limit, shared, ids, listId, includeBlocked, query, local, exactMatch, country, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Find inbound messages
     *
     * Find inbound messages by given parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchInboundMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String ids = null;
        String query = null;
        String orderBy = null;
        String direction = null;
        Integer expand = null;
        SearchInboundMessagesPaginatedResponse response = api.searchInboundMessages(page, limit, ids, query, orderBy, direction, expand);

        // TODO: test validations
    }
    
    /**
     * Find lists by given criteria
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchListsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String ids = null;
        String query = null;
        Integer onlyMine = null;
        Integer onlyDefault = null;
        String orderBy = null;
        String direction = null;
        SearchListsPaginatedResponse response = api.searchLists(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Find messages
     *
     * Find outbound messages by given parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchOutboundMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer lastId = null;
        String ids = null;
        Integer sessionId = null;
        String statuses = null;
        Integer includeDeleted = null;
        String query = null;
        SearchOutboundMessagesPaginatedResponse response = api.searchOutboundMessages(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);

        // TODO: test validations
    }
    
    /**
     * Find scheduled messages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchScheduledMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        String ids = null;
        String status = null;
        String orderBy = null;
        String direction = null;
        SearchScheduledMessagesPaginatedResponse response = api.searchScheduledMessages(page, limit, query, ids, status, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Find templates by criteria
     *
     * Find user templates by given parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchTemplatesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String ids = null;
        String name = null;
        String content = null;
        SearchTemplatesPaginatedResponse response = api.searchTemplates(page, limit, ids, name, content);

        // TODO: test validations
    }
    
    /**
     * Send message
     *
     * This is the main entrypoint to send messages. See the examples above for the reference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendMessageTest() throws ApiException {
        SendMessageInputObject sendMessageInputObject = null;
        SendMessageResponse response = api.sendMessage(sendMessageInputObject);

        // TODO: test validations
    }
    
    /**
     * Step 1: Send a verification code 
     *
     * Sends a verification code to a specified phone number.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendPhoneVerificationCodeTFATest() throws ApiException {
        SendPhoneVerificationCodeTFAInputObject sendPhoneVerificationCodeTFAInputObject = null;
        SendPhoneVerificationCodeResponse response = api.sendPhoneVerificationCodeTFA(sendPhoneVerificationCodeTFAInputObject);

        // TODO: test validations
    }
    
    /**
     * Change chat status
     *
     * Set the status of the chat given by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChatStatusTest() throws ApiException {
        SetChatStatusInputObject setChatStatusInputObject = null;
        ResourceLinkResponse response = api.setChatStatus(setChatStatusInputObject);

        // TODO: test validations
    }
    
    /**
     * Unblock a contact by phone number
     *
     * Unblock a contact by phone number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unblockContactTest() throws ApiException {
        UnblockContactInputObject unblockContactInputObject = null;
        api.unblockContact(unblockContactInputObject);

        // TODO: test validations
    }
    
    /**
     * Unblock contacts (bulk)
     *
     * Unblock several contacts by blocked contact IDs or unblock all contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unblockContactsBulkTest() throws ApiException {
        UnblockContactsBulkInputObject unblockContactsBulkInputObject = null;
        api.unblockContactsBulk(unblockContactsBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Unmute chats (bulk)
     *
     * Unmute several chats by chat ids or unmute all chats.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmuteChatsBulkTest() throws ApiException {
        UnmuteChatsBulkInputObject unmuteChatsBulkInputObject = null;
        api.unmuteChatsBulk(unmuteChatsBulkInputObject);

        // TODO: test validations
    }
    
    /**
     * Manually unsubscribe a contact
     *
     * &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeContactTest() throws ApiException {
        UnsubscribeContactInputObject unsubscribeContactInputObject = null;
        ResourceLinkResponse response = api.unsubscribeContact(unsubscribeContactInputObject);

        // TODO: test validations
    }
    
    /**
     * Update balance notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBalanceNotificationSettingsTest() throws ApiException {
        UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject = null;
        api.updateBalanceNotificationSettings(updateBalanceNotificationSettingsInputObject);

        // TODO: test validations
    }
    
    /**
     * Update callback URL settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCallbackSettingsTest() throws ApiException {
        UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject = null;
        api.updateCallbackSettings(updateCallbackSettingsInputObject);

        // TODO: test validations
    }
    
    /**
     * Update chat desktop notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChatDesktopNotificationSettingsTest() throws ApiException {
        UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject = null;
        api.updateChatDesktopNotificationSettings(updateChatDesktopNotificationSettingsInputObject);

        // TODO: test validations
    }
    
    /**
     * Edit a contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        UpdateContactInputObject updateContactInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.updateContact(updateContactInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Update a contact note
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactNoteTest() throws ApiException {
        UpdateContactNoteInputObject updateContactNoteInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.updateContactNote(updateContactNoteInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Edit current account info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCurrentUserTest() throws ApiException {
        UpdateCurrentUserInputObject updateCurrentUserInputObject = null;
        UpdateCurrentUserResponse response = api.updateCurrentUser(updateCurrentUserInputObject);

        // TODO: test validations
    }
    
    /**
     * Edit a custom field
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomFieldTest() throws ApiException {
        UpdateCustomFieldInputObject updateCustomFieldInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.updateCustomField(updateCustomFieldInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Edit the custom field value of a specified contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomFieldValueTest() throws ApiException {
        UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.updateCustomFieldValue(updateCustomFieldValueInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Update inbound messages notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInboundMessagesNotificationSettingsTest() throws ApiException {
        UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject = null;
        api.updateInboundMessagesNotificationSettings(updateInboundMessagesNotificationSettingsInputObject);

        // TODO: test validations
    }
    
    /**
     * Edit a list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateListTest() throws ApiException {
        Integer id = null;
        UpdateListObject updateListObject = null;
        ResourceLinkResponse response = api.updateList(id, updateListObject);

        // TODO: test validations
    }
    
    /**
     * Change sender settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSenderSettingTest() throws ApiException {
        UpdateSenderSettingInputObject updateSenderSettingInputObject = null;
        api.updateSenderSetting(updateSenderSettingInputObject);

        // TODO: test validations
    }
    
    /**
     * Update a template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTemplateTest() throws ApiException {
        UpdateTemplateInputObject updateTemplateInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.updateTemplate(updateTemplateInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Upload an avatar
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadAvatarTest() throws ApiException {
        File image = null;
        api.uploadAvatar(image);

        // TODO: test validations
    }
    
    /**
     * Upload an avatar
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadContactAvatarTest() throws ApiException {
        File image = null;
        Integer id = null;
        ResourceLinkResponse response = api.uploadContactAvatar(image, id);

        // TODO: test validations
    }
    
    /**
     * Add an avatar for a list
     *
     * Add an avatar for a list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadListAvatarTest() throws ApiException {
        File image = null;
        Integer id = null;
        ResourceLinkResponse response = api.uploadListAvatar(image, id);

        // TODO: test validations
    }
    
    /**
     * Upload message attachment
     *
     * Upload a new file to insert it as a link.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadMessageAttachmentTest() throws ApiException {
        File file = null;
        UploadMessageAttachmentResponse response = api.uploadMessageAttachment(file);

        // TODO: test validations
    }
    
    /**
     * Upload message mms attachment
     *
     * Upload a new file to mms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadMessageMMSAttachmentTest() throws ApiException {
        File file = null;
        UploadMessageAttachmentResponse response = api.uploadMessageMMSAttachment(file);

        // TODO: test validations
    }
    
}
