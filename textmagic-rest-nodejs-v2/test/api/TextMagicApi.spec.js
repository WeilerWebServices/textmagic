/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TextmagicClient.TextMagicApi();
  });

  describe('(package)', function() {
    describe('TextMagicApi', function() {
      describe('assignContactsToList', function() {
        it('should call assignContactsToList successfully', function(done) {
          // TODO: uncomment, update parameter values for assignContactsToList call and complete the assertions
          /*
          var assignContactsToListInputObject = new TextmagicClient.AssignContactsToListInputObject();
          assignContactsToListInputObject.contacts = "318,454,30091";
          var id = 1;

          instance.assignContactsToList(assignContactsToListInputObject, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('blockContact', function() {
        it('should call blockContact successfully', function(done) {
          // TODO: uncomment, update parameter values for blockContact call and complete the assertions
          /*
          var blockContactInputObject = new TextmagicClient.BlockContactInputObject();
          blockContactInputObject.phone = "447860021130";

          instance.blockContact(blockContactInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('buyDedicatedNumber', function() {
        it('should call buyDedicatedNumber successfully', function(done) {
          // TODO: uncomment, update parameter values for buyDedicatedNumber call
          /*
          var buyDedicatedNumberInputObject = new TextmagicClient.BuyDedicatedNumberInputObject();
          buyDedicatedNumberInputObject.phone = "447860021130";
          buyDedicatedNumberInputObject.country = "AU";
          buyDedicatedNumberInputObject.userId = 5501;

          instance.buyDedicatedNumber(buyDedicatedNumberInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelVerification', function() {
        it('should call cancelVerification successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelVerification call
          /*
          var verifyId = "123e4567-e89b-12d3-a456-426655440000";

          instance.cancelVerification(verifyId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkPhoneVerificationCodeTFA', function() {
        it('should call checkPhoneVerificationCodeTFA successfully', function(done) {
          // TODO: uncomment, update parameter values for checkPhoneVerificationCodeTFA call
          /*
          var checkPhoneVerificationCodeTFAInputObject = new TextmagicClient.CheckPhoneVerificationCodeTFAInputObject();
          checkPhoneVerificationCodeTFAInputObject.code = 1234;
          checkPhoneVerificationCodeTFAInputObject.verifyId = "123e4567-e89b-12d3-a456-426655440000";

          instance.checkPhoneVerificationCodeTFA(checkPhoneVerificationCodeTFAInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('clearAndAssignContactsToList', function() {
        it('should call clearAndAssignContactsToList successfully', function(done) {
          // TODO: uncomment, update parameter values for clearAndAssignContactsToList call and complete the assertions
          /*
          var clearAndAssignContactsToListInputObject = new TextmagicClient.ClearAndAssignContactsToListInputObject();
          clearAndAssignContactsToListInputObject.contacts = "1,2";
          var id = 1;

          instance.clearAndAssignContactsToList(clearAndAssignContactsToListInputObject, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('closeChatsBulk', function() {
        it('should call closeChatsBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for closeChatsBulk call
          /*
          var closeChatsBulkInputObject = new TextmagicClient.CloseChatsBulkInputObject();
          closeChatsBulkInputObject.ids = "1,2,3";
          closeChatsBulkInputObject.all = false;

          instance.closeChatsBulk(closeChatsBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('closeReadChats', function() {
        it('should call closeReadChats successfully', function(done) {
          // TODO: uncomment closeReadChats call
          /*

          instance.closeReadChats().then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('closeSubaccount', function() {
        it('should call closeSubaccount successfully', function(done) {
          // TODO: uncomment, update parameter values for closeSubaccount call
          /*
          var id = 1;

          instance.closeSubaccount(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createContact', function() {
        it('should call createContact successfully', function(done) {
          // TODO: uncomment, update parameter values for createContact call and complete the assertions
          /*
          var createContactInputObject = new TextmagicClient.CreateContactInputObject();
          createContactInputObject.firstName = "Charles";
          createContactInputObject.lastName = "Conway";
          createContactInputObject.phone = "447860021130";
          createContactInputObject.email = "charles@example.com";
          createContactInputObject.companyName = "Example Ltd.";
          createContactInputObject.lists = "10541,18599";
          createContactInputObject.favorited = false;
          createContactInputObject.blocked = false;
          createContactInputObject.type = 1;
          createContactInputObject.customFieldValues = [new TextmagicClient.CustomFieldListItem()];
          createContactInputObject.customFieldValues[0].id = 515;
          createContactInputObject.customFieldValues[0].value = "Custom value";
          createContactInputObject.local = 0;
          createContactInputObject.country = "US";

          instance.createContact(createContactInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createContactNote', function() {
        it('should call createContactNote successfully', function(done) {
          // TODO: uncomment, update parameter values for createContactNote call and complete the assertions
          /*
          var createContactNoteInputObject = new TextmagicClient.CreateContactNoteInputObject();
          createContactNoteInputObject.note = "My new note";
          var id = 1;

          instance.createContactNote(createContactNoteInputObject, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCustomField', function() {
        it('should call createCustomField successfully', function(done) {
          // TODO: uncomment, update parameter values for createCustomField call and complete the assertions
          /*
          var createCustomFieldInputObject = new TextmagicClient.CreateCustomFieldInputObject();
          createCustomFieldInputObject.name = "DOB";

          instance.createCustomField(createCustomFieldInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createList', function() {
        it('should call createList successfully', function(done) {
          // TODO: uncomment, update parameter values for createList call and complete the assertions
          /*
          var createListInputObject = new TextmagicClient.CreateListInputObject();
          createListInputObject.name = "Private list";
          createListInputObject.shared = false;
          createListInputObject.favorited = false;
          createListInputObject.isDefault = false;

          instance.createList(createListInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTemplate', function() {
        it('should call createTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for createTemplate call and complete the assertions
          /*
          var createTemplateInputObject = new TextmagicClient.CreateTemplateInputObject();
          createTemplateInputObject.name = "New template name";
          createTemplateInputObject.content = "New template content";

          instance.createTemplate(createTemplateInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAllContacts', function() {
        it('should call deleteAllContacts successfully', function(done) {
          // TODO: uncomment deleteAllContacts call
          /*

          instance.deleteAllContacts().then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAllOutboundMessages', function() {
        it('should call deleteAllOutboundMessages successfully', function(done) {
          // TODO: uncomment deleteAllOutboundMessages call
          /*

          instance.deleteAllOutboundMessages().then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAvatar', function() {
        it('should call deleteAvatar successfully', function(done) {
          // TODO: uncomment deleteAvatar call
          /*

          instance.deleteAvatar().then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteChatMessages', function() {
        it('should call deleteChatMessages successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteChatMessages call
          /*
          var deleteChatMessagesBulkInputObject = new TextmagicClient.DeleteChatMessagesBulkInputObject();
          deleteChatMessagesBulkInputObject.inboundIds = "1,2,3,4";
          deleteChatMessagesBulkInputObject.sentIds = "1,2,3,4";
          deleteChatMessagesBulkInputObject.callsIds = "1,2,3,4";
          deleteChatMessagesBulkInputObject.all = false;
          var id = 1;

          instance.deleteChatMessages(deleteChatMessagesBulkInputObject, id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteChatsBulk', function() {
        it('should call deleteChatsBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteChatsBulk call
          /*
          var deleteChatsBulkInputObject = new TextmagicClient.DeleteChatsBulkInputObject();
          deleteChatsBulkInputObject.ids = "1,2,3";
          deleteChatsBulkInputObject.all = false;
          deleteChatsBulkInputObject.status = "a";

          instance.deleteChatsBulk(deleteChatsBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteContact', function() {
        it('should call deleteContact successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteContact call
          /*
          var id = 1;

          instance.deleteContact(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteContactAvatar', function() {
        it('should call deleteContactAvatar successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteContactAvatar call
          /*
          var id = 1;

          instance.deleteContactAvatar(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteContactNote', function() {
        it('should call deleteContactNote successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteContactNote call
          /*
          var id = 1;

          instance.deleteContactNote(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteContactNotesBulk', function() {
        it('should call deleteContactNotesBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteContactNotesBulk call
          /*
          var id = 1;
          var deleteContactNotesBulkInputObject = new TextmagicClient.DeleteContactNotesBulkInputObject();
          deleteContactNotesBulkInputObject.ids = "1,2,3";
          deleteContactNotesBulkInputObject.all = true;

          instance.deleteContactNotesBulk(id, deleteContactNotesBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteContactsByIds', function() {
        it('should call deleteContactsByIds successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteContactsByIds call
          /*
          var deleteContactsByIdsInputObject = new TextmagicClient.DeleteContactsByIdsInputObject();
          deleteContactsByIdsInputObject.ids = "1,2,3";
          deleteContactsByIdsInputObject.all = false;

          instance.deleteContactsByIds(deleteContactsByIdsInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteContactsFromList', function() {
        it('should call deleteContactsFromList successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteContactsFromList call
          /*
          var deleteContacsFromListObject = new TextmagicClient.DeleteContacsFromListObject();
          deleteContacsFromListObject.contacts = "318,454,30091";
          var id = 1;

          instance.deleteContactsFromList(deleteContacsFromListObject, id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteCustomField', function() {
        it('should call deleteCustomField successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCustomField call
          /*
          var id = 1;

          instance.deleteCustomField(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDedicatedNumber', function() {
        it('should call deleteDedicatedNumber successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDedicatedNumber call
          /*
          var id = 1;

          instance.deleteDedicatedNumber(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteInboundMessage', function() {
        it('should call deleteInboundMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteInboundMessage call
          /*
          var id = 1;

          instance.deleteInboundMessage(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteInboundMessagesBulk', function() {
        it('should call deleteInboundMessagesBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteInboundMessagesBulk call
          /*
          var deleteInboundMessagesBulkInputObject = new TextmagicClient.DeleteInboundMessagesBulkInputObject();
          deleteInboundMessagesBulkInputObject.ids = "1,2,3";
          deleteInboundMessagesBulkInputObject.all = 0;

          instance.deleteInboundMessagesBulk(deleteInboundMessagesBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteList', function() {
        it('should call deleteList successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteList call
          /*
          var id = 1;

          instance.deleteList(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteListAvatar', function() {
        it('should call deleteListAvatar successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteListAvatar call
          /*
          var id = 1;

          instance.deleteListAvatar(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteListContactsBulk', function() {
        it('should call deleteListContactsBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteListContactsBulk call
          /*
          var deleteListContactsBulkInputObject = new TextmagicClient.DeleteListContactsBulkInputObject();
          deleteListContactsBulkInputObject.ids = "1,2,3";
          deleteListContactsBulkInputObject.all = 0;
          var id = 1;

          instance.deleteListContactsBulk(deleteListContactsBulkInputObject, id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteListsBulk', function() {
        it('should call deleteListsBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteListsBulk call
          /*
          var deleteListsBulkInputObject = new TextmagicClient.DeleteListsBulkInputObject();
          deleteListsBulkInputObject.ids = "1,2,3";
          deleteListsBulkInputObject.all = 0;

          instance.deleteListsBulk(deleteListsBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMessageSession', function() {
        it('should call deleteMessageSession successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMessageSession call
          /*
          var id = 1;

          instance.deleteMessageSession(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMessageSessionsBulk', function() {
        it('should call deleteMessageSessionsBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMessageSessionsBulk call
          /*
          var deleteMessageSessionsBulkInputObject = new TextmagicClient.DeleteMessageSessionsBulkInputObject();
          deleteMessageSessionsBulkInputObject.ids = "1,2,3";
          deleteMessageSessionsBulkInputObject.all = 0;

          instance.deleteMessageSessionsBulk(deleteMessageSessionsBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOutboundMessage', function() {
        it('should call deleteOutboundMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOutboundMessage call
          /*
          var id = 1;

          instance.deleteOutboundMessage(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOutboundMessagesBulk', function() {
        it('should call deleteOutboundMessagesBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOutboundMessagesBulk call
          /*
          var deleteOutboundMessagesBulkInputObject = new TextmagicClient.DeleteOutboundMessagesBulkInputObject();
          deleteOutboundMessagesBulkInputObject.ids = "1,2,3";
          deleteOutboundMessagesBulkInputObject.all = 1;

          instance.deleteOutboundMessagesBulk(deleteOutboundMessagesBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteScheduledMessage', function() {
        it('should call deleteScheduledMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteScheduledMessage call
          /*
          var id = 1;

          instance.deleteScheduledMessage(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteScheduledMessagesBulk', function() {
        it('should call deleteScheduledMessagesBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteScheduledMessagesBulk call
          /*
          var deleteScheduledMessagesBulkInputObject = new TextmagicClient.DeleteScheduledMessagesBulkInputObject();
          deleteScheduledMessagesBulkInputObject.ids = "1,2,3";
          deleteScheduledMessagesBulkInputObject.all = 0;
          deleteScheduledMessagesBulkInputObject.status = "";

          instance.deleteScheduledMessagesBulk(deleteScheduledMessagesBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteSenderId', function() {
        it('should call deleteSenderId successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteSenderId call
          /*
          var id = 1;

          instance.deleteSenderId(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTemplate', function() {
        it('should call deleteTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTemplate call
          /*
          var id = 1;

          instance.deleteTemplate(id).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTemplatesBulk', function() {
        it('should call deleteTemplatesBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTemplatesBulk call
          /*
          var deleteTemplatesBulkInputObject = new TextmagicClient.DeleteTemplatesBulkInputObject();
          deleteTemplatesBulkInputObject.ids = "1,2,3";
          deleteTemplatesBulkInputObject.all = true;

          instance.deleteTemplatesBulk(deleteTemplatesBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('doCarrierLookup', function() {
        it('should call doCarrierLookup successfully', function(done) {
          // TODO: uncomment, update parameter values for doCarrierLookup call and complete the assertions
          /*
          var phone = "447860021130";
          var opts = {};
          opts.country = "GB";

          instance.doCarrierLookup(phone, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.DoCarrierLookupResponse);
            expect(data.cost).to.be.a('number');
            expect(data.cost).to.be(0.04);
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            expect(data.local).to.be.a('string');
            expect(data.local).to.be("07860");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("mobile");
            expect(data.carrier).to.be.a('string');
            expect(data.carrier).to.be("Telefonica UK");
            expect(data.number164).to.be.a('string');
            expect(data.number164).to.be("447860021130");
            expect(data.valid).to.be.a('boolean');
            expect(data.valid).to.be(true);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('doEmailLookup', function() {
        it('should call doEmailLookup successfully', function(done) {
          // TODO: uncomment, update parameter values for doEmailLookup call and complete the assertions
          /*
          var email = "john@sample.com";

          instance.doEmailLookup(email).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.DoEmailLookupResponse);
            expect(data.address).to.be.a('string');
            expect(data.address).to.be("john@sample.com");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("valid");
            expect(data.deliverability).to.be.a('string');
            expect(data.deliverability).to.be("undeliverable");
            expect(data.reason).to.be.a('string');
            expect(data.reason).to.be("No MX host found");
            expect(data.risk).to.be.a('string');
            expect(data.risk).to.be("high");
            expect(data.addressType).to.be.a('string');
            expect(data.addressType).to.be("corporate");
            expect(data.isDisposableAddress).to.be.a('boolean');
            expect(data.isDisposableAddress).to.be(false);
            expect(data.suggestion).to.be.a('string');
            expect(data.suggestion).to.be("john@sample.com");
            expect(data.emailRole).to.be.a('string');
            expect(data.emailRole).to.be("admin");
            expect(data.localPart).to.be.a('string');
            expect(data.localPart).to.be("john");
            expect(data.domainPart).to.be.a('string');
            expect(data.domainPart).to.be("sample.com");
            expect(data.exchange).to.be.a('string');
            expect(data.exchange).to.be("mx1.textmagic.com");
            expect(data.preference).to.be.a('number');
            expect(data.preference).to.be(10);
            expect(data.isInWhiteList).to.be.a('boolean');
            expect(data.isInWhiteList).to.be(false);
            expect(data.isInBlackList).to.be.a('boolean');
            expect(data.isInBlackList).to.be(false);
            expect(data.hasMx).to.be.a('boolean');
            expect(data.hasMx).to.be(true);
            expect(data.hasAa).to.be.a('boolean');
            expect(data.hasAa).to.be(true);
            expect(data.hasAaaa).to.be.a('boolean');
            expect(data.hasAaaa).to.be(true);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllBulkSessions', function() {
        it('should call getAllBulkSessions successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllBulkSessions call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getAllBulkSessions(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetAllBulkSessionsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.BulkSession);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(599);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("n");
                expect(data.itemsProcessed).to.be.a('number');
                expect(data.itemsProcessed).to.be(564);
                expect(data.itemsTotal).to.be.a('number');
                expect(data.itemsTotal).to.be(2);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2015-01-08T06:13:21+0000);
                expect(data.session).to.be.a(TextmagicClient.MessageSession);
                      expect(data.session.id).to.be.a('number');
                  expect(data.session.id).to.be(4991);
                  expect(data.session.startTime).to.be.a('string');
                  expect(data.session.startTime).to.be("2015-06-19T09:48:24+0000");
                  expect(data.session.text).to.be.a('string');
                  expect(data.session.text).to.be("Hello {First name}!");
                  expect(data.session.source).to.be.a('string');
                  expect(data.session.source).to.be("O");
                  expect(data.session.referenceId).to.be.a('string');
                  expect(data.session.referenceId).to.be("my_reference_id_4991");
                  expect(data.session.price).to.be.a('number');
                  expect(data.session.price).to.be(3.45);
                  expect(data.session.numbersCount).to.be.a('number');
                  expect(data.session.numbersCount).to.be(18);
                  expect(data.session.destination).to.be.a('string');
                  expect(data.session.destination).to.be("t");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("I Love TextMagic!");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllChats', function() {
        it('should call getAllChats successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllChats call and complete the assertions
          /*
          var opts = {};
          opts.status = "a";
          opts.page = 1;
          opts.limit = 10;
          opts.orderBy = "id";
          opts.voice = 0;
          opts.flat = 0;

          instance.getAllChats(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetAllChatsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Chat);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(43328);
                expect(data.originalId).to.be.a('number');
                expect(data.originalId).to.be(43328);
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.contact).to.be.a(TextmagicClient.Contact);
                      expect(data.contact.id).to.be.a('number');
                  expect(data.contact.id).to.be(27074);
                  expect(data.contact.favorited).to.be.a('boolean');
                  expect(data.contact.favorited).to.be(true);
                  expect(data.contact.blocked).to.be.a('boolean');
                  expect(data.contact.blocked).to.be(true);
                  expect(data.contact.firstName).to.be.a('string');
                  expect(data.contact.firstName).to.be("Charles");
                  expect(data.contact.lastName).to.be.a('string');
                  expect(data.contact.lastName).to.be("Conway");
                  expect(data.contact.companyName).to.be.a('string');
                  expect(data.contact.companyName).to.be("Example Ltd.");
                  expect(data.contact.phone).to.be.a('string');
                  expect(data.contact.phone).to.be("447860021130");
                  expect(data.contact.email).to.be.a('string');
                  expect(data.contact.email).to.be("charles@example.com");
                  expect(data.contact.country).to.be.a(TextmagicClient.Country);
                        expect(data.contact.country.id).to.be.a('string');
                    expect(data.contact.country.id).to.be("US");
                    expect(data.contact.country.name).to.be.a('string');
                    expect(data.contact.country.name).to.be("India");
                  {
                    let dataCtr = data.contact.customFields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.ContactCustomField);
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
                      expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                            expect(data.userCustomField.id).to.be.a('number');
                        expect(data.userCustomField.id).to.be(23);
                        expect(data.userCustomField.name).to.be.a('string');
                        expect(data.userCustomField.name).to.be("DOB");
                        expect(data.userCustomField.createdAt).to.be.a(Date);
                        expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                    }
                  }
                  expect(data.contact.user).to.be.a(TextmagicClient.User);
                        expect(data.contact.user.id).to.be.a('number');
                    expect(data.contact.user.id).to.be(305);
                    expect(data.contact.user.displayTimeFormat).to.be.a('string');
                    expect(data.contact.user.displayTimeFormat).to.be("24h");
                    expect(data.contact.user.username).to.be.a('string');
                    expect(data.contact.user.username).to.be("charles.conway");
                    expect(data.contact.user.firstName).to.be.a('string');
                    expect(data.contact.user.firstName).to.be("Charles");
                    expect(data.contact.user.lastName).to.be.a('string');
                    expect(data.contact.user.lastName).to.be("Conway");
                    expect(data.contact.user.email).to.be.a('string');
                    expect(data.contact.user.email).to.be("charles@example.com");
                    expect(data.contact.user.status).to.be.a('string');
                    expect(data.contact.user.status).to.be("A");
                    expect(data.contact.user.balance).to.be.a('number');
                    expect(data.contact.user.balance).to.be(208.64);
                    expect(data.contact.user.phone).to.be.a('string');
                    expect(data.contact.user.phone).to.be("447860021130");
                    expect(data.contact.user.company).to.be.a('string');
                    expect(data.contact.user.company).to.be("Example Ltd.");
                    expect(data.contact.user.currency).to.be.a(TextmagicClient.Currency);
                          expect(data.contact.user.currency.id).to.be.a('string');
                      expect(data.contact.user.currency.id).to.be("GBP");
                      expect(data.contact.user.currency.unicodeSymbol).to.be.a('string');
                      expect(data.contact.user.currency.unicodeSymbol).to.be("£");
                      expect(data.contact.user.currency.htmlSymbol).to.be.a('string');
                      expect(data.contact.user.currency.htmlSymbol).to.be("&pound;");
                    expect(data.contact.user.country).to.be.a(TextmagicClient.Country);
                          expect(data.contact.user.country.id).to.be.a('string');
                      expect(data.contact.user.country.id).to.be("US");
                      expect(data.contact.user.country.name).to.be.a('string');
                      expect(data.contact.user.country.name).to.be("India");
                    expect(data.contact.user.timezone).to.be.a(TextmagicClient.Timezone);
                          expect(data.contact.user.timezone.id).to.be.a('number');
                      expect(data.contact.user.timezone.id).to.be(55);
                      expect(data.contact.user.timezone.area).to.be.a('string');
                      expect(data.contact.user.timezone.area).to.be("Europe");
                      expect(data.contact.user.timezone.dst).to.be.a('number');
                      expect(data.contact.user.timezone.dst).to.be(1);
                      expect(data.contact.user.timezone.offset).to.be.a('number');
                      expect(data.contact.user.timezone.offset).to.be(10800);
                      expect(data.contact.user.timezone.timezone).to.be.a('string');
                      expect(data.contact.user.timezone.timezone).to.be("Europe\/Tallinn");
                    expect(data.contact.user.subaccountType).to.be.a('string');
                    expect(data.contact.user.subaccountType).to.be("P");
                    expect(data.contact.user.emailAccepted).to.be.a('boolean');
                    expect(data.contact.user.emailAccepted).to.be(true);
                    expect(data.contact.user.phoneAccepted).to.be.a('boolean');
                    expect(data.contact.user.phoneAccepted).to.be(true);
                    expect(data.contact.user.avatar).to.be.a(TextmagicClient.UserImage);
                          expect(data.contact.user.avatar.href).to.be.a('string');
                      expect(data.contact.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  {
                    let dataCtr = data.contact.lists;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.List);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(715);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("Private list");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("Private contacts of C. R. Conway");
                      expect(data.favorited).to.be.a('boolean');
                      expect(data.favorited).to.be(false);
                      expect(data.membersCount).to.be.a('number');
                      expect(data.membersCount).to.be(332);
                      expect(data.user).to.be.a(TextmagicClient.User);
                            expect(data.user.id).to.be.a('number');
                        expect(data.user.id).to.be(305);
                        expect(data.user.displayTimeFormat).to.be.a('string');
                        expect(data.user.displayTimeFormat).to.be("24h");
                        expect(data.user.username).to.be.a('string');
                        expect(data.user.username).to.be("charles.conway");
                        expect(data.user.firstName).to.be.a('string');
                        expect(data.user.firstName).to.be("Charles");
                        expect(data.user.lastName).to.be.a('string');
                        expect(data.user.lastName).to.be("Conway");
                        expect(data.user.email).to.be.a('string');
                        expect(data.user.email).to.be("charles@example.com");
                        expect(data.user.status).to.be.a('string');
                        expect(data.user.status).to.be("A");
                        expect(data.user.balance).to.be.a('number');
                        expect(data.user.balance).to.be(208.64);
                        expect(data.user.phone).to.be.a('string');
                        expect(data.user.phone).to.be("447860021130");
                        expect(data.user.company).to.be.a('string');
                        expect(data.user.company).to.be("Example Ltd.");
                        expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                              expect(data.user.currency.id).to.be.a('string');
                          expect(data.user.currency.id).to.be("GBP");
                          expect(data.user.currency.unicodeSymbol).to.be.a('string');
                          expect(data.user.currency.unicodeSymbol).to.be("£");
                          expect(data.user.currency.htmlSymbol).to.be.a('string');
                          expect(data.user.currency.htmlSymbol).to.be("&pound;");
                        expect(data.user.country).to.be.a(TextmagicClient.Country);
                              expect(data.user.country.id).to.be.a('string');
                          expect(data.user.country.id).to.be("US");
                          expect(data.user.country.name).to.be.a('string');
                          expect(data.user.country.name).to.be("India");
                        expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                              expect(data.user.timezone.id).to.be.a('number');
                          expect(data.user.timezone.id).to.be(55);
                          expect(data.user.timezone.area).to.be.a('string');
                          expect(data.user.timezone.area).to.be("Europe");
                          expect(data.user.timezone.dst).to.be.a('number');
                          expect(data.user.timezone.dst).to.be(1);
                          expect(data.user.timezone.offset).to.be.a('number');
                          expect(data.user.timezone.offset).to.be(10800);
                          expect(data.user.timezone.timezone).to.be.a('string');
                          expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                        expect(data.user.subaccountType).to.be.a('string');
                        expect(data.user.subaccountType).to.be("P");
                        expect(data.user.emailAccepted).to.be.a('boolean');
                        expect(data.user.emailAccepted).to.be(true);
                        expect(data.user.phoneAccepted).to.be.a('boolean');
                        expect(data.user.phoneAccepted).to.be(true);
                        expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                              expect(data.user.avatar.href).to.be.a('string');
                          expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                      expect(data.service).to.be.a('boolean');
                      expect(data.service).to.be(false);
                      expect(data.shared).to.be.a('boolean');
                      expect(data.shared).to.be(false);
                      expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                            expect(data.avatar.href).to.be.a('string');
                        expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                      expect(data.isDefault).to.be.a('boolean');
                      expect(data.isDefault).to.be(false);
                    }
                  }
                  expect(data.contact.phoneType).to.be.a('string');
                  expect(data.contact.phoneType).to.be("");
                  expect(data.contact.avatar).to.be.a(TextmagicClient.ContactImage);
                        expect(data.contact.avatar.href).to.be.a('string');
                    expect(data.contact.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  {
                    let dataCtr = data.contact.notes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.ContactNote);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(5);
                      expect(data.createdAt).to.be.a(Date);
                      expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                      expect(data.note).to.be.a('string');
                      expect(data.note).to.be("Test note");
                      expect(data.user).to.be.a(TextmagicClient.User);
                            expect(data.user.id).to.be.a('number');
                        expect(data.user.id).to.be(305);
                        expect(data.user.displayTimeFormat).to.be.a('string');
                        expect(data.user.displayTimeFormat).to.be("24h");
                        expect(data.user.username).to.be.a('string');
                        expect(data.user.username).to.be("charles.conway");
                        expect(data.user.firstName).to.be.a('string');
                        expect(data.user.firstName).to.be("Charles");
                        expect(data.user.lastName).to.be.a('string');
                        expect(data.user.lastName).to.be("Conway");
                        expect(data.user.email).to.be.a('string');
                        expect(data.user.email).to.be("charles@example.com");
                        expect(data.user.status).to.be.a('string');
                        expect(data.user.status).to.be("A");
                        expect(data.user.balance).to.be.a('number');
                        expect(data.user.balance).to.be(208.64);
                        expect(data.user.phone).to.be.a('string');
                        expect(data.user.phone).to.be("447860021130");
                        expect(data.user.company).to.be.a('string');
                        expect(data.user.company).to.be("Example Ltd.");
                        expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                              expect(data.user.currency.id).to.be.a('string');
                          expect(data.user.currency.id).to.be("GBP");
                          expect(data.user.currency.unicodeSymbol).to.be.a('string');
                          expect(data.user.currency.unicodeSymbol).to.be("£");
                          expect(data.user.currency.htmlSymbol).to.be.a('string');
                          expect(data.user.currency.htmlSymbol).to.be("&pound;");
                        expect(data.user.country).to.be.a(TextmagicClient.Country);
                              expect(data.user.country.id).to.be.a('string');
                          expect(data.user.country.id).to.be("US");
                          expect(data.user.country.name).to.be.a('string');
                          expect(data.user.country.name).to.be("India");
                        expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                              expect(data.user.timezone.id).to.be.a('number');
                          expect(data.user.timezone.id).to.be(55);
                          expect(data.user.timezone.area).to.be.a('string');
                          expect(data.user.timezone.area).to.be("Europe");
                          expect(data.user.timezone.dst).to.be.a('number');
                          expect(data.user.timezone.dst).to.be(1);
                          expect(data.user.timezone.offset).to.be.a('number');
                          expect(data.user.timezone.offset).to.be(10800);
                          expect(data.user.timezone.timezone).to.be.a('string');
                          expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                        expect(data.user.subaccountType).to.be.a('string');
                        expect(data.user.subaccountType).to.be("P");
                        expect(data.user.emailAccepted).to.be.a('boolean');
                        expect(data.user.emailAccepted).to.be(true);
                        expect(data.user.phoneAccepted).to.be.a('boolean');
                        expect(data.user.phoneAccepted).to.be(true);
                        expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                              expect(data.user.avatar.href).to.be.a('string');
                          expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    }
                  }
                expect(data.unsubscribedContactId).to.be.a('number');
                expect(data.unsubscribedContactId).to.be(546);
                expect(data.unread).to.be.a('number');
                expect(data.unread).to.be(5);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2015-01-08T06:13:21+0000);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("a");
                expect(data.mute).to.be.a('number');
                expect(data.mute).to.be(0);
                expect(data.lastMessage).to.be.a('string');
                expect(data.lastMessage).to.be("Hello world!");
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("ci");
                expect(data.from).to.be.a('string');
                expect(data.from).to.be("447860021130");
                expect(data.mutedUntil).to.be.a(Date);
                expect(data.mutedUntil).to.be(2019-10-10T14:44:00+0000);
                expect(data.timeLeftMute).to.be.a('number');
                expect(data.timeLeftMute).to.be(17988);
                expect(data.country).to.be.a(TextmagicClient.Country);
                      expect(data.country.id).to.be.a('string');
                  expect(data.country.id).to.be("US");
                  expect(data.country.name).to.be.a('string');
                  expect(data.country.name).to.be("India");
                expect(data.pinned).to.be.a('boolean');
                expect(data.pinned).to.be(true);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllInboundMessages', function() {
        it('should call getAllInboundMessages successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllInboundMessages call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.orderBy = "id";
          opts.direction = "desc";

          instance.getAllInboundMessages(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetAllInboundMessagesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageIn);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1782832);
                expect(data.sender).to.be.a('string');
                expect(data.sender).to.be("447860021130");
                expect(data.receiver).to.be.a('string');
                expect(data.receiver).to.be("447624800500");
                expect(data.messageTime).to.be.a(Date);
                expect(data.messageTime).to.be(2012-11-28T18:38:28+0000);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("I Love TextMagic!");
                expect(data.contactId).to.be.a('number');
                expect(data.contactId).to.be(1);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Charles");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("charles@example.com");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllMessageSessions', function() {
        it('should call getAllMessageSessions successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllMessageSessions call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getAllMessageSessions(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetAllMessageSessionsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageSession);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(4991);
                expect(data.startTime).to.be.a('string');
                expect(data.startTime).to.be("2015-06-19T09:48:24+0000");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("Hello {First name}!");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("O");
                expect(data.referenceId).to.be.a('string');
                expect(data.referenceId).to.be("my_reference_id_4991");
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(3.45);
                expect(data.numbersCount).to.be.a('number');
                expect(data.numbersCount).to.be(18);
                expect(data.destination).to.be.a('string');
                expect(data.destination).to.be("t");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllOutboundMessages', function() {
        it('should call getAllOutboundMessages successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllOutboundMessages call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.lastId = 56;

          instance.getAllOutboundMessages(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetAllOutboundMessagesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageOut);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(4991);
                expect(data.sender).to.be.a('string');
                expect(data.sender).to.be("447624800500");
                expect(data.receiver).to.be.a('string');
                expect(data.receiver).to.be("447860021130");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("I love TextMagic!");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("d");
                expect(data.contactId).to.be.a('number');
                expect(data.contactId).to.be(2764);
                expect(data.sessionId).to.be.a('number');
                expect(data.sessionId).to.be(3122);
                expect(data.messageTime).to.be.a(Date);
                expect(data.messageTime).to.be(2019-08-12T11:43:37+0000);
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.charset).to.be.a('string');
                expect(data.charset).to.be("ISO-8859-1");
                expect(data.charsetLabel).to.be.a('string');
                expect(data.charsetLabel).to.be("ISO-8859-1");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("John");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("US");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447624800500");
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.025);
                expect(data.partsCount).to.be.a('number');
                expect(data.partsCount).to.be(6);
                expect(data.fromEmail).to.be.a('string');
                expect(data.fromEmail).to.be("test@email.com");
                expect(data.fromNumber).to.be.a('string');
                expect(data.fromNumber).to.be("447624800500");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllScheduledMessages', function() {
        it('should call getAllScheduledMessages successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllScheduledMessages call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.status = "x";
          opts.orderBy = "id";
          opts.direction = "desc";

          instance.getAllScheduledMessages(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetAllScheduledMessagesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessagesIcs);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(562);
                expect(data.nextSend).to.be.a(Date);
                expect(data.nextSend).to.be(2014-10-13T05:00:00+0000);
                expect(data.rrule).to.be.a('string');
                expect(data.rrule).to.be("FREQ=DAILY;INTERVAL=2;COUNT=5;");
                expect(data.session).to.be.a(TextmagicClient.MessageSession);
                      expect(data.session.id).to.be.a('number');
                  expect(data.session.id).to.be(4991);
                  expect(data.session.startTime).to.be.a('string');
                  expect(data.session.startTime).to.be("2015-06-19T09:48:24+0000");
                  expect(data.session.text).to.be.a('string');
                  expect(data.session.text).to.be("Hello {First name}!");
                  expect(data.session.source).to.be.a('string');
                  expect(data.session.source).to.be("O");
                  expect(data.session.referenceId).to.be.a('string');
                  expect(data.session.referenceId).to.be("my_reference_id_4991");
                  expect(data.session.price).to.be.a('number');
                  expect(data.session.price).to.be(3.45);
                  expect(data.session.numbersCount).to.be.a('number');
                  expect(data.session.numbersCount).to.be(18);
                  expect(data.session.destination).to.be.a('string');
                  expect(data.session.destination).to.be("t");
                expect(data.lastSent).to.be.a(Date);
                expect(data.lastSent).to.be(2015-06-19T09:48:24+0000);
                expect(data.contactName).to.be.a('string');
                expect(data.contactName).to.be("15 recipients");
                expect(data.parameters).to.be.a(TextmagicClient.MessagesIcsParameters);
                      expect(data.parameters.text).to.be.a('string');
                  expect(data.parameters.text).to.be("I Love TextMagic!");
                  expect(data.parameters.recipients).to.be.a(TextmagicClient.MessagesIcsParametersRecipients);
                        {
                      let dataCtr = data.parameters.recipients.contacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(39318);
                      }
                    }
                    {
                      let dataCtr = data.parameters.recipients.groups;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(39318);
                      }
                    }
                    {
                      let dataCtr = data.parameters.recipients.numbers;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("447860021130");
                      }
                    }
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("once");
                expect(data.summary).to.be.a('string');
                expect(data.summary).to.be("Every 2 weeks on Monday, Tuesday, Thursday at 10:30 (UTC+03:00)");
                expect(data.textParameters).to.be.a(TextmagicClient.MessagesIcsTextParameters);
                      expect(data.textParameters.cost).to.be.a('number');
                  expect(data.textParameters.cost).to.be(0.04);
                  expect(data.textParameters.parts).to.be.a('number');
                  expect(data.textParameters.parts).to.be(6);
                  expect(data.textParameters.chars).to.be.a('number');
                  expect(data.textParameters.chars).to.be(125);
                  expect(data.textParameters.encoding).to.be.a('string');
                  expect(data.textParameters.encoding).to.be("ISO-8859-1");
                  {
                    let dataCtr = data.textParameters.countries;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("US");
                    }
                  }
                  expect(data.textParameters.charsetLabel).to.be.a('string');
                  expect(data.textParameters.charsetLabel).to.be("ISO-8859-1");
                expect(data.firstOccurrence).to.be.a(Date);
                expect(data.firstOccurrence).to.be(2015-06-19T09:48:24+0000);
                expect(data.lastOccurrence).to.be.a(Date);
                expect(data.lastOccurrence).to.be(2015-06-19T09:48:24+0000);
                expect(data.recipientsCount).to.be.a('number');
                expect(data.recipientsCount).to.be(2);
                expect(data.timezone).to.be.a('string');
                expect(data.timezone).to.be("Europe/Tallinn");
                expect(data.completed).to.be.a('boolean');
                expect(data.completed).to.be(true);
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllTemplates', function() {
        it('should call getAllTemplates successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllTemplates call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getAllTemplates(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetAllTemplatesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageTemplate);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(519);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Appointment reminder");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("Hello {First name}!");
                expect(data.lastModified).to.be.a(Date);
                expect(data.lastModified).to.be(2014-09-11T08:12:01+0000);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAvailableDedicatedNumbers', function() {
        it('should call getAvailableDedicatedNumbers successfully', function(done) {
          // TODO: uncomment, update parameter values for getAvailableDedicatedNumbers call and complete the assertions
          /*
          var country = "GB";
          var opts = {};
          opts.prefix = 447155;
          opts.tollfree = 0;

          instance.getAvailableDedicatedNumbers(country, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetAvailableDedicatedNumbersResponse);
            {
              let dataCtr = data.numbers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(2.4);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAvailableSenderSettingOptions', function() {
        it('should call getAvailableSenderSettingOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getAvailableSenderSettingOptions call and complete the assertions
          /*
          var opts = {};
          opts.country = "US";

          instance.getAvailableSenderSettingOptions(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetAvailableSenderSettingOptionsResponse);
            {
              let dataCtr = data.dedicated;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.user;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.shared;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.senderIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBalanceNotificationOptions', function() {
        it('should call getBalanceNotificationOptions successfully', function(done) {
          // TODO: uncomment getBalanceNotificationOptions call and complete the assertions
          /*

          instance.getBalanceNotificationOptions().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetBalanceNotificationOptionsResponse);
            expect(data._1).to.be.a('string');
            expect(data._1).to.be("£1.00");
            expect(data._2).to.be.a('string');
            expect(data._2).to.be("£2.00");
            expect(data._3).to.be.a('string');
            expect(data._3).to.be("£3.00");
            expect(data._5).to.be.a('string');
            expect(data._5).to.be("£5.00");
            expect(data._10).to.be.a('string');
            expect(data._10).to.be("£10.00");
            expect(data._20).to.be.a('string');
            expect(data._20).to.be("£20.00");
            expect(data._30).to.be.a('string');
            expect(data._30).to.be("£30.00");
            expect(data._50).to.be.a('string');
            expect(data._50).to.be("£50.00");
            expect(data._100).to.be.a('string');
            expect(data._100).to.be("£100.00");
            expect(data._500).to.be.a('string');
            expect(data._500).to.be("£500.00");
            expect(data._1000).to.be.a('string');
            expect(data._1000).to.be("£1,000.00");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBalanceNotificationSettings', function() {
        it('should call getBalanceNotificationSettings successfully', function(done) {
          // TODO: uncomment getBalanceNotificationSettings call and complete the assertions
          /*

          instance.getBalanceNotificationSettings().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetBalanceNotificationSettingsResponse);
            expect(data.lowBalanceNotification).to.be.a('boolean');
            expect(data.lowBalanceNotification).to.be(true);
            expect(data.alertBalance).to.be.a('string');
            expect(data.alertBalance).to.be("50");
            expect(data.alertPhone).to.be.a('string');
            expect(data.alertPhone).to.be("447860021130");
            expect(data.alertEmail1).to.be.a('string');
            expect(data.alertEmail1).to.be("test@test.com");
            expect(data.alertEmail2).to.be.a('string');
            expect(data.alertEmail2).to.be("test@test.com");
            expect(data.alertEmail3).to.be.a('string');
            expect(data.alertEmail3).to.be("test@test.com");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBlockedContacts', function() {
        it('should call getBlockedContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for getBlockedContacts call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.query = "query_example";
          opts.orderBy = "id";
          opts.direction = "desc";

          instance.getBlockedContacts(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetBlockedContactsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Contact);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(27074);
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(true);
                expect(data.blocked).to.be.a('boolean');
                expect(data.blocked).to.be(true);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Charles");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.companyName).to.be.a('string');
                expect(data.companyName).to.be("Example Ltd.");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("charles@example.com");
                expect(data.country).to.be.a(TextmagicClient.Country);
                      expect(data.country.id).to.be.a('string');
                  expect(data.country.id).to.be("US");
                  expect(data.country.name).to.be.a('string');
                  expect(data.country.name).to.be("India");
                {
                  let dataCtr = data.customFields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.ContactCustomField);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                          expect(data.userCustomField.id).to.be.a('number');
                      expect(data.userCustomField.id).to.be(23);
                      expect(data.userCustomField.name).to.be.a('string');
                      expect(data.userCustomField.name).to.be("DOB");
                      expect(data.userCustomField.createdAt).to.be.a(Date);
                      expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                  }
                }
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                {
                  let dataCtr = data.lists;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.List);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(715);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("Private list");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("Private contacts of C. R. Conway");
                    expect(data.favorited).to.be.a('boolean');
                    expect(data.favorited).to.be(false);
                    expect(data.membersCount).to.be.a('number');
                    expect(data.membersCount).to.be(332);
                    expect(data.user).to.be.a(TextmagicClient.User);
                          expect(data.user.id).to.be.a('number');
                      expect(data.user.id).to.be(305);
                      expect(data.user.displayTimeFormat).to.be.a('string');
                      expect(data.user.displayTimeFormat).to.be("24h");
                      expect(data.user.username).to.be.a('string');
                      expect(data.user.username).to.be("charles.conway");
                      expect(data.user.firstName).to.be.a('string');
                      expect(data.user.firstName).to.be("Charles");
                      expect(data.user.lastName).to.be.a('string');
                      expect(data.user.lastName).to.be("Conway");
                      expect(data.user.email).to.be.a('string');
                      expect(data.user.email).to.be("charles@example.com");
                      expect(data.user.status).to.be.a('string');
                      expect(data.user.status).to.be("A");
                      expect(data.user.balance).to.be.a('number');
                      expect(data.user.balance).to.be(208.64);
                      expect(data.user.phone).to.be.a('string');
                      expect(data.user.phone).to.be("447860021130");
                      expect(data.user.company).to.be.a('string');
                      expect(data.user.company).to.be("Example Ltd.");
                      expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                            expect(data.user.currency.id).to.be.a('string');
                        expect(data.user.currency.id).to.be("GBP");
                        expect(data.user.currency.unicodeSymbol).to.be.a('string');
                        expect(data.user.currency.unicodeSymbol).to.be("£");
                        expect(data.user.currency.htmlSymbol).to.be.a('string');
                        expect(data.user.currency.htmlSymbol).to.be("&pound;");
                      expect(data.user.country).to.be.a(TextmagicClient.Country);
                            expect(data.user.country.id).to.be.a('string');
                        expect(data.user.country.id).to.be("US");
                        expect(data.user.country.name).to.be.a('string');
                        expect(data.user.country.name).to.be("India");
                      expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                            expect(data.user.timezone.id).to.be.a('number');
                        expect(data.user.timezone.id).to.be(55);
                        expect(data.user.timezone.area).to.be.a('string');
                        expect(data.user.timezone.area).to.be("Europe");
                        expect(data.user.timezone.dst).to.be.a('number');
                        expect(data.user.timezone.dst).to.be(1);
                        expect(data.user.timezone.offset).to.be.a('number');
                        expect(data.user.timezone.offset).to.be(10800);
                        expect(data.user.timezone.timezone).to.be.a('string');
                        expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                      expect(data.user.subaccountType).to.be.a('string');
                      expect(data.user.subaccountType).to.be("P");
                      expect(data.user.emailAccepted).to.be.a('boolean');
                      expect(data.user.emailAccepted).to.be(true);
                      expect(data.user.phoneAccepted).to.be.a('boolean');
                      expect(data.user.phoneAccepted).to.be(true);
                      expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                            expect(data.user.avatar.href).to.be.a('string');
                        expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    expect(data.service).to.be.a('boolean');
                    expect(data.service).to.be(false);
                    expect(data.shared).to.be.a('boolean');
                    expect(data.shared).to.be(false);
                    expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                          expect(data.avatar.href).to.be.a('string');
                      expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    expect(data.isDefault).to.be.a('boolean');
                    expect(data.isDefault).to.be(false);
                  }
                }
                expect(data.phoneType).to.be.a('string');
                expect(data.phoneType).to.be("");
                expect(data.avatar).to.be.a(TextmagicClient.ContactImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                {
                  let dataCtr = data.notes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.ContactNote);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(5);
                    expect(data.createdAt).to.be.a(Date);
                    expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                    expect(data.note).to.be.a('string');
                    expect(data.note).to.be("Test note");
                    expect(data.user).to.be.a(TextmagicClient.User);
                          expect(data.user.id).to.be.a('number');
                      expect(data.user.id).to.be(305);
                      expect(data.user.displayTimeFormat).to.be.a('string');
                      expect(data.user.displayTimeFormat).to.be("24h");
                      expect(data.user.username).to.be.a('string');
                      expect(data.user.username).to.be("charles.conway");
                      expect(data.user.firstName).to.be.a('string');
                      expect(data.user.firstName).to.be("Charles");
                      expect(data.user.lastName).to.be.a('string');
                      expect(data.user.lastName).to.be("Conway");
                      expect(data.user.email).to.be.a('string');
                      expect(data.user.email).to.be("charles@example.com");
                      expect(data.user.status).to.be.a('string');
                      expect(data.user.status).to.be("A");
                      expect(data.user.balance).to.be.a('number');
                      expect(data.user.balance).to.be(208.64);
                      expect(data.user.phone).to.be.a('string');
                      expect(data.user.phone).to.be("447860021130");
                      expect(data.user.company).to.be.a('string');
                      expect(data.user.company).to.be("Example Ltd.");
                      expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                            expect(data.user.currency.id).to.be.a('string');
                        expect(data.user.currency.id).to.be("GBP");
                        expect(data.user.currency.unicodeSymbol).to.be.a('string');
                        expect(data.user.currency.unicodeSymbol).to.be("£");
                        expect(data.user.currency.htmlSymbol).to.be.a('string');
                        expect(data.user.currency.htmlSymbol).to.be("&pound;");
                      expect(data.user.country).to.be.a(TextmagicClient.Country);
                            expect(data.user.country.id).to.be.a('string');
                        expect(data.user.country.id).to.be("US");
                        expect(data.user.country.name).to.be.a('string');
                        expect(data.user.country.name).to.be("India");
                      expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                            expect(data.user.timezone.id).to.be.a('number');
                        expect(data.user.timezone.id).to.be(55);
                        expect(data.user.timezone.area).to.be.a('string');
                        expect(data.user.timezone.area).to.be("Europe");
                        expect(data.user.timezone.dst).to.be.a('number');
                        expect(data.user.timezone.dst).to.be(1);
                        expect(data.user.timezone.offset).to.be.a('number');
                        expect(data.user.timezone.offset).to.be(10800);
                        expect(data.user.timezone.timezone).to.be.a('string');
                        expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                      expect(data.user.subaccountType).to.be.a('string');
                      expect(data.user.subaccountType).to.be("P");
                      expect(data.user.emailAccepted).to.be.a('boolean');
                      expect(data.user.emailAccepted).to.be(true);
                      expect(data.user.phoneAccepted).to.be.a('boolean');
                      expect(data.user.phoneAccepted).to.be(true);
                      expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                            expect(data.user.avatar.href).to.be.a('string');
                        expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  }
                }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBulkSession', function() {
        it('should call getBulkSession successfully', function(done) {
          // TODO: uncomment, update parameter values for getBulkSession call and complete the assertions
          /*
          var id = 1;

          instance.getBulkSession(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.BulkSession);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(599);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("n");
            expect(data.itemsProcessed).to.be.a('number');
            expect(data.itemsProcessed).to.be(564);
            expect(data.itemsTotal).to.be.a('number');
            expect(data.itemsTotal).to.be(2);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(2015-01-08T06:13:21+0000);
            expect(data.session).to.be.a(TextmagicClient.MessageSession);
                  expect(data.session.id).to.be.a('number');
              expect(data.session.id).to.be(4991);
              expect(data.session.startTime).to.be.a('string');
              expect(data.session.startTime).to.be("2015-06-19T09:48:24+0000");
              expect(data.session.text).to.be.a('string');
              expect(data.session.text).to.be("Hello {First name}!");
              expect(data.session.source).to.be.a('string');
              expect(data.session.source).to.be("O");
              expect(data.session.referenceId).to.be.a('string');
              expect(data.session.referenceId).to.be("my_reference_id_4991");
              expect(data.session.price).to.be.a('number');
              expect(data.session.price).to.be(3.45);
              expect(data.session.numbersCount).to.be.a('number');
              expect(data.session.numbersCount).to.be(18);
              expect(data.session.destination).to.be.a('string');
              expect(data.session.destination).to.be("t");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("I Love TextMagic!");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCallbackSettings', function() {
        it('should call getCallbackSettings successfully', function(done) {
          // TODO: uncomment getCallbackSettings call and complete the assertions
          /*

          instance.getCallbackSettings().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetCallbackSettingsResponse);
            expect(data.outUrl).to.be.a('string');
            expect(data.outUrl).to.be("http://www.mysite.com/delivery-callback.php");
            expect(data.inUrl).to.be.a('string');
            expect(data.inUrl).to.be("http://www.mysite.com/incoming-sms-callback.php");
            expect(data.format).to.be.a('string');
            expect(data.format).to.be("m");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getChat', function() {
        it('should call getChat successfully', function(done) {
          // TODO: uncomment, update parameter values for getChat call and complete the assertions
          /*
          var id = 1;

          instance.getChat(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.Chat);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(43328);
            expect(data.originalId).to.be.a('number');
            expect(data.originalId).to.be(43328);
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.contact).to.be.a(TextmagicClient.Contact);
                  expect(data.contact.id).to.be.a('number');
              expect(data.contact.id).to.be(27074);
              expect(data.contact.favorited).to.be.a('boolean');
              expect(data.contact.favorited).to.be(true);
              expect(data.contact.blocked).to.be.a('boolean');
              expect(data.contact.blocked).to.be(true);
              expect(data.contact.firstName).to.be.a('string');
              expect(data.contact.firstName).to.be("Charles");
              expect(data.contact.lastName).to.be.a('string');
              expect(data.contact.lastName).to.be("Conway");
              expect(data.contact.companyName).to.be.a('string');
              expect(data.contact.companyName).to.be("Example Ltd.");
              expect(data.contact.phone).to.be.a('string');
              expect(data.contact.phone).to.be("447860021130");
              expect(data.contact.email).to.be.a('string');
              expect(data.contact.email).to.be("charles@example.com");
              expect(data.contact.country).to.be.a(TextmagicClient.Country);
                    expect(data.contact.country.id).to.be.a('string');
                expect(data.contact.country.id).to.be("US");
                expect(data.contact.country.name).to.be.a('string');
                expect(data.contact.country.name).to.be("India");
              {
                let dataCtr = data.contact.customFields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TextmagicClient.ContactCustomField);
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
                  expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                        expect(data.userCustomField.id).to.be.a('number');
                    expect(data.userCustomField.id).to.be(23);
                    expect(data.userCustomField.name).to.be.a('string');
                    expect(data.userCustomField.name).to.be("DOB");
                    expect(data.userCustomField.createdAt).to.be.a(Date);
                    expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                }
              }
              expect(data.contact.user).to.be.a(TextmagicClient.User);
                    expect(data.contact.user.id).to.be.a('number');
                expect(data.contact.user.id).to.be(305);
                expect(data.contact.user.displayTimeFormat).to.be.a('string');
                expect(data.contact.user.displayTimeFormat).to.be("24h");
                expect(data.contact.user.username).to.be.a('string');
                expect(data.contact.user.username).to.be("charles.conway");
                expect(data.contact.user.firstName).to.be.a('string');
                expect(data.contact.user.firstName).to.be("Charles");
                expect(data.contact.user.lastName).to.be.a('string');
                expect(data.contact.user.lastName).to.be("Conway");
                expect(data.contact.user.email).to.be.a('string');
                expect(data.contact.user.email).to.be("charles@example.com");
                expect(data.contact.user.status).to.be.a('string');
                expect(data.contact.user.status).to.be("A");
                expect(data.contact.user.balance).to.be.a('number');
                expect(data.contact.user.balance).to.be(208.64);
                expect(data.contact.user.phone).to.be.a('string');
                expect(data.contact.user.phone).to.be("447860021130");
                expect(data.contact.user.company).to.be.a('string');
                expect(data.contact.user.company).to.be("Example Ltd.");
                expect(data.contact.user.currency).to.be.a(TextmagicClient.Currency);
                      expect(data.contact.user.currency.id).to.be.a('string');
                  expect(data.contact.user.currency.id).to.be("GBP");
                  expect(data.contact.user.currency.unicodeSymbol).to.be.a('string');
                  expect(data.contact.user.currency.unicodeSymbol).to.be("£");
                  expect(data.contact.user.currency.htmlSymbol).to.be.a('string');
                  expect(data.contact.user.currency.htmlSymbol).to.be("&pound;");
                expect(data.contact.user.country).to.be.a(TextmagicClient.Country);
                      expect(data.contact.user.country.id).to.be.a('string');
                  expect(data.contact.user.country.id).to.be("US");
                  expect(data.contact.user.country.name).to.be.a('string');
                  expect(data.contact.user.country.name).to.be("India");
                expect(data.contact.user.timezone).to.be.a(TextmagicClient.Timezone);
                      expect(data.contact.user.timezone.id).to.be.a('number');
                  expect(data.contact.user.timezone.id).to.be(55);
                  expect(data.contact.user.timezone.area).to.be.a('string');
                  expect(data.contact.user.timezone.area).to.be("Europe");
                  expect(data.contact.user.timezone.dst).to.be.a('number');
                  expect(data.contact.user.timezone.dst).to.be(1);
                  expect(data.contact.user.timezone.offset).to.be.a('number');
                  expect(data.contact.user.timezone.offset).to.be(10800);
                  expect(data.contact.user.timezone.timezone).to.be.a('string');
                  expect(data.contact.user.timezone.timezone).to.be("Europe\/Tallinn");
                expect(data.contact.user.subaccountType).to.be.a('string');
                expect(data.contact.user.subaccountType).to.be("P");
                expect(data.contact.user.emailAccepted).to.be.a('boolean');
                expect(data.contact.user.emailAccepted).to.be(true);
                expect(data.contact.user.phoneAccepted).to.be.a('boolean');
                expect(data.contact.user.phoneAccepted).to.be(true);
                expect(data.contact.user.avatar).to.be.a(TextmagicClient.UserImage);
                      expect(data.contact.user.avatar.href).to.be.a('string');
                  expect(data.contact.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
              {
                let dataCtr = data.contact.lists;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TextmagicClient.List);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(715);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("Private list");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("Private contacts of C. R. Conway");
                  expect(data.favorited).to.be.a('boolean');
                  expect(data.favorited).to.be(false);
                  expect(data.membersCount).to.be.a('number');
                  expect(data.membersCount).to.be(332);
                  expect(data.user).to.be.a(TextmagicClient.User);
                        expect(data.user.id).to.be.a('number');
                    expect(data.user.id).to.be(305);
                    expect(data.user.displayTimeFormat).to.be.a('string');
                    expect(data.user.displayTimeFormat).to.be("24h");
                    expect(data.user.username).to.be.a('string');
                    expect(data.user.username).to.be("charles.conway");
                    expect(data.user.firstName).to.be.a('string');
                    expect(data.user.firstName).to.be("Charles");
                    expect(data.user.lastName).to.be.a('string');
                    expect(data.user.lastName).to.be("Conway");
                    expect(data.user.email).to.be.a('string');
                    expect(data.user.email).to.be("charles@example.com");
                    expect(data.user.status).to.be.a('string');
                    expect(data.user.status).to.be("A");
                    expect(data.user.balance).to.be.a('number');
                    expect(data.user.balance).to.be(208.64);
                    expect(data.user.phone).to.be.a('string');
                    expect(data.user.phone).to.be("447860021130");
                    expect(data.user.company).to.be.a('string');
                    expect(data.user.company).to.be("Example Ltd.");
                    expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                          expect(data.user.currency.id).to.be.a('string');
                      expect(data.user.currency.id).to.be("GBP");
                      expect(data.user.currency.unicodeSymbol).to.be.a('string');
                      expect(data.user.currency.unicodeSymbol).to.be("£");
                      expect(data.user.currency.htmlSymbol).to.be.a('string');
                      expect(data.user.currency.htmlSymbol).to.be("&pound;");
                    expect(data.user.country).to.be.a(TextmagicClient.Country);
                          expect(data.user.country.id).to.be.a('string');
                      expect(data.user.country.id).to.be("US");
                      expect(data.user.country.name).to.be.a('string');
                      expect(data.user.country.name).to.be("India");
                    expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                          expect(data.user.timezone.id).to.be.a('number');
                      expect(data.user.timezone.id).to.be(55);
                      expect(data.user.timezone.area).to.be.a('string');
                      expect(data.user.timezone.area).to.be("Europe");
                      expect(data.user.timezone.dst).to.be.a('number');
                      expect(data.user.timezone.dst).to.be(1);
                      expect(data.user.timezone.offset).to.be.a('number');
                      expect(data.user.timezone.offset).to.be(10800);
                      expect(data.user.timezone.timezone).to.be.a('string');
                      expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                    expect(data.user.subaccountType).to.be.a('string');
                    expect(data.user.subaccountType).to.be("P");
                    expect(data.user.emailAccepted).to.be.a('boolean');
                    expect(data.user.emailAccepted).to.be(true);
                    expect(data.user.phoneAccepted).to.be.a('boolean');
                    expect(data.user.phoneAccepted).to.be(true);
                    expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                          expect(data.user.avatar.href).to.be.a('string');
                      expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  expect(data.service).to.be.a('boolean');
                  expect(data.service).to.be(false);
                  expect(data.shared).to.be.a('boolean');
                  expect(data.shared).to.be(false);
                  expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                        expect(data.avatar.href).to.be.a('string');
                    expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  expect(data.isDefault).to.be.a('boolean');
                  expect(data.isDefault).to.be(false);
                }
              }
              expect(data.contact.phoneType).to.be.a('string');
              expect(data.contact.phoneType).to.be("");
              expect(data.contact.avatar).to.be.a(TextmagicClient.ContactImage);
                    expect(data.contact.avatar.href).to.be.a('string');
                expect(data.contact.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
              {
                let dataCtr = data.contact.notes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TextmagicClient.ContactNote);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(5);
                  expect(data.createdAt).to.be.a(Date);
                  expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                  expect(data.note).to.be.a('string');
                  expect(data.note).to.be("Test note");
                  expect(data.user).to.be.a(TextmagicClient.User);
                        expect(data.user.id).to.be.a('number');
                    expect(data.user.id).to.be(305);
                    expect(data.user.displayTimeFormat).to.be.a('string');
                    expect(data.user.displayTimeFormat).to.be("24h");
                    expect(data.user.username).to.be.a('string');
                    expect(data.user.username).to.be("charles.conway");
                    expect(data.user.firstName).to.be.a('string');
                    expect(data.user.firstName).to.be("Charles");
                    expect(data.user.lastName).to.be.a('string');
                    expect(data.user.lastName).to.be("Conway");
                    expect(data.user.email).to.be.a('string');
                    expect(data.user.email).to.be("charles@example.com");
                    expect(data.user.status).to.be.a('string');
                    expect(data.user.status).to.be("A");
                    expect(data.user.balance).to.be.a('number');
                    expect(data.user.balance).to.be(208.64);
                    expect(data.user.phone).to.be.a('string');
                    expect(data.user.phone).to.be("447860021130");
                    expect(data.user.company).to.be.a('string');
                    expect(data.user.company).to.be("Example Ltd.");
                    expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                          expect(data.user.currency.id).to.be.a('string');
                      expect(data.user.currency.id).to.be("GBP");
                      expect(data.user.currency.unicodeSymbol).to.be.a('string');
                      expect(data.user.currency.unicodeSymbol).to.be("£");
                      expect(data.user.currency.htmlSymbol).to.be.a('string');
                      expect(data.user.currency.htmlSymbol).to.be("&pound;");
                    expect(data.user.country).to.be.a(TextmagicClient.Country);
                          expect(data.user.country.id).to.be.a('string');
                      expect(data.user.country.id).to.be("US");
                      expect(data.user.country.name).to.be.a('string');
                      expect(data.user.country.name).to.be("India");
                    expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                          expect(data.user.timezone.id).to.be.a('number');
                      expect(data.user.timezone.id).to.be(55);
                      expect(data.user.timezone.area).to.be.a('string');
                      expect(data.user.timezone.area).to.be("Europe");
                      expect(data.user.timezone.dst).to.be.a('number');
                      expect(data.user.timezone.dst).to.be(1);
                      expect(data.user.timezone.offset).to.be.a('number');
                      expect(data.user.timezone.offset).to.be(10800);
                      expect(data.user.timezone.timezone).to.be.a('string');
                      expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                    expect(data.user.subaccountType).to.be.a('string');
                    expect(data.user.subaccountType).to.be("P");
                    expect(data.user.emailAccepted).to.be.a('boolean');
                    expect(data.user.emailAccepted).to.be(true);
                    expect(data.user.phoneAccepted).to.be.a('boolean');
                    expect(data.user.phoneAccepted).to.be(true);
                    expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                          expect(data.user.avatar.href).to.be.a('string');
                      expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                }
              }
            expect(data.unsubscribedContactId).to.be.a('number');
            expect(data.unsubscribedContactId).to.be(546);
            expect(data.unread).to.be.a('number');
            expect(data.unread).to.be(5);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(2015-01-08T06:13:21+0000);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("a");
            expect(data.mute).to.be.a('number');
            expect(data.mute).to.be(0);
            expect(data.lastMessage).to.be.a('string');
            expect(data.lastMessage).to.be("Hello world!");
            expect(data.direction).to.be.a('string');
            expect(data.direction).to.be("ci");
            expect(data.from).to.be.a('string');
            expect(data.from).to.be("447860021130");
            expect(data.mutedUntil).to.be.a(Date);
            expect(data.mutedUntil).to.be(2019-10-10T14:44:00+0000);
            expect(data.timeLeftMute).to.be.a('number');
            expect(data.timeLeftMute).to.be(17988);
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            expect(data.pinned).to.be.a('boolean');
            expect(data.pinned).to.be(true);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getChatByPhone', function() {
        it('should call getChatByPhone successfully', function(done) {
          // TODO: uncomment, update parameter values for getChatByPhone call and complete the assertions
          /*
          var phone = "447860021130";
          var opts = {};
          opts.upsert = 0;
          opts.reopen = 0;

          instance.getChatByPhone(phone, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.Chat);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(43328);
            expect(data.originalId).to.be.a('number');
            expect(data.originalId).to.be(43328);
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.contact).to.be.a(TextmagicClient.Contact);
                  expect(data.contact.id).to.be.a('number');
              expect(data.contact.id).to.be(27074);
              expect(data.contact.favorited).to.be.a('boolean');
              expect(data.contact.favorited).to.be(true);
              expect(data.contact.blocked).to.be.a('boolean');
              expect(data.contact.blocked).to.be(true);
              expect(data.contact.firstName).to.be.a('string');
              expect(data.contact.firstName).to.be("Charles");
              expect(data.contact.lastName).to.be.a('string');
              expect(data.contact.lastName).to.be("Conway");
              expect(data.contact.companyName).to.be.a('string');
              expect(data.contact.companyName).to.be("Example Ltd.");
              expect(data.contact.phone).to.be.a('string');
              expect(data.contact.phone).to.be("447860021130");
              expect(data.contact.email).to.be.a('string');
              expect(data.contact.email).to.be("charles@example.com");
              expect(data.contact.country).to.be.a(TextmagicClient.Country);
                    expect(data.contact.country.id).to.be.a('string');
                expect(data.contact.country.id).to.be("US");
                expect(data.contact.country.name).to.be.a('string');
                expect(data.contact.country.name).to.be("India");
              {
                let dataCtr = data.contact.customFields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TextmagicClient.ContactCustomField);
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
                  expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                        expect(data.userCustomField.id).to.be.a('number');
                    expect(data.userCustomField.id).to.be(23);
                    expect(data.userCustomField.name).to.be.a('string');
                    expect(data.userCustomField.name).to.be("DOB");
                    expect(data.userCustomField.createdAt).to.be.a(Date);
                    expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                }
              }
              expect(data.contact.user).to.be.a(TextmagicClient.User);
                    expect(data.contact.user.id).to.be.a('number');
                expect(data.contact.user.id).to.be(305);
                expect(data.contact.user.displayTimeFormat).to.be.a('string');
                expect(data.contact.user.displayTimeFormat).to.be("24h");
                expect(data.contact.user.username).to.be.a('string');
                expect(data.contact.user.username).to.be("charles.conway");
                expect(data.contact.user.firstName).to.be.a('string');
                expect(data.contact.user.firstName).to.be("Charles");
                expect(data.contact.user.lastName).to.be.a('string');
                expect(data.contact.user.lastName).to.be("Conway");
                expect(data.contact.user.email).to.be.a('string');
                expect(data.contact.user.email).to.be("charles@example.com");
                expect(data.contact.user.status).to.be.a('string');
                expect(data.contact.user.status).to.be("A");
                expect(data.contact.user.balance).to.be.a('number');
                expect(data.contact.user.balance).to.be(208.64);
                expect(data.contact.user.phone).to.be.a('string');
                expect(data.contact.user.phone).to.be("447860021130");
                expect(data.contact.user.company).to.be.a('string');
                expect(data.contact.user.company).to.be("Example Ltd.");
                expect(data.contact.user.currency).to.be.a(TextmagicClient.Currency);
                      expect(data.contact.user.currency.id).to.be.a('string');
                  expect(data.contact.user.currency.id).to.be("GBP");
                  expect(data.contact.user.currency.unicodeSymbol).to.be.a('string');
                  expect(data.contact.user.currency.unicodeSymbol).to.be("£");
                  expect(data.contact.user.currency.htmlSymbol).to.be.a('string');
                  expect(data.contact.user.currency.htmlSymbol).to.be("&pound;");
                expect(data.contact.user.country).to.be.a(TextmagicClient.Country);
                      expect(data.contact.user.country.id).to.be.a('string');
                  expect(data.contact.user.country.id).to.be("US");
                  expect(data.contact.user.country.name).to.be.a('string');
                  expect(data.contact.user.country.name).to.be("India");
                expect(data.contact.user.timezone).to.be.a(TextmagicClient.Timezone);
                      expect(data.contact.user.timezone.id).to.be.a('number');
                  expect(data.contact.user.timezone.id).to.be(55);
                  expect(data.contact.user.timezone.area).to.be.a('string');
                  expect(data.contact.user.timezone.area).to.be("Europe");
                  expect(data.contact.user.timezone.dst).to.be.a('number');
                  expect(data.contact.user.timezone.dst).to.be(1);
                  expect(data.contact.user.timezone.offset).to.be.a('number');
                  expect(data.contact.user.timezone.offset).to.be(10800);
                  expect(data.contact.user.timezone.timezone).to.be.a('string');
                  expect(data.contact.user.timezone.timezone).to.be("Europe\/Tallinn");
                expect(data.contact.user.subaccountType).to.be.a('string');
                expect(data.contact.user.subaccountType).to.be("P");
                expect(data.contact.user.emailAccepted).to.be.a('boolean');
                expect(data.contact.user.emailAccepted).to.be(true);
                expect(data.contact.user.phoneAccepted).to.be.a('boolean');
                expect(data.contact.user.phoneAccepted).to.be(true);
                expect(data.contact.user.avatar).to.be.a(TextmagicClient.UserImage);
                      expect(data.contact.user.avatar.href).to.be.a('string');
                  expect(data.contact.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
              {
                let dataCtr = data.contact.lists;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TextmagicClient.List);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(715);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("Private list");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("Private contacts of C. R. Conway");
                  expect(data.favorited).to.be.a('boolean');
                  expect(data.favorited).to.be(false);
                  expect(data.membersCount).to.be.a('number');
                  expect(data.membersCount).to.be(332);
                  expect(data.user).to.be.a(TextmagicClient.User);
                        expect(data.user.id).to.be.a('number');
                    expect(data.user.id).to.be(305);
                    expect(data.user.displayTimeFormat).to.be.a('string');
                    expect(data.user.displayTimeFormat).to.be("24h");
                    expect(data.user.username).to.be.a('string');
                    expect(data.user.username).to.be("charles.conway");
                    expect(data.user.firstName).to.be.a('string');
                    expect(data.user.firstName).to.be("Charles");
                    expect(data.user.lastName).to.be.a('string');
                    expect(data.user.lastName).to.be("Conway");
                    expect(data.user.email).to.be.a('string');
                    expect(data.user.email).to.be("charles@example.com");
                    expect(data.user.status).to.be.a('string');
                    expect(data.user.status).to.be("A");
                    expect(data.user.balance).to.be.a('number');
                    expect(data.user.balance).to.be(208.64);
                    expect(data.user.phone).to.be.a('string');
                    expect(data.user.phone).to.be("447860021130");
                    expect(data.user.company).to.be.a('string');
                    expect(data.user.company).to.be("Example Ltd.");
                    expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                          expect(data.user.currency.id).to.be.a('string');
                      expect(data.user.currency.id).to.be("GBP");
                      expect(data.user.currency.unicodeSymbol).to.be.a('string');
                      expect(data.user.currency.unicodeSymbol).to.be("£");
                      expect(data.user.currency.htmlSymbol).to.be.a('string');
                      expect(data.user.currency.htmlSymbol).to.be("&pound;");
                    expect(data.user.country).to.be.a(TextmagicClient.Country);
                          expect(data.user.country.id).to.be.a('string');
                      expect(data.user.country.id).to.be("US");
                      expect(data.user.country.name).to.be.a('string');
                      expect(data.user.country.name).to.be("India");
                    expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                          expect(data.user.timezone.id).to.be.a('number');
                      expect(data.user.timezone.id).to.be(55);
                      expect(data.user.timezone.area).to.be.a('string');
                      expect(data.user.timezone.area).to.be("Europe");
                      expect(data.user.timezone.dst).to.be.a('number');
                      expect(data.user.timezone.dst).to.be(1);
                      expect(data.user.timezone.offset).to.be.a('number');
                      expect(data.user.timezone.offset).to.be(10800);
                      expect(data.user.timezone.timezone).to.be.a('string');
                      expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                    expect(data.user.subaccountType).to.be.a('string');
                    expect(data.user.subaccountType).to.be("P");
                    expect(data.user.emailAccepted).to.be.a('boolean');
                    expect(data.user.emailAccepted).to.be(true);
                    expect(data.user.phoneAccepted).to.be.a('boolean');
                    expect(data.user.phoneAccepted).to.be(true);
                    expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                          expect(data.user.avatar.href).to.be.a('string');
                      expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  expect(data.service).to.be.a('boolean');
                  expect(data.service).to.be(false);
                  expect(data.shared).to.be.a('boolean');
                  expect(data.shared).to.be(false);
                  expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                        expect(data.avatar.href).to.be.a('string');
                    expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  expect(data.isDefault).to.be.a('boolean');
                  expect(data.isDefault).to.be(false);
                }
              }
              expect(data.contact.phoneType).to.be.a('string');
              expect(data.contact.phoneType).to.be("");
              expect(data.contact.avatar).to.be.a(TextmagicClient.ContactImage);
                    expect(data.contact.avatar.href).to.be.a('string');
                expect(data.contact.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
              {
                let dataCtr = data.contact.notes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(TextmagicClient.ContactNote);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(5);
                  expect(data.createdAt).to.be.a(Date);
                  expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                  expect(data.note).to.be.a('string');
                  expect(data.note).to.be("Test note");
                  expect(data.user).to.be.a(TextmagicClient.User);
                        expect(data.user.id).to.be.a('number');
                    expect(data.user.id).to.be(305);
                    expect(data.user.displayTimeFormat).to.be.a('string');
                    expect(data.user.displayTimeFormat).to.be("24h");
                    expect(data.user.username).to.be.a('string');
                    expect(data.user.username).to.be("charles.conway");
                    expect(data.user.firstName).to.be.a('string');
                    expect(data.user.firstName).to.be("Charles");
                    expect(data.user.lastName).to.be.a('string');
                    expect(data.user.lastName).to.be("Conway");
                    expect(data.user.email).to.be.a('string');
                    expect(data.user.email).to.be("charles@example.com");
                    expect(data.user.status).to.be.a('string');
                    expect(data.user.status).to.be("A");
                    expect(data.user.balance).to.be.a('number');
                    expect(data.user.balance).to.be(208.64);
                    expect(data.user.phone).to.be.a('string');
                    expect(data.user.phone).to.be("447860021130");
                    expect(data.user.company).to.be.a('string');
                    expect(data.user.company).to.be("Example Ltd.");
                    expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                          expect(data.user.currency.id).to.be.a('string');
                      expect(data.user.currency.id).to.be("GBP");
                      expect(data.user.currency.unicodeSymbol).to.be.a('string');
                      expect(data.user.currency.unicodeSymbol).to.be("£");
                      expect(data.user.currency.htmlSymbol).to.be.a('string');
                      expect(data.user.currency.htmlSymbol).to.be("&pound;");
                    expect(data.user.country).to.be.a(TextmagicClient.Country);
                          expect(data.user.country.id).to.be.a('string');
                      expect(data.user.country.id).to.be("US");
                      expect(data.user.country.name).to.be.a('string');
                      expect(data.user.country.name).to.be("India");
                    expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                          expect(data.user.timezone.id).to.be.a('number');
                      expect(data.user.timezone.id).to.be(55);
                      expect(data.user.timezone.area).to.be.a('string');
                      expect(data.user.timezone.area).to.be("Europe");
                      expect(data.user.timezone.dst).to.be.a('number');
                      expect(data.user.timezone.dst).to.be(1);
                      expect(data.user.timezone.offset).to.be.a('number');
                      expect(data.user.timezone.offset).to.be(10800);
                      expect(data.user.timezone.timezone).to.be.a('string');
                      expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                    expect(data.user.subaccountType).to.be.a('string');
                    expect(data.user.subaccountType).to.be("P");
                    expect(data.user.emailAccepted).to.be.a('boolean');
                    expect(data.user.emailAccepted).to.be(true);
                    expect(data.user.phoneAccepted).to.be.a('boolean');
                    expect(data.user.phoneAccepted).to.be(true);
                    expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                          expect(data.user.avatar.href).to.be.a('string');
                      expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                }
              }
            expect(data.unsubscribedContactId).to.be.a('number');
            expect(data.unsubscribedContactId).to.be(546);
            expect(data.unread).to.be.a('number');
            expect(data.unread).to.be(5);
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(2015-01-08T06:13:21+0000);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("a");
            expect(data.mute).to.be.a('number');
            expect(data.mute).to.be(0);
            expect(data.lastMessage).to.be.a('string');
            expect(data.lastMessage).to.be("Hello world!");
            expect(data.direction).to.be.a('string');
            expect(data.direction).to.be("ci");
            expect(data.from).to.be.a('string');
            expect(data.from).to.be("447860021130");
            expect(data.mutedUntil).to.be.a(Date);
            expect(data.mutedUntil).to.be(2019-10-10T14:44:00+0000);
            expect(data.timeLeftMute).to.be.a('number');
            expect(data.timeLeftMute).to.be(17988);
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            expect(data.pinned).to.be.a('boolean');
            expect(data.pinned).to.be(true);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getChatMessages', function() {
        it('should call getChatMessages successfully', function(done) {
          // TODO: uncomment, update parameter values for getChatMessages call and complete the assertions
          /*
          var id = 1;
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.query = "query_example";
          opts.start = "start_example";
          opts.end = "end_example";
          opts.direction = "desc";
          opts.voice = 0;

          instance.getChatMessages(id, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetChatMessagesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Conversation);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1);
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("in");
                expect(data.sender).to.be.a('string');
                expect(data.sender).to.be("447860021130");
                expect(data.messageTime).to.be.a(Date);
                expect(data.messageTime).to.be(2012-11-28T18:38:28+0000);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("This is a sample message");
                expect(data.receiver).to.be.a('string');
                expect(data.receiver).to.be("447624800500");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("d");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Charles");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.sessionId).to.be.a('number');
                expect(data.sessionId).to.be(0);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContact', function() {
        it('should call getContact successfully', function(done) {
          // TODO: uncomment, update parameter values for getContact call and complete the assertions
          /*
          var id = 1;

          instance.getContact(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.Contact);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(27074);
            expect(data.favorited).to.be.a('boolean');
            expect(data.favorited).to.be(true);
            expect(data.blocked).to.be.a('boolean');
            expect(data.blocked).to.be(true);
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("Example Ltd.");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("charles@example.com");
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            {
              let dataCtr = data.customFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.ContactCustomField);
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                      expect(data.userCustomField.id).to.be.a('number');
                  expect(data.userCustomField.id).to.be(23);
                  expect(data.userCustomField.name).to.be.a('string');
                  expect(data.userCustomField.name).to.be("DOB");
                  expect(data.userCustomField.createdAt).to.be.a(Date);
                  expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
              }
            }
            expect(data.user).to.be.a(TextmagicClient.User);
                  expect(data.user.id).to.be.a('number');
              expect(data.user.id).to.be(305);
              expect(data.user.displayTimeFormat).to.be.a('string');
              expect(data.user.displayTimeFormat).to.be("24h");
              expect(data.user.username).to.be.a('string');
              expect(data.user.username).to.be("charles.conway");
              expect(data.user.firstName).to.be.a('string');
              expect(data.user.firstName).to.be("Charles");
              expect(data.user.lastName).to.be.a('string');
              expect(data.user.lastName).to.be("Conway");
              expect(data.user.email).to.be.a('string');
              expect(data.user.email).to.be("charles@example.com");
              expect(data.user.status).to.be.a('string');
              expect(data.user.status).to.be("A");
              expect(data.user.balance).to.be.a('number');
              expect(data.user.balance).to.be(208.64);
              expect(data.user.phone).to.be.a('string');
              expect(data.user.phone).to.be("447860021130");
              expect(data.user.company).to.be.a('string');
              expect(data.user.company).to.be("Example Ltd.");
              expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                    expect(data.user.currency.id).to.be.a('string');
                expect(data.user.currency.id).to.be("GBP");
                expect(data.user.currency.unicodeSymbol).to.be.a('string');
                expect(data.user.currency.unicodeSymbol).to.be("£");
                expect(data.user.currency.htmlSymbol).to.be.a('string');
                expect(data.user.currency.htmlSymbol).to.be("&pound;");
              expect(data.user.country).to.be.a(TextmagicClient.Country);
                    expect(data.user.country.id).to.be.a('string');
                expect(data.user.country.id).to.be("US");
                expect(data.user.country.name).to.be.a('string');
                expect(data.user.country.name).to.be("India");
              expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                    expect(data.user.timezone.id).to.be.a('number');
                expect(data.user.timezone.id).to.be(55);
                expect(data.user.timezone.area).to.be.a('string');
                expect(data.user.timezone.area).to.be("Europe");
                expect(data.user.timezone.dst).to.be.a('number');
                expect(data.user.timezone.dst).to.be(1);
                expect(data.user.timezone.offset).to.be.a('number');
                expect(data.user.timezone.offset).to.be(10800);
                expect(data.user.timezone.timezone).to.be.a('string');
                expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
              expect(data.user.subaccountType).to.be.a('string');
              expect(data.user.subaccountType).to.be("P");
              expect(data.user.emailAccepted).to.be.a('boolean');
              expect(data.user.emailAccepted).to.be(true);
              expect(data.user.phoneAccepted).to.be.a('boolean');
              expect(data.user.phoneAccepted).to.be(true);
              expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                    expect(data.user.avatar.href).to.be.a('string');
                expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            {
              let dataCtr = data.lists;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.List);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(715);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Private list");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("Private contacts of C. R. Conway");
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(false);
                expect(data.membersCount).to.be.a('number');
                expect(data.membersCount).to.be(332);
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.service).to.be.a('boolean');
                expect(data.service).to.be(false);
                expect(data.shared).to.be.a('boolean');
                expect(data.shared).to.be(false);
                expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.isDefault).to.be.a('boolean');
                expect(data.isDefault).to.be(false);
              }
            }
            expect(data.phoneType).to.be.a('string');
            expect(data.phoneType).to.be("");
            expect(data.avatar).to.be.a(TextmagicClient.ContactImage);
                  expect(data.avatar.href).to.be.a('string');
              expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            {
              let dataCtr = data.notes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.ContactNote);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(5);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                expect(data.note).to.be.a('string');
                expect(data.note).to.be("Test note");
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactByPhone', function() {
        it('should call getContactByPhone successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactByPhone call and complete the assertions
          /*
          var phone = "447860021130";

          instance.getContactByPhone(phone).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.Contact);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(27074);
            expect(data.favorited).to.be.a('boolean');
            expect(data.favorited).to.be(true);
            expect(data.blocked).to.be.a('boolean');
            expect(data.blocked).to.be(true);
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("Example Ltd.");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("charles@example.com");
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            {
              let dataCtr = data.customFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.ContactCustomField);
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                      expect(data.userCustomField.id).to.be.a('number');
                  expect(data.userCustomField.id).to.be(23);
                  expect(data.userCustomField.name).to.be.a('string');
                  expect(data.userCustomField.name).to.be("DOB");
                  expect(data.userCustomField.createdAt).to.be.a(Date);
                  expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
              }
            }
            expect(data.user).to.be.a(TextmagicClient.User);
                  expect(data.user.id).to.be.a('number');
              expect(data.user.id).to.be(305);
              expect(data.user.displayTimeFormat).to.be.a('string');
              expect(data.user.displayTimeFormat).to.be("24h");
              expect(data.user.username).to.be.a('string');
              expect(data.user.username).to.be("charles.conway");
              expect(data.user.firstName).to.be.a('string');
              expect(data.user.firstName).to.be("Charles");
              expect(data.user.lastName).to.be.a('string');
              expect(data.user.lastName).to.be("Conway");
              expect(data.user.email).to.be.a('string');
              expect(data.user.email).to.be("charles@example.com");
              expect(data.user.status).to.be.a('string');
              expect(data.user.status).to.be("A");
              expect(data.user.balance).to.be.a('number');
              expect(data.user.balance).to.be(208.64);
              expect(data.user.phone).to.be.a('string');
              expect(data.user.phone).to.be("447860021130");
              expect(data.user.company).to.be.a('string');
              expect(data.user.company).to.be("Example Ltd.");
              expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                    expect(data.user.currency.id).to.be.a('string');
                expect(data.user.currency.id).to.be("GBP");
                expect(data.user.currency.unicodeSymbol).to.be.a('string');
                expect(data.user.currency.unicodeSymbol).to.be("£");
                expect(data.user.currency.htmlSymbol).to.be.a('string');
                expect(data.user.currency.htmlSymbol).to.be("&pound;");
              expect(data.user.country).to.be.a(TextmagicClient.Country);
                    expect(data.user.country.id).to.be.a('string');
                expect(data.user.country.id).to.be("US");
                expect(data.user.country.name).to.be.a('string');
                expect(data.user.country.name).to.be("India");
              expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                    expect(data.user.timezone.id).to.be.a('number');
                expect(data.user.timezone.id).to.be(55);
                expect(data.user.timezone.area).to.be.a('string');
                expect(data.user.timezone.area).to.be("Europe");
                expect(data.user.timezone.dst).to.be.a('number');
                expect(data.user.timezone.dst).to.be(1);
                expect(data.user.timezone.offset).to.be.a('number');
                expect(data.user.timezone.offset).to.be(10800);
                expect(data.user.timezone.timezone).to.be.a('string');
                expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
              expect(data.user.subaccountType).to.be.a('string');
              expect(data.user.subaccountType).to.be("P");
              expect(data.user.emailAccepted).to.be.a('boolean');
              expect(data.user.emailAccepted).to.be(true);
              expect(data.user.phoneAccepted).to.be.a('boolean');
              expect(data.user.phoneAccepted).to.be(true);
              expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                    expect(data.user.avatar.href).to.be.a('string');
                expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            {
              let dataCtr = data.lists;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.List);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(715);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Private list");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("Private contacts of C. R. Conway");
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(false);
                expect(data.membersCount).to.be.a('number');
                expect(data.membersCount).to.be(332);
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.service).to.be.a('boolean');
                expect(data.service).to.be(false);
                expect(data.shared).to.be.a('boolean');
                expect(data.shared).to.be(false);
                expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.isDefault).to.be.a('boolean');
                expect(data.isDefault).to.be(false);
              }
            }
            expect(data.phoneType).to.be.a('string');
            expect(data.phoneType).to.be("");
            expect(data.avatar).to.be.a(TextmagicClient.ContactImage);
                  expect(data.avatar.href).to.be.a('string');
              expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            {
              let dataCtr = data.notes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.ContactNote);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(5);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                expect(data.note).to.be.a('string');
                expect(data.note).to.be("Test note");
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactIfBlocked', function() {
        it('should call getContactIfBlocked successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactIfBlocked call and complete the assertions
          /*
          var phone = "447860021130";

          instance.getContactIfBlocked(phone).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.Contact);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(27074);
            expect(data.favorited).to.be.a('boolean');
            expect(data.favorited).to.be(true);
            expect(data.blocked).to.be.a('boolean');
            expect(data.blocked).to.be(true);
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.companyName).to.be.a('string');
            expect(data.companyName).to.be("Example Ltd.");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("charles@example.com");
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            {
              let dataCtr = data.customFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.ContactCustomField);
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                      expect(data.userCustomField.id).to.be.a('number');
                  expect(data.userCustomField.id).to.be(23);
                  expect(data.userCustomField.name).to.be.a('string');
                  expect(data.userCustomField.name).to.be("DOB");
                  expect(data.userCustomField.createdAt).to.be.a(Date);
                  expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
              }
            }
            expect(data.user).to.be.a(TextmagicClient.User);
                  expect(data.user.id).to.be.a('number');
              expect(data.user.id).to.be(305);
              expect(data.user.displayTimeFormat).to.be.a('string');
              expect(data.user.displayTimeFormat).to.be("24h");
              expect(data.user.username).to.be.a('string');
              expect(data.user.username).to.be("charles.conway");
              expect(data.user.firstName).to.be.a('string');
              expect(data.user.firstName).to.be("Charles");
              expect(data.user.lastName).to.be.a('string');
              expect(data.user.lastName).to.be("Conway");
              expect(data.user.email).to.be.a('string');
              expect(data.user.email).to.be("charles@example.com");
              expect(data.user.status).to.be.a('string');
              expect(data.user.status).to.be("A");
              expect(data.user.balance).to.be.a('number');
              expect(data.user.balance).to.be(208.64);
              expect(data.user.phone).to.be.a('string');
              expect(data.user.phone).to.be("447860021130");
              expect(data.user.company).to.be.a('string');
              expect(data.user.company).to.be("Example Ltd.");
              expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                    expect(data.user.currency.id).to.be.a('string');
                expect(data.user.currency.id).to.be("GBP");
                expect(data.user.currency.unicodeSymbol).to.be.a('string');
                expect(data.user.currency.unicodeSymbol).to.be("£");
                expect(data.user.currency.htmlSymbol).to.be.a('string');
                expect(data.user.currency.htmlSymbol).to.be("&pound;");
              expect(data.user.country).to.be.a(TextmagicClient.Country);
                    expect(data.user.country.id).to.be.a('string');
                expect(data.user.country.id).to.be("US");
                expect(data.user.country.name).to.be.a('string');
                expect(data.user.country.name).to.be("India");
              expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                    expect(data.user.timezone.id).to.be.a('number');
                expect(data.user.timezone.id).to.be(55);
                expect(data.user.timezone.area).to.be.a('string');
                expect(data.user.timezone.area).to.be("Europe");
                expect(data.user.timezone.dst).to.be.a('number');
                expect(data.user.timezone.dst).to.be(1);
                expect(data.user.timezone.offset).to.be.a('number');
                expect(data.user.timezone.offset).to.be(10800);
                expect(data.user.timezone.timezone).to.be.a('string');
                expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
              expect(data.user.subaccountType).to.be.a('string');
              expect(data.user.subaccountType).to.be("P");
              expect(data.user.emailAccepted).to.be.a('boolean');
              expect(data.user.emailAccepted).to.be(true);
              expect(data.user.phoneAccepted).to.be.a('boolean');
              expect(data.user.phoneAccepted).to.be(true);
              expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                    expect(data.user.avatar.href).to.be.a('string');
                expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            {
              let dataCtr = data.lists;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.List);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(715);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Private list");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("Private contacts of C. R. Conway");
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(false);
                expect(data.membersCount).to.be.a('number');
                expect(data.membersCount).to.be(332);
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.service).to.be.a('boolean');
                expect(data.service).to.be(false);
                expect(data.shared).to.be.a('boolean');
                expect(data.shared).to.be(false);
                expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.isDefault).to.be.a('boolean');
                expect(data.isDefault).to.be(false);
              }
            }
            expect(data.phoneType).to.be.a('string');
            expect(data.phoneType).to.be("");
            expect(data.avatar).to.be.a(TextmagicClient.ContactImage);
                  expect(data.avatar.href).to.be.a('string');
              expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            {
              let dataCtr = data.notes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.ContactNote);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(5);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                expect(data.note).to.be.a('string');
                expect(data.note).to.be("Test note");
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactImportSessionProgress', function() {
        it('should call getContactImportSessionProgress successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactImportSessionProgress call and complete the assertions
          /*
          var id = 1;

          instance.getContactImportSessionProgress(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetContactImportSessionProgressResponse);
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.processed).to.be.a('number');
            expect(data.processed).to.be(67);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactNote', function() {
        it('should call getContactNote successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactNote call and complete the assertions
          /*
          var id = 1;

          instance.getContactNote(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ContactNote);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(5);
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
            expect(data.note).to.be.a('string');
            expect(data.note).to.be("Test note");
            expect(data.user).to.be.a(TextmagicClient.User);
                  expect(data.user.id).to.be.a('number');
              expect(data.user.id).to.be(305);
              expect(data.user.displayTimeFormat).to.be.a('string');
              expect(data.user.displayTimeFormat).to.be("24h");
              expect(data.user.username).to.be.a('string');
              expect(data.user.username).to.be("charles.conway");
              expect(data.user.firstName).to.be.a('string');
              expect(data.user.firstName).to.be("Charles");
              expect(data.user.lastName).to.be.a('string');
              expect(data.user.lastName).to.be("Conway");
              expect(data.user.email).to.be.a('string');
              expect(data.user.email).to.be("charles@example.com");
              expect(data.user.status).to.be.a('string');
              expect(data.user.status).to.be("A");
              expect(data.user.balance).to.be.a('number');
              expect(data.user.balance).to.be(208.64);
              expect(data.user.phone).to.be.a('string');
              expect(data.user.phone).to.be("447860021130");
              expect(data.user.company).to.be.a('string');
              expect(data.user.company).to.be("Example Ltd.");
              expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                    expect(data.user.currency.id).to.be.a('string');
                expect(data.user.currency.id).to.be("GBP");
                expect(data.user.currency.unicodeSymbol).to.be.a('string');
                expect(data.user.currency.unicodeSymbol).to.be("£");
                expect(data.user.currency.htmlSymbol).to.be.a('string');
                expect(data.user.currency.htmlSymbol).to.be("&pound;");
              expect(data.user.country).to.be.a(TextmagicClient.Country);
                    expect(data.user.country.id).to.be.a('string');
                expect(data.user.country.id).to.be("US");
                expect(data.user.country.name).to.be.a('string');
                expect(data.user.country.name).to.be("India");
              expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                    expect(data.user.timezone.id).to.be.a('number');
                expect(data.user.timezone.id).to.be(55);
                expect(data.user.timezone.area).to.be.a('string');
                expect(data.user.timezone.area).to.be("Europe");
                expect(data.user.timezone.dst).to.be.a('number');
                expect(data.user.timezone.dst).to.be(1);
                expect(data.user.timezone.offset).to.be.a('number');
                expect(data.user.timezone.offset).to.be(10800);
                expect(data.user.timezone.timezone).to.be.a('string');
                expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
              expect(data.user.subaccountType).to.be.a('string');
              expect(data.user.subaccountType).to.be("P");
              expect(data.user.emailAccepted).to.be.a('boolean');
              expect(data.user.emailAccepted).to.be(true);
              expect(data.user.phoneAccepted).to.be.a('boolean');
              expect(data.user.phoneAccepted).to.be(true);
              expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                    expect(data.user.avatar.href).to.be.a('string');
                expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactNotes', function() {
        it('should call getContactNotes successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactNotes call and complete the assertions
          /*
          var id = 1;
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getContactNotes(id, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetContactNotesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.ContactNote);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(5);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                expect(data.note).to.be.a('string');
                expect(data.note).to.be("Test note");
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContacts', function() {
        it('should call getContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for getContacts call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.shared = 0;
          opts.orderBy = "id";
          opts.direction = "desc";

          instance.getContacts(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetContactsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Contact);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(27074);
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(true);
                expect(data.blocked).to.be.a('boolean');
                expect(data.blocked).to.be(true);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Charles");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.companyName).to.be.a('string');
                expect(data.companyName).to.be("Example Ltd.");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("charles@example.com");
                expect(data.country).to.be.a(TextmagicClient.Country);
                      expect(data.country.id).to.be.a('string');
                  expect(data.country.id).to.be("US");
                  expect(data.country.name).to.be.a('string');
                  expect(data.country.name).to.be("India");
                {
                  let dataCtr = data.customFields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.ContactCustomField);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                          expect(data.userCustomField.id).to.be.a('number');
                      expect(data.userCustomField.id).to.be(23);
                      expect(data.userCustomField.name).to.be.a('string');
                      expect(data.userCustomField.name).to.be("DOB");
                      expect(data.userCustomField.createdAt).to.be.a(Date);
                      expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                  }
                }
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                {
                  let dataCtr = data.lists;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.List);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(715);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("Private list");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("Private contacts of C. R. Conway");
                    expect(data.favorited).to.be.a('boolean');
                    expect(data.favorited).to.be(false);
                    expect(data.membersCount).to.be.a('number');
                    expect(data.membersCount).to.be(332);
                    expect(data.user).to.be.a(TextmagicClient.User);
                          expect(data.user.id).to.be.a('number');
                      expect(data.user.id).to.be(305);
                      expect(data.user.displayTimeFormat).to.be.a('string');
                      expect(data.user.displayTimeFormat).to.be("24h");
                      expect(data.user.username).to.be.a('string');
                      expect(data.user.username).to.be("charles.conway");
                      expect(data.user.firstName).to.be.a('string');
                      expect(data.user.firstName).to.be("Charles");
                      expect(data.user.lastName).to.be.a('string');
                      expect(data.user.lastName).to.be("Conway");
                      expect(data.user.email).to.be.a('string');
                      expect(data.user.email).to.be("charles@example.com");
                      expect(data.user.status).to.be.a('string');
                      expect(data.user.status).to.be("A");
                      expect(data.user.balance).to.be.a('number');
                      expect(data.user.balance).to.be(208.64);
                      expect(data.user.phone).to.be.a('string');
                      expect(data.user.phone).to.be("447860021130");
                      expect(data.user.company).to.be.a('string');
                      expect(data.user.company).to.be("Example Ltd.");
                      expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                            expect(data.user.currency.id).to.be.a('string');
                        expect(data.user.currency.id).to.be("GBP");
                        expect(data.user.currency.unicodeSymbol).to.be.a('string');
                        expect(data.user.currency.unicodeSymbol).to.be("£");
                        expect(data.user.currency.htmlSymbol).to.be.a('string');
                        expect(data.user.currency.htmlSymbol).to.be("&pound;");
                      expect(data.user.country).to.be.a(TextmagicClient.Country);
                            expect(data.user.country.id).to.be.a('string');
                        expect(data.user.country.id).to.be("US");
                        expect(data.user.country.name).to.be.a('string');
                        expect(data.user.country.name).to.be("India");
                      expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                            expect(data.user.timezone.id).to.be.a('number');
                        expect(data.user.timezone.id).to.be(55);
                        expect(data.user.timezone.area).to.be.a('string');
                        expect(data.user.timezone.area).to.be("Europe");
                        expect(data.user.timezone.dst).to.be.a('number');
                        expect(data.user.timezone.dst).to.be(1);
                        expect(data.user.timezone.offset).to.be.a('number');
                        expect(data.user.timezone.offset).to.be(10800);
                        expect(data.user.timezone.timezone).to.be.a('string');
                        expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                      expect(data.user.subaccountType).to.be.a('string');
                      expect(data.user.subaccountType).to.be("P");
                      expect(data.user.emailAccepted).to.be.a('boolean');
                      expect(data.user.emailAccepted).to.be(true);
                      expect(data.user.phoneAccepted).to.be.a('boolean');
                      expect(data.user.phoneAccepted).to.be(true);
                      expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                            expect(data.user.avatar.href).to.be.a('string');
                        expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    expect(data.service).to.be.a('boolean');
                    expect(data.service).to.be(false);
                    expect(data.shared).to.be.a('boolean');
                    expect(data.shared).to.be(false);
                    expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                          expect(data.avatar.href).to.be.a('string');
                      expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    expect(data.isDefault).to.be.a('boolean');
                    expect(data.isDefault).to.be(false);
                  }
                }
                expect(data.phoneType).to.be.a('string');
                expect(data.phoneType).to.be("");
                expect(data.avatar).to.be.a(TextmagicClient.ContactImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                {
                  let dataCtr = data.notes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.ContactNote);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(5);
                    expect(data.createdAt).to.be.a(Date);
                    expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                    expect(data.note).to.be.a('string');
                    expect(data.note).to.be("Test note");
                    expect(data.user).to.be.a(TextmagicClient.User);
                          expect(data.user.id).to.be.a('number');
                      expect(data.user.id).to.be(305);
                      expect(data.user.displayTimeFormat).to.be.a('string');
                      expect(data.user.displayTimeFormat).to.be("24h");
                      expect(data.user.username).to.be.a('string');
                      expect(data.user.username).to.be("charles.conway");
                      expect(data.user.firstName).to.be.a('string');
                      expect(data.user.firstName).to.be("Charles");
                      expect(data.user.lastName).to.be.a('string');
                      expect(data.user.lastName).to.be("Conway");
                      expect(data.user.email).to.be.a('string');
                      expect(data.user.email).to.be("charles@example.com");
                      expect(data.user.status).to.be.a('string');
                      expect(data.user.status).to.be("A");
                      expect(data.user.balance).to.be.a('number');
                      expect(data.user.balance).to.be(208.64);
                      expect(data.user.phone).to.be.a('string');
                      expect(data.user.phone).to.be("447860021130");
                      expect(data.user.company).to.be.a('string');
                      expect(data.user.company).to.be("Example Ltd.");
                      expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                            expect(data.user.currency.id).to.be.a('string');
                        expect(data.user.currency.id).to.be("GBP");
                        expect(data.user.currency.unicodeSymbol).to.be.a('string');
                        expect(data.user.currency.unicodeSymbol).to.be("£");
                        expect(data.user.currency.htmlSymbol).to.be.a('string');
                        expect(data.user.currency.htmlSymbol).to.be("&pound;");
                      expect(data.user.country).to.be.a(TextmagicClient.Country);
                            expect(data.user.country.id).to.be.a('string');
                        expect(data.user.country.id).to.be("US");
                        expect(data.user.country.name).to.be.a('string');
                        expect(data.user.country.name).to.be("India");
                      expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                            expect(data.user.timezone.id).to.be.a('number');
                        expect(data.user.timezone.id).to.be(55);
                        expect(data.user.timezone.area).to.be.a('string');
                        expect(data.user.timezone.area).to.be("Europe");
                        expect(data.user.timezone.dst).to.be.a('number');
                        expect(data.user.timezone.dst).to.be(1);
                        expect(data.user.timezone.offset).to.be.a('number');
                        expect(data.user.timezone.offset).to.be(10800);
                        expect(data.user.timezone.timezone).to.be.a('string');
                        expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                      expect(data.user.subaccountType).to.be.a('string');
                      expect(data.user.subaccountType).to.be("P");
                      expect(data.user.emailAccepted).to.be.a('boolean');
                      expect(data.user.emailAccepted).to.be(true);
                      expect(data.user.phoneAccepted).to.be.a('boolean');
                      expect(data.user.phoneAccepted).to.be(true);
                      expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                            expect(data.user.avatar.href).to.be.a('string');
                        expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  }
                }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactsAutocomplete', function() {
        it('should call getContactsAutocomplete successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactsAutocomplete call and complete the assertions
          /*
          var query = "A";
          var opts = {};
          opts.limit = 10;
          opts.lists = 0;

          instance.getContactsAutocomplete(query, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetContactsAutocompleteResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContactsByListId', function() {
        it('should call getContactsByListId successfully', function(done) {
          // TODO: uncomment, update parameter values for getContactsByListId call and complete the assertions
          /*
          var id = 1;
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.orderBy = "id";
          opts.direction = "desc";

          instance.getContactsByListId(id, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetContactsByListIdPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Contact);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(27074);
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(true);
                expect(data.blocked).to.be.a('boolean');
                expect(data.blocked).to.be(true);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Charles");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.companyName).to.be.a('string');
                expect(data.companyName).to.be("Example Ltd.");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("charles@example.com");
                expect(data.country).to.be.a(TextmagicClient.Country);
                      expect(data.country.id).to.be.a('string');
                  expect(data.country.id).to.be("US");
                  expect(data.country.name).to.be.a('string');
                  expect(data.country.name).to.be("India");
                {
                  let dataCtr = data.customFields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.ContactCustomField);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                          expect(data.userCustomField.id).to.be.a('number');
                      expect(data.userCustomField.id).to.be(23);
                      expect(data.userCustomField.name).to.be.a('string');
                      expect(data.userCustomField.name).to.be("DOB");
                      expect(data.userCustomField.createdAt).to.be.a(Date);
                      expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                  }
                }
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                {
                  let dataCtr = data.lists;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.List);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(715);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("Private list");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("Private contacts of C. R. Conway");
                    expect(data.favorited).to.be.a('boolean');
                    expect(data.favorited).to.be(false);
                    expect(data.membersCount).to.be.a('number');
                    expect(data.membersCount).to.be(332);
                    expect(data.user).to.be.a(TextmagicClient.User);
                          expect(data.user.id).to.be.a('number');
                      expect(data.user.id).to.be(305);
                      expect(data.user.displayTimeFormat).to.be.a('string');
                      expect(data.user.displayTimeFormat).to.be("24h");
                      expect(data.user.username).to.be.a('string');
                      expect(data.user.username).to.be("charles.conway");
                      expect(data.user.firstName).to.be.a('string');
                      expect(data.user.firstName).to.be("Charles");
                      expect(data.user.lastName).to.be.a('string');
                      expect(data.user.lastName).to.be("Conway");
                      expect(data.user.email).to.be.a('string');
                      expect(data.user.email).to.be("charles@example.com");
                      expect(data.user.status).to.be.a('string');
                      expect(data.user.status).to.be("A");
                      expect(data.user.balance).to.be.a('number');
                      expect(data.user.balance).to.be(208.64);
                      expect(data.user.phone).to.be.a('string');
                      expect(data.user.phone).to.be("447860021130");
                      expect(data.user.company).to.be.a('string');
                      expect(data.user.company).to.be("Example Ltd.");
                      expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                            expect(data.user.currency.id).to.be.a('string');
                        expect(data.user.currency.id).to.be("GBP");
                        expect(data.user.currency.unicodeSymbol).to.be.a('string');
                        expect(data.user.currency.unicodeSymbol).to.be("£");
                        expect(data.user.currency.htmlSymbol).to.be.a('string');
                        expect(data.user.currency.htmlSymbol).to.be("&pound;");
                      expect(data.user.country).to.be.a(TextmagicClient.Country);
                            expect(data.user.country.id).to.be.a('string');
                        expect(data.user.country.id).to.be("US");
                        expect(data.user.country.name).to.be.a('string');
                        expect(data.user.country.name).to.be("India");
                      expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                            expect(data.user.timezone.id).to.be.a('number');
                        expect(data.user.timezone.id).to.be(55);
                        expect(data.user.timezone.area).to.be.a('string');
                        expect(data.user.timezone.area).to.be("Europe");
                        expect(data.user.timezone.dst).to.be.a('number');
                        expect(data.user.timezone.dst).to.be(1);
                        expect(data.user.timezone.offset).to.be.a('number');
                        expect(data.user.timezone.offset).to.be(10800);
                        expect(data.user.timezone.timezone).to.be.a('string');
                        expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                      expect(data.user.subaccountType).to.be.a('string');
                      expect(data.user.subaccountType).to.be("P");
                      expect(data.user.emailAccepted).to.be.a('boolean');
                      expect(data.user.emailAccepted).to.be(true);
                      expect(data.user.phoneAccepted).to.be.a('boolean');
                      expect(data.user.phoneAccepted).to.be(true);
                      expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                            expect(data.user.avatar.href).to.be.a('string');
                        expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    expect(data.service).to.be.a('boolean');
                    expect(data.service).to.be(false);
                    expect(data.shared).to.be.a('boolean');
                    expect(data.shared).to.be(false);
                    expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                          expect(data.avatar.href).to.be.a('string');
                      expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    expect(data.isDefault).to.be.a('boolean');
                    expect(data.isDefault).to.be(false);
                  }
                }
                expect(data.phoneType).to.be.a('string');
                expect(data.phoneType).to.be("");
                expect(data.avatar).to.be.a(TextmagicClient.ContactImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                {
                  let dataCtr = data.notes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.ContactNote);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(5);
                    expect(data.createdAt).to.be.a(Date);
                    expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                    expect(data.note).to.be.a('string');
                    expect(data.note).to.be("Test note");
                    expect(data.user).to.be.a(TextmagicClient.User);
                          expect(data.user.id).to.be.a('number');
                      expect(data.user.id).to.be(305);
                      expect(data.user.displayTimeFormat).to.be.a('string');
                      expect(data.user.displayTimeFormat).to.be("24h");
                      expect(data.user.username).to.be.a('string');
                      expect(data.user.username).to.be("charles.conway");
                      expect(data.user.firstName).to.be.a('string');
                      expect(data.user.firstName).to.be("Charles");
                      expect(data.user.lastName).to.be.a('string');
                      expect(data.user.lastName).to.be("Conway");
                      expect(data.user.email).to.be.a('string');
                      expect(data.user.email).to.be("charles@example.com");
                      expect(data.user.status).to.be.a('string');
                      expect(data.user.status).to.be("A");
                      expect(data.user.balance).to.be.a('number');
                      expect(data.user.balance).to.be(208.64);
                      expect(data.user.phone).to.be.a('string');
                      expect(data.user.phone).to.be("447860021130");
                      expect(data.user.company).to.be.a('string');
                      expect(data.user.company).to.be("Example Ltd.");
                      expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                            expect(data.user.currency.id).to.be.a('string');
                        expect(data.user.currency.id).to.be("GBP");
                        expect(data.user.currency.unicodeSymbol).to.be.a('string');
                        expect(data.user.currency.unicodeSymbol).to.be("£");
                        expect(data.user.currency.htmlSymbol).to.be.a('string');
                        expect(data.user.currency.htmlSymbol).to.be("&pound;");
                      expect(data.user.country).to.be.a(TextmagicClient.Country);
                            expect(data.user.country.id).to.be.a('string');
                        expect(data.user.country.id).to.be("US");
                        expect(data.user.country.name).to.be.a('string');
                        expect(data.user.country.name).to.be("India");
                      expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                            expect(data.user.timezone.id).to.be.a('number');
                        expect(data.user.timezone.id).to.be(55);
                        expect(data.user.timezone.area).to.be.a('string');
                        expect(data.user.timezone.area).to.be("Europe");
                        expect(data.user.timezone.dst).to.be.a('number');
                        expect(data.user.timezone.dst).to.be(1);
                        expect(data.user.timezone.offset).to.be.a('number');
                        expect(data.user.timezone.offset).to.be(10800);
                        expect(data.user.timezone.timezone).to.be.a('string');
                        expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                      expect(data.user.subaccountType).to.be.a('string');
                      expect(data.user.subaccountType).to.be("P");
                      expect(data.user.emailAccepted).to.be.a('boolean');
                      expect(data.user.emailAccepted).to.be(true);
                      expect(data.user.phoneAccepted).to.be.a('boolean');
                      expect(data.user.phoneAccepted).to.be(true);
                      expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                            expect(data.user.avatar.href).to.be.a('string');
                        expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  }
                }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCountries', function() {
        it('should call getCountries successfully', function(done) {
          // TODO: uncomment getCountries call and complete the assertions
          /*

          instance.getCountries().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetCountriesResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCurrentUser', function() {
        it('should call getCurrentUser successfully', function(done) {
          // TODO: uncomment getCurrentUser call and complete the assertions
          /*

          instance.getCurrentUser().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.User);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(305);
            expect(data.displayTimeFormat).to.be.a('string');
            expect(data.displayTimeFormat).to.be("24h");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("charles.conway");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("charles@example.com");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("A");
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be(208.64);
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("Example Ltd.");
            expect(data.currency).to.be.a(TextmagicClient.Currency);
                  expect(data.currency.id).to.be.a('string');
              expect(data.currency.id).to.be("GBP");
              expect(data.currency.unicodeSymbol).to.be.a('string');
              expect(data.currency.unicodeSymbol).to.be("£");
              expect(data.currency.htmlSymbol).to.be.a('string');
              expect(data.currency.htmlSymbol).to.be("&pound;");
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            expect(data.timezone).to.be.a(TextmagicClient.Timezone);
                  expect(data.timezone.id).to.be.a('number');
              expect(data.timezone.id).to.be(55);
              expect(data.timezone.area).to.be.a('string');
              expect(data.timezone.area).to.be("Europe");
              expect(data.timezone.dst).to.be.a('number');
              expect(data.timezone.dst).to.be(1);
              expect(data.timezone.offset).to.be.a('number');
              expect(data.timezone.offset).to.be(10800);
              expect(data.timezone.timezone).to.be.a('string');
              expect(data.timezone.timezone).to.be("Europe\/Tallinn");
            expect(data.subaccountType).to.be.a('string');
            expect(data.subaccountType).to.be("P");
            expect(data.emailAccepted).to.be.a('boolean');
            expect(data.emailAccepted).to.be(true);
            expect(data.phoneAccepted).to.be.a('boolean');
            expect(data.phoneAccepted).to.be(true);
            expect(data.avatar).to.be.a(TextmagicClient.UserImage);
                  expect(data.avatar.href).to.be.a('string');
              expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCustomField', function() {
        it('should call getCustomField successfully', function(done) {
          // TODO: uncomment, update parameter values for getCustomField call and complete the assertions
          /*
          var id = 1;

          instance.getCustomField(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.UserCustomField);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(23);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("DOB");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(2015-02-11T07:33:19+0000);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCustomFields', function() {
        it('should call getCustomFields successfully', function(done) {
          // TODO: uncomment, update parameter values for getCustomFields call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getCustomFields(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetCustomFieldsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.UserCustomField);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(23);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("DOB");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2015-02-11T07:33:19+0000);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDedicatedNumber', function() {
        it('should call getDedicatedNumber successfully', function(done) {
          // TODO: uncomment, update parameter values for getDedicatedNumber call and complete the assertions
          /*
          var id = 1;

          instance.getDedicatedNumber(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.UsersInbound);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(305);
            expect(data.displayTimeFormat).to.be.a('string');
            expect(data.displayTimeFormat).to.be("24h");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.user).to.be.a(TextmagicClient.User);
                  expect(data.user.id).to.be.a('number');
              expect(data.user.id).to.be(305);
              expect(data.user.displayTimeFormat).to.be.a('string');
              expect(data.user.displayTimeFormat).to.be("24h");
              expect(data.user.username).to.be.a('string');
              expect(data.user.username).to.be("charles.conway");
              expect(data.user.firstName).to.be.a('string');
              expect(data.user.firstName).to.be("Charles");
              expect(data.user.lastName).to.be.a('string');
              expect(data.user.lastName).to.be("Conway");
              expect(data.user.email).to.be.a('string');
              expect(data.user.email).to.be("charles@example.com");
              expect(data.user.status).to.be.a('string');
              expect(data.user.status).to.be("A");
              expect(data.user.balance).to.be.a('number');
              expect(data.user.balance).to.be(208.64);
              expect(data.user.phone).to.be.a('string');
              expect(data.user.phone).to.be("447860021130");
              expect(data.user.company).to.be.a('string');
              expect(data.user.company).to.be("Example Ltd.");
              expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                    expect(data.user.currency.id).to.be.a('string');
                expect(data.user.currency.id).to.be("GBP");
                expect(data.user.currency.unicodeSymbol).to.be.a('string');
                expect(data.user.currency.unicodeSymbol).to.be("£");
                expect(data.user.currency.htmlSymbol).to.be.a('string');
                expect(data.user.currency.htmlSymbol).to.be("&pound;");
              expect(data.user.country).to.be.a(TextmagicClient.Country);
                    expect(data.user.country.id).to.be.a('string');
                expect(data.user.country.id).to.be("US");
                expect(data.user.country.name).to.be.a('string');
                expect(data.user.country.name).to.be("India");
              expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                    expect(data.user.timezone.id).to.be.a('number');
                expect(data.user.timezone.id).to.be(55);
                expect(data.user.timezone.area).to.be.a('string');
                expect(data.user.timezone.area).to.be("Europe");
                expect(data.user.timezone.dst).to.be.a('number');
                expect(data.user.timezone.dst).to.be(1);
                expect(data.user.timezone.offset).to.be.a('number');
                expect(data.user.timezone.offset).to.be(10800);
                expect(data.user.timezone.timezone).to.be.a('string');
                expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
              expect(data.user.subaccountType).to.be.a('string');
              expect(data.user.subaccountType).to.be("P");
              expect(data.user.emailAccepted).to.be.a('boolean');
              expect(data.user.emailAccepted).to.be(true);
              expect(data.user.phoneAccepted).to.be.a('boolean');
              expect(data.user.phoneAccepted).to.be(true);
              expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                    expect(data.user.avatar.href).to.be.a('string');
                expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            expect(data.purchasedAt).to.be.a(Date);
            expect(data.purchasedAt).to.be(2014-10-02T11:07:04+0000);
            expect(data.expireAt).to.be.a(Date);
            expect(data.expireAt).to.be(2014-10-02T11:07:04+0000);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("U");
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFavorites', function() {
        it('should call getFavorites successfully', function(done) {
          // TODO: uncomment, update parameter values for getFavorites call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.query = "A";

          instance.getFavorites(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetFavoritesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.FavoriteContact);
                expect(data.entityId).to.be.a('number');
                expect(data.entityId).to.be(629);
                expect(data.entityType).to.be.a('string');
                expect(data.entityType).to.be("contact");
                expect(data.primaryLabel).to.be.a('string');
                expect(data.primaryLabel).to.be("Favorite contact name.");
                expect(data.secondaryLabel).to.be.a('string');
                expect(data.secondaryLabel).to.be("45");
                expect(data.tertiaryLabel).to.be.a('string');
                expect(data.tertiaryLabel).to.be("Australia");
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInboundMessage', function() {
        it('should call getInboundMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for getInboundMessage call and complete the assertions
          /*
          var id = 1782832;

          instance.getInboundMessage(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.MessageIn);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(1782832);
            expect(data.sender).to.be.a('string');
            expect(data.sender).to.be("447860021130");
            expect(data.receiver).to.be.a('string');
            expect(data.receiver).to.be("447624800500");
            expect(data.messageTime).to.be.a(Date);
            expect(data.messageTime).to.be(2012-11-28T18:38:28+0000);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("I Love TextMagic!");
            expect(data.contactId).to.be.a('number');
            expect(data.contactId).to.be(1);
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.avatar).to.be.a('string');
            expect(data.avatar).to.be("avatars/dummy_avatar.png");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("charles@example.com");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInboundMessagesNotificationSettings', function() {
        it('should call getInboundMessagesNotificationSettings successfully', function(done) {
          // TODO: uncomment getInboundMessagesNotificationSettings call and complete the assertions
          /*

          instance.getInboundMessagesNotificationSettings().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetInboundMessagesNotificationSettingsResponse);
            expect(data.inboundMessageNotification).to.be.a('boolean');
            expect(data.inboundMessageNotification).to.be(true);
            expect(data.forwardedCallNotification).to.be.a('boolean');
            expect(data.forwardedCallNotification).to.be(true);
            expect(data.includeSmsHistory).to.be.a('boolean');
            expect(data.includeSmsHistory).to.be(true);
            expect(data.sendInHtmlFormat).to.be.a('boolean');
            expect(data.sendInHtmlFormat).to.be(true);
            expect(data.alertEmail1).to.be.a('string');
            expect(data.alertEmail1).to.be("test@test.com");
            expect(data.alertEmail2).to.be.a('string');
            expect(data.alertEmail2).to.be("test@test.com");
            expect(data.alertEmail3).to.be.a('string');
            expect(data.alertEmail3).to.be("test@test.com");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInvoices', function() {
        it('should call getInvoices successfully', function(done) {
          // TODO: uncomment, update parameter values for getInvoices call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getInvoices(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetInvoicesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Invoice);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1099);
                expect(data.bundle).to.be.a('number');
                expect(data.bundle).to.be(200);
                expect(data.currency).to.be.a('string');
                expect(data.currency).to.be("USD");
                expect(data.vat).to.be.a('number');
                expect(data.vat).to.be(2.0);
                expect(data.paymentMethod).to.be.a('string');
                expect(data.paymentMethod).to.be("MasterCard ending in 1234");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getList', function() {
        it('should call getList successfully', function(done) {
          // TODO: uncomment, update parameter values for getList call and complete the assertions
          /*
          var id = 1;

          instance.getList(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.List);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(715);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Private list");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("Private contacts of C. R. Conway");
            expect(data.favorited).to.be.a('boolean');
            expect(data.favorited).to.be(false);
            expect(data.membersCount).to.be.a('number');
            expect(data.membersCount).to.be(332);
            expect(data.user).to.be.a(TextmagicClient.User);
                  expect(data.user.id).to.be.a('number');
              expect(data.user.id).to.be(305);
              expect(data.user.displayTimeFormat).to.be.a('string');
              expect(data.user.displayTimeFormat).to.be("24h");
              expect(data.user.username).to.be.a('string');
              expect(data.user.username).to.be("charles.conway");
              expect(data.user.firstName).to.be.a('string');
              expect(data.user.firstName).to.be("Charles");
              expect(data.user.lastName).to.be.a('string');
              expect(data.user.lastName).to.be("Conway");
              expect(data.user.email).to.be.a('string');
              expect(data.user.email).to.be("charles@example.com");
              expect(data.user.status).to.be.a('string');
              expect(data.user.status).to.be("A");
              expect(data.user.balance).to.be.a('number');
              expect(data.user.balance).to.be(208.64);
              expect(data.user.phone).to.be.a('string');
              expect(data.user.phone).to.be("447860021130");
              expect(data.user.company).to.be.a('string');
              expect(data.user.company).to.be("Example Ltd.");
              expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                    expect(data.user.currency.id).to.be.a('string');
                expect(data.user.currency.id).to.be("GBP");
                expect(data.user.currency.unicodeSymbol).to.be.a('string');
                expect(data.user.currency.unicodeSymbol).to.be("£");
                expect(data.user.currency.htmlSymbol).to.be.a('string');
                expect(data.user.currency.htmlSymbol).to.be("&pound;");
              expect(data.user.country).to.be.a(TextmagicClient.Country);
                    expect(data.user.country.id).to.be.a('string');
                expect(data.user.country.id).to.be("US");
                expect(data.user.country.name).to.be.a('string');
                expect(data.user.country.name).to.be("India");
              expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                    expect(data.user.timezone.id).to.be.a('number');
                expect(data.user.timezone.id).to.be(55);
                expect(data.user.timezone.area).to.be.a('string');
                expect(data.user.timezone.area).to.be("Europe");
                expect(data.user.timezone.dst).to.be.a('number');
                expect(data.user.timezone.dst).to.be(1);
                expect(data.user.timezone.offset).to.be.a('number');
                expect(data.user.timezone.offset).to.be(10800);
                expect(data.user.timezone.timezone).to.be.a('string');
                expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
              expect(data.user.subaccountType).to.be.a('string');
              expect(data.user.subaccountType).to.be("P");
              expect(data.user.emailAccepted).to.be.a('boolean');
              expect(data.user.emailAccepted).to.be(true);
              expect(data.user.phoneAccepted).to.be.a('boolean');
              expect(data.user.phoneAccepted).to.be(true);
              expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                    expect(data.user.avatar.href).to.be.a('string');
                expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            expect(data.service).to.be.a('boolean');
            expect(data.service).to.be(false);
            expect(data.shared).to.be.a('boolean');
            expect(data.shared).to.be(false);
            expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                  expect(data.avatar.href).to.be.a('string');
              expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            expect(data.isDefault).to.be.a('boolean');
            expect(data.isDefault).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getListContactsIds', function() {
        it('should call getListContactsIds successfully', function(done) {
          // TODO: uncomment, update parameter values for getListContactsIds call and complete the assertions
          /*
          var id = 1;

          instance.getListContactsIds(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetListContactsIdsResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLists', function() {
        it('should call getLists successfully', function(done) {
          // TODO: uncomment, update parameter values for getLists call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.orderBy = "id";
          opts.direction = "desc";
          opts.favoriteOnly = 0;
          opts.onlyMine = 0;

          instance.getLists(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetListsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.List);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(715);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Private list");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("Private contacts of C. R. Conway");
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(false);
                expect(data.membersCount).to.be.a('number');
                expect(data.membersCount).to.be(332);
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.service).to.be.a('boolean');
                expect(data.service).to.be(false);
                expect(data.shared).to.be.a('boolean');
                expect(data.shared).to.be(false);
                expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.isDefault).to.be.a('boolean');
                expect(data.isDefault).to.be(false);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getListsOfContact', function() {
        it('should call getListsOfContact successfully', function(done) {
          // TODO: uncomment, update parameter values for getListsOfContact call and complete the assertions
          /*
          var id = 1;
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getListsOfContact(id, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetListsOfContactPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.List);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(715);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Private list");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("Private contacts of C. R. Conway");
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(false);
                expect(data.membersCount).to.be.a('number');
                expect(data.membersCount).to.be(332);
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.service).to.be.a('boolean');
                expect(data.service).to.be(false);
                expect(data.shared).to.be.a('boolean');
                expect(data.shared).to.be(false);
                expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.isDefault).to.be.a('boolean');
                expect(data.isDefault).to.be(false);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessagePreview', function() {
        it('should call getMessagePreview successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessagePreview call and complete the assertions
          /*
          var opts = {};
          opts.text = "Test message test";
          opts.templateId = 1;
          opts.sendingTime = 1565606455;
          opts.sendingDateTime = "2020-05-27 13:02:33";
          opts.sendingTimezone = "America/Buenos_Aires";
          opts.contacts = "1,2,3,4";
          opts.lists = "1,2,3,4";
          opts.phones = "447860021130,447860021131";
          opts.cutExtra = 0;
          opts.partsCount = 6;
          opts.referenceId = 1;
          opts.from = "Test Sender ID";
          opts.rule = "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1";
          opts.createChat = 0;
          opts.tts = 0;
          opts.local = 0;
          opts.localCountry = "US";

          instance.getMessagePreview(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetMessagePreviewResponse);
            {
              let dataCtr = data.messages;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageOut);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(4991);
                expect(data.sender).to.be.a('string');
                expect(data.sender).to.be("447624800500");
                expect(data.receiver).to.be.a('string');
                expect(data.receiver).to.be("447860021130");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("I love TextMagic!");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("d");
                expect(data.contactId).to.be.a('number');
                expect(data.contactId).to.be(2764);
                expect(data.sessionId).to.be.a('number');
                expect(data.sessionId).to.be(3122);
                expect(data.messageTime).to.be.a(Date);
                expect(data.messageTime).to.be(2019-08-12T11:43:37+0000);
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.charset).to.be.a('string');
                expect(data.charset).to.be("ISO-8859-1");
                expect(data.charsetLabel).to.be.a('string');
                expect(data.charsetLabel).to.be("ISO-8859-1");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("John");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("US");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447624800500");
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.025);
                expect(data.partsCount).to.be.a('number');
                expect(data.partsCount).to.be(6);
                expect(data.fromEmail).to.be.a('string');
                expect(data.fromEmail).to.be("test@email.com");
                expect(data.fromNumber).to.be.a('string');
                expect(data.fromNumber).to.be("447624800500");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessagePrice', function() {
        it('should call getMessagePrice successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessagePrice call and complete the assertions
          /*
          var opts = {};
          opts.includeBlocked = 0;
          opts.text = "Test message test";
          opts.templateId = 1;
          opts.sendingTime = 1565606455;
          opts.sendingDateTime = "2020-05-27 13:02:33";
          opts.sendingTimezone = "America/Buenos_Aires";
          opts.contacts = "1,2,3,4";
          opts.lists = "1,2,3,4";
          opts.phones = "447860021130,447860021131";
          opts.cutExtra = 0;
          opts.partsCount = 6;
          opts.referenceId = 1;
          opts.from = "Test Sender ID";
          opts.rule = "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1";
          opts.createChat = 0;
          opts.tts = 0;
          opts.local = 0;
          opts.localCountry = "US";

          instance.getMessagePrice(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetMessagePriceResponse);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(0.08);
            expect(data.parts).to.be.a('number');
            expect(data.parts).to.be(6);
            {
              let dataCtr = data.countries;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.GetMessagePriceResponseCountriesItem);
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("US");
                expect(data.countryName).to.be.a('string');
                expect(data.countryName).to.be("United State");
                expect(data.allowDedicated).to.be.a('boolean');
                expect(data.allowDedicated).to.be(true);
                expect(data.count).to.be.a('number');
                expect(data.count).to.be(1.0);
                expect(data.max).to.be.a('number');
                expect(data.max).to.be(6.0);
                expect(data.sum).to.be.a('string');
                expect(data.sum).to.be("1");
                expect(data.landline).to.be.a('number');
                expect(data.landline).to.be(0.0);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessageSession', function() {
        it('should call getMessageSession successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessageSession call and complete the assertions
          /*
          var id = 1;

          instance.getMessageSession(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.MessageSession);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(4991);
            expect(data.startTime).to.be.a('string');
            expect(data.startTime).to.be("2015-06-19T09:48:24+0000");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("Hello {First name}!");
            expect(data.source).to.be.a('string');
            expect(data.source).to.be("O");
            expect(data.referenceId).to.be.a('string');
            expect(data.referenceId).to.be("my_reference_id_4991");
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(3.45);
            expect(data.numbersCount).to.be.a('number');
            expect(data.numbersCount).to.be(18);
            expect(data.destination).to.be.a('string');
            expect(data.destination).to.be("t");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessageSessionStat', function() {
        it('should call getMessageSessionStat successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessageSessionStat call and complete the assertions
          /*
          var id = 1;
          var opts = {};
          opts.includeDeleted = 0;

          instance.getMessageSessionStat(id, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetMessageSessionStatResponse);
            expect(data.failed).to.be.a('number');
            expect(data.failed).to.be(12);
            expect(data.delivered).to.be.a('number');
            expect(data.delivered).to.be(99);
            expect(data.accepted).to.be.a('number');
            expect(data.accepted).to.be(75);
            expect(data.rejected).to.be.a('number');
            expect(data.rejected).to.be(12);
            expect(data.scheduled).to.be.a('number');
            expect(data.scheduled).to.be(0);
            expect(data.all).to.be.a('number');
            expect(data.all).to.be(1);
            expect(data.sent).to.be.a('number');
            expect(data.sent).to.be(1);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessagesBySessionId', function() {
        it('should call getMessagesBySessionId successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessagesBySessionId call and complete the assertions
          /*
          var id = 1;
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.statuses = "statuses_example";
          opts.includeDeleted = 0;

          instance.getMessagesBySessionId(id, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetMessagesBySessionIdPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageOut);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(4991);
                expect(data.sender).to.be.a('string');
                expect(data.sender).to.be("447624800500");
                expect(data.receiver).to.be.a('string');
                expect(data.receiver).to.be("447860021130");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("I love TextMagic!");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("d");
                expect(data.contactId).to.be.a('number');
                expect(data.contactId).to.be(2764);
                expect(data.sessionId).to.be.a('number');
                expect(data.sessionId).to.be(3122);
                expect(data.messageTime).to.be.a(Date);
                expect(data.messageTime).to.be(2019-08-12T11:43:37+0000);
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.charset).to.be.a('string');
                expect(data.charset).to.be("ISO-8859-1");
                expect(data.charsetLabel).to.be.a('string');
                expect(data.charsetLabel).to.be("ISO-8859-1");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("John");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("US");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447624800500");
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.025);
                expect(data.partsCount).to.be.a('number');
                expect(data.partsCount).to.be(6);
                expect(data.fromEmail).to.be.a('string');
                expect(data.fromEmail).to.be("test@email.com");
                expect(data.fromNumber).to.be.a('string');
                expect(data.fromNumber).to.be("447624800500");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessagingCounters', function() {
        it('should call getMessagingCounters successfully', function(done) {
          // TODO: uncomment getMessagingCounters call and complete the assertions
          /*

          instance.getMessagingCounters().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetMessagingCountersResponse);
            expect(data.contacts).to.be.a('number');
            expect(data.contacts).to.be(10);
            expect(data.sent).to.be.a('number');
            expect(data.sent).to.be(10);
            expect(data.received).to.be.a('number');
            expect(data.received).to.be(10);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessagingStat', function() {
        it('should call getMessagingStat successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessagingStat call and complete the assertions
          /*
          var opts = {};
          opts.by = "off";
          opts.start = 1430438400;
          opts.end = 1431648000;

          instance.getMessagingStat(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetMessagingStatResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOutboundMessage', function() {
        it('should call getOutboundMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for getOutboundMessage call and complete the assertions
          /*
          var id = 1;

          instance.getOutboundMessage(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.MessageOut);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(4991);
            expect(data.sender).to.be.a('string');
            expect(data.sender).to.be("447624800500");
            expect(data.receiver).to.be.a('string');
            expect(data.receiver).to.be("447860021130");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("I love TextMagic!");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("d");
            expect(data.contactId).to.be.a('number');
            expect(data.contactId).to.be(2764);
            expect(data.sessionId).to.be.a('number');
            expect(data.sessionId).to.be(3122);
            expect(data.messageTime).to.be.a(Date);
            expect(data.messageTime).to.be(2019-08-12T11:43:37+0000);
            expect(data.avatar).to.be.a('string');
            expect(data.avatar).to.be("avatars/dummy_avatar.png");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.charset).to.be.a('string');
            expect(data.charset).to.be("ISO-8859-1");
            expect(data.charsetLabel).to.be.a('string');
            expect(data.charsetLabel).to.be("ISO-8859-1");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("John");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.country).to.be.a('string');
            expect(data.country).to.be("US");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447624800500");
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(0.025);
            expect(data.partsCount).to.be.a('number');
            expect(data.partsCount).to.be(6);
            expect(data.fromEmail).to.be.a('string');
            expect(data.fromEmail).to.be("test@email.com");
            expect(data.fromNumber).to.be.a('string');
            expect(data.fromNumber).to.be("447624800500");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOutboundMessagesHistory', function() {
        it('should call getOutboundMessagesHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getOutboundMessagesHistory call and complete the assertions
          /*
          var opts = {};
          opts.limit = 10;
          opts.lastId = 56;
          opts.query = "query_example";
          opts.orderBy = "id";
          opts.direction = "desc";

          instance.getOutboundMessagesHistory(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetOutboundMessagesHistoryPaginatedResponse);
            expect(data.lastId).to.be.a('number');
            expect(data.lastId).to.be(1);
            expect(data.nextLastId).to.be.a('number');
            expect(data.nextLastId).to.be(1);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageOut);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(4991);
                expect(data.sender).to.be.a('string');
                expect(data.sender).to.be("447624800500");
                expect(data.receiver).to.be.a('string');
                expect(data.receiver).to.be("447860021130");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("I love TextMagic!");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("d");
                expect(data.contactId).to.be.a('number');
                expect(data.contactId).to.be(2764);
                expect(data.sessionId).to.be.a('number');
                expect(data.sessionId).to.be(3122);
                expect(data.messageTime).to.be.a(Date);
                expect(data.messageTime).to.be(2019-08-12T11:43:37+0000);
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.charset).to.be.a('string');
                expect(data.charset).to.be("ISO-8859-1");
                expect(data.charsetLabel).to.be.a('string');
                expect(data.charsetLabel).to.be("ISO-8859-1");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("John");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("US");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447624800500");
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.025);
                expect(data.partsCount).to.be.a('number');
                expect(data.partsCount).to.be(6);
                expect(data.fromEmail).to.be.a('string');
                expect(data.fromEmail).to.be("test@email.com");
                expect(data.fromNumber).to.be.a('string');
                expect(data.fromNumber).to.be("447624800500");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getScheduledMessage', function() {
        it('should call getScheduledMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for getScheduledMessage call and complete the assertions
          /*
          var id = 1;

          instance.getScheduledMessage(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.MessagesIcs);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(562);
            expect(data.nextSend).to.be.a(Date);
            expect(data.nextSend).to.be(2014-10-13T05:00:00+0000);
            expect(data.rrule).to.be.a('string');
            expect(data.rrule).to.be("FREQ=DAILY;INTERVAL=2;COUNT=5;");
            expect(data.session).to.be.a(TextmagicClient.MessageSession);
                  expect(data.session.id).to.be.a('number');
              expect(data.session.id).to.be(4991);
              expect(data.session.startTime).to.be.a('string');
              expect(data.session.startTime).to.be("2015-06-19T09:48:24+0000");
              expect(data.session.text).to.be.a('string');
              expect(data.session.text).to.be("Hello {First name}!");
              expect(data.session.source).to.be.a('string');
              expect(data.session.source).to.be("O");
              expect(data.session.referenceId).to.be.a('string');
              expect(data.session.referenceId).to.be("my_reference_id_4991");
              expect(data.session.price).to.be.a('number');
              expect(data.session.price).to.be(3.45);
              expect(data.session.numbersCount).to.be.a('number');
              expect(data.session.numbersCount).to.be(18);
              expect(data.session.destination).to.be.a('string');
              expect(data.session.destination).to.be("t");
            expect(data.lastSent).to.be.a(Date);
            expect(data.lastSent).to.be(2015-06-19T09:48:24+0000);
            expect(data.contactName).to.be.a('string');
            expect(data.contactName).to.be("15 recipients");
            expect(data.parameters).to.be.a(TextmagicClient.MessagesIcsParameters);
                  expect(data.parameters.text).to.be.a('string');
              expect(data.parameters.text).to.be("I Love TextMagic!");
              expect(data.parameters.recipients).to.be.a(TextmagicClient.MessagesIcsParametersRecipients);
                    {
                  let dataCtr = data.parameters.recipients.contacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(39318);
                  }
                }
                {
                  let dataCtr = data.parameters.recipients.groups;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(39318);
                  }
                }
                {
                  let dataCtr = data.parameters.recipients.numbers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("447860021130");
                  }
                }
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("once");
            expect(data.summary).to.be.a('string');
            expect(data.summary).to.be("Every 2 weeks on Monday, Tuesday, Thursday at 10:30 (UTC+03:00)");
            expect(data.textParameters).to.be.a(TextmagicClient.MessagesIcsTextParameters);
                  expect(data.textParameters.cost).to.be.a('number');
              expect(data.textParameters.cost).to.be(0.04);
              expect(data.textParameters.parts).to.be.a('number');
              expect(data.textParameters.parts).to.be(6);
              expect(data.textParameters.chars).to.be.a('number');
              expect(data.textParameters.chars).to.be(125);
              expect(data.textParameters.encoding).to.be.a('string');
              expect(data.textParameters.encoding).to.be("ISO-8859-1");
              {
                let dataCtr = data.textParameters.countries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("US");
                }
              }
              expect(data.textParameters.charsetLabel).to.be.a('string');
              expect(data.textParameters.charsetLabel).to.be("ISO-8859-1");
            expect(data.firstOccurrence).to.be.a(Date);
            expect(data.firstOccurrence).to.be(2015-06-19T09:48:24+0000);
            expect(data.lastOccurrence).to.be.a(Date);
            expect(data.lastOccurrence).to.be(2015-06-19T09:48:24+0000);
            expect(data.recipientsCount).to.be.a('number');
            expect(data.recipientsCount).to.be(2);
            expect(data.timezone).to.be.a('string');
            expect(data.timezone).to.be("Europe/Tallinn");
            expect(data.completed).to.be.a('boolean');
            expect(data.completed).to.be(true);
            expect(data.avatar).to.be.a('string');
            expect(data.avatar).to.be("avatars/dummy_avatar.png");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSenderId', function() {
        it('should call getSenderId successfully', function(done) {
          // TODO: uncomment, update parameter values for getSenderId call and complete the assertions
          /*
          var id = 1;

          instance.getSenderId(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SenderId);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(37);
            expect(data.displayTimeFormat).to.be.a('string');
            expect(data.displayTimeFormat).to.be("24h");
            expect(data.senderId).to.be.a('string');
            expect(data.senderId).to.be("HotRod");
            expect(data.user).to.be.a(TextmagicClient.User);
                  expect(data.user.id).to.be.a('number');
              expect(data.user.id).to.be(305);
              expect(data.user.displayTimeFormat).to.be.a('string');
              expect(data.user.displayTimeFormat).to.be("24h");
              expect(data.user.username).to.be.a('string');
              expect(data.user.username).to.be("charles.conway");
              expect(data.user.firstName).to.be.a('string');
              expect(data.user.firstName).to.be("Charles");
              expect(data.user.lastName).to.be.a('string');
              expect(data.user.lastName).to.be("Conway");
              expect(data.user.email).to.be.a('string');
              expect(data.user.email).to.be("charles@example.com");
              expect(data.user.status).to.be.a('string');
              expect(data.user.status).to.be("A");
              expect(data.user.balance).to.be.a('number');
              expect(data.user.balance).to.be(208.64);
              expect(data.user.phone).to.be.a('string');
              expect(data.user.phone).to.be("447860021130");
              expect(data.user.company).to.be.a('string');
              expect(data.user.company).to.be("Example Ltd.");
              expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                    expect(data.user.currency.id).to.be.a('string');
                expect(data.user.currency.id).to.be("GBP");
                expect(data.user.currency.unicodeSymbol).to.be.a('string');
                expect(data.user.currency.unicodeSymbol).to.be("£");
                expect(data.user.currency.htmlSymbol).to.be.a('string');
                expect(data.user.currency.htmlSymbol).to.be("&pound;");
              expect(data.user.country).to.be.a(TextmagicClient.Country);
                    expect(data.user.country.id).to.be.a('string');
                expect(data.user.country.id).to.be("US");
                expect(data.user.country.name).to.be.a('string');
                expect(data.user.country.name).to.be("India");
              expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                    expect(data.user.timezone.id).to.be.a('number');
                expect(data.user.timezone.id).to.be(55);
                expect(data.user.timezone.area).to.be.a('string');
                expect(data.user.timezone.area).to.be("Europe");
                expect(data.user.timezone.dst).to.be.a('number');
                expect(data.user.timezone.dst).to.be(1);
                expect(data.user.timezone.offset).to.be.a('number');
                expect(data.user.timezone.offset).to.be(10800);
                expect(data.user.timezone.timezone).to.be.a('string');
                expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
              expect(data.user.subaccountType).to.be.a('string');
              expect(data.user.subaccountType).to.be("P");
              expect(data.user.emailAccepted).to.be.a('boolean');
              expect(data.user.emailAccepted).to.be(true);
              expect(data.user.phoneAccepted).to.be.a('boolean');
              expect(data.user.phoneAccepted).to.be(true);
              expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                    expect(data.user.avatar.href).to.be.a('string');
                expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("A");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSenderIds', function() {
        it('should call getSenderIds successfully', function(done) {
          // TODO: uncomment, update parameter values for getSenderIds call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getSenderIds(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetSenderIdsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.SenderId);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(37);
                expect(data.displayTimeFormat).to.be.a('string');
                expect(data.displayTimeFormat).to.be("24h");
                expect(data.senderId).to.be.a('string');
                expect(data.senderId).to.be("HotRod");
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("A");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSenderSettings', function() {
        it('should call getSenderSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getSenderSettings call and complete the assertions
          /*
          var opts = {};
          opts.country = "US";

          instance.getSenderSettings(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetSenderSettingsResponse);
            {
              let dataCtr = data.user;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.SenderSettingsItem);
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("US");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("+447937946700");
              }
            }
            {
              let dataCtr = data.special;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.SenderSettingsItem);
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("US");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("+447937946700");
              }
            }
            {
              let dataCtr = data.other;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.SenderSettingsItem);
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("US");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("+447937946700");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSpendingStat', function() {
        it('should call getSpendingStat successfully', function(done) {
          // TODO: uncomment, update parameter values for getSpendingStat call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.start = "2018-11-11 11:11";
          opts.end = "2019-11-11 11:11";

          instance.getSpendingStat(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetSpendingStatPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.UserStatement);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(305);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(4627);
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(2014-09-19T00:00:00+0000);
                expect(data.balance).to.be.a('number');
                expect(data.balance).to.be(101.05);
                expect(data.delta).to.be.a('number');
                expect(data.delta).to.be(-0.15);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("sms");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("350");
                expect(data.comment).to.be.a('string');
                expect(data.comment).to.be("This is a test comment");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSubaccount', function() {
        it('should call getSubaccount successfully', function(done) {
          // TODO: uncomment, update parameter values for getSubaccount call and complete the assertions
          /*
          var id = 1;

          instance.getSubaccount(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.User);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(305);
            expect(data.displayTimeFormat).to.be.a('string');
            expect(data.displayTimeFormat).to.be("24h");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("charles.conway");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("charles@example.com");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("A");
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be(208.64);
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("Example Ltd.");
            expect(data.currency).to.be.a(TextmagicClient.Currency);
                  expect(data.currency.id).to.be.a('string');
              expect(data.currency.id).to.be("GBP");
              expect(data.currency.unicodeSymbol).to.be.a('string');
              expect(data.currency.unicodeSymbol).to.be("£");
              expect(data.currency.htmlSymbol).to.be.a('string');
              expect(data.currency.htmlSymbol).to.be("&pound;");
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            expect(data.timezone).to.be.a(TextmagicClient.Timezone);
                  expect(data.timezone.id).to.be.a('number');
              expect(data.timezone.id).to.be(55);
              expect(data.timezone.area).to.be.a('string');
              expect(data.timezone.area).to.be("Europe");
              expect(data.timezone.dst).to.be.a('number');
              expect(data.timezone.dst).to.be(1);
              expect(data.timezone.offset).to.be.a('number');
              expect(data.timezone.offset).to.be(10800);
              expect(data.timezone.timezone).to.be.a('string');
              expect(data.timezone.timezone).to.be("Europe\/Tallinn");
            expect(data.subaccountType).to.be.a('string');
            expect(data.subaccountType).to.be("P");
            expect(data.emailAccepted).to.be.a('boolean');
            expect(data.emailAccepted).to.be(true);
            expect(data.phoneAccepted).to.be.a('boolean');
            expect(data.phoneAccepted).to.be(true);
            expect(data.avatar).to.be.a(TextmagicClient.UserImage);
                  expect(data.avatar.href).to.be.a('string');
              expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSubaccounts', function() {
        it('should call getSubaccounts successfully', function(done) {
          // TODO: uncomment, update parameter values for getSubaccounts call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getSubaccounts(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.User);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(305);
            expect(data.displayTimeFormat).to.be.a('string');
            expect(data.displayTimeFormat).to.be("24h");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("charles.conway");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("charles@example.com");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("A");
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be(208.64);
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("Example Ltd.");
            expect(data.currency).to.be.a(TextmagicClient.Currency);
                  expect(data.currency.id).to.be.a('string');
              expect(data.currency.id).to.be("GBP");
              expect(data.currency.unicodeSymbol).to.be.a('string');
              expect(data.currency.unicodeSymbol).to.be("£");
              expect(data.currency.htmlSymbol).to.be.a('string');
              expect(data.currency.htmlSymbol).to.be("&pound;");
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            expect(data.timezone).to.be.a(TextmagicClient.Timezone);
                  expect(data.timezone.id).to.be.a('number');
              expect(data.timezone.id).to.be(55);
              expect(data.timezone.area).to.be.a('string');
              expect(data.timezone.area).to.be("Europe");
              expect(data.timezone.dst).to.be.a('number');
              expect(data.timezone.dst).to.be(1);
              expect(data.timezone.offset).to.be.a('number');
              expect(data.timezone.offset).to.be(10800);
              expect(data.timezone.timezone).to.be.a('string');
              expect(data.timezone.timezone).to.be("Europe\/Tallinn");
            expect(data.subaccountType).to.be.a('string');
            expect(data.subaccountType).to.be("P");
            expect(data.emailAccepted).to.be.a('boolean');
            expect(data.emailAccepted).to.be(true);
            expect(data.phoneAccepted).to.be.a('boolean');
            expect(data.phoneAccepted).to.be(true);
            expect(data.avatar).to.be.a(TextmagicClient.UserImage);
                  expect(data.avatar.href).to.be.a('string');
              expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSubaccountsWithTokens', function() {
        it('should call getSubaccountsWithTokens successfully', function(done) {
          // TODO: uncomment, update parameter values for getSubaccountsWithTokens call and complete the assertions
          /*
          var getSubaccountsWithTokensInputObject = new TextmagicClient.GetSubaccountsWithTokensInputObject();
          getSubaccountsWithTokensInputObject.appName = "sample app";
          getSubaccountsWithTokensInputObject.password = "strongPassword";
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getSubaccountsWithTokens(getSubaccountsWithTokensInputObject, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetSubaccountsWithTokensResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTemplate', function() {
        it('should call getTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for getTemplate call and complete the assertions
          /*
          var id = 1;

          instance.getTemplate(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.MessageTemplate);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(519);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Appointment reminder");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("Hello {First name}!");
            expect(data.lastModified).to.be.a(Date);
            expect(data.lastModified).to.be(2014-09-11T08:12:01+0000);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTimezones', function() {
        it('should call getTimezones successfully', function(done) {
          // TODO: uncomment, update parameter values for getTimezones call and complete the assertions
          /*
          var opts = {};
          opts.full = 0;

          instance.getTimezones(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetTimezonesResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUnreadMessagesTotal', function() {
        it('should call getUnreadMessagesTotal successfully', function(done) {
          // TODO: uncomment getUnreadMessagesTotal call and complete the assertions
          /*

          instance.getUnreadMessagesTotal().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetUnreadMessagesTotalResponse);
            expect(data.total).to.be.a('number');
            expect(data.total).to.be(22);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUnsubscribedContact', function() {
        it('should call getUnsubscribedContact successfully', function(done) {
          // TODO: uncomment, update parameter values for getUnsubscribedContact call and complete the assertions
          /*
          var id = 1;

          instance.getUnsubscribedContact(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.UnsubscribedContact);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(27074);
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.unsubscribeTime).to.be.a(Date);
            expect(data.unsubscribeTime).to.be(2015-01-09T18:59:46+0000);
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUnsubscribers', function() {
        it('should call getUnsubscribers successfully', function(done) {
          // TODO: uncomment, update parameter values for getUnsubscribers call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;

          instance.getUnsubscribers(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetUnsubscribersPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.UnsubscribedContact);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(27074);
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.unsubscribeTime).to.be.a(Date);
                expect(data.unsubscribeTime).to.be(2015-01-09T18:59:46+0000);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Charles");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserDedicatedNumbers', function() {
        it('should call getUserDedicatedNumbers successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserDedicatedNumbers call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.surveyId = 56;

          instance.getUserDedicatedNumbers(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.GetUserDedicatedNumbersPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.UsersInbound);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(305);
                expect(data.displayTimeFormat).to.be.a('string');
                expect(data.displayTimeFormat).to.be("24h");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.purchasedAt).to.be.a(Date);
                expect(data.purchasedAt).to.be(2014-10-02T11:07:04+0000);
                expect(data.expireAt).to.be.a(Date);
                expect(data.expireAt).to.be(2014-10-02T11:07:04+0000);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("U");
                expect(data.country).to.be.a(TextmagicClient.Country);
                      expect(data.country.id).to.be.a('string');
                  expect(data.country.id).to.be("US");
                  expect(data.country.name).to.be.a('string');
                  expect(data.country.name).to.be("India");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('importContacts', function() {
        it('should call importContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for importContacts call and complete the assertions
          /*
          var file = "/path/to/file.txt";
          var column = "0:firstName;1:lastName;3:phone;4:email";
          var opts = {};
          opts.listId = 443;
          opts.listName = "A new list";

          instance.importContacts(file, column, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('inviteSubaccount', function() {
        it('should call inviteSubaccount successfully', function(done) {
          // TODO: uncomment, update parameter values for inviteSubaccount call
          /*
          var inviteSubaccountInputObject = new TextmagicClient.InviteSubaccountInputObject();
          inviteSubaccountInputObject.email = "john@example.com";
          inviteSubaccountInputObject.role = "U";

          instance.inviteSubaccount(inviteSubaccountInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('markChatsReadBulk', function() {
        it('should call markChatsReadBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for markChatsReadBulk call
          /*
          var markChatsReadBulkInputObject = new TextmagicClient.MarkChatsReadBulkInputObject();
          markChatsReadBulkInputObject.ids = "1,2,3";
          markChatsReadBulkInputObject.all = false;

          instance.markChatsReadBulk(markChatsReadBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('markChatsUnreadBulk', function() {
        it('should call markChatsUnreadBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for markChatsUnreadBulk call
          /*
          var markChatsUnreadBulkInputObject = new TextmagicClient.MarkChatsUnreadBulkInputObject();
          markChatsUnreadBulkInputObject.ids = "1,2,3";
          markChatsUnreadBulkInputObject.all = false;

          instance.markChatsUnreadBulk(markChatsUnreadBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('muteChat', function() {
        it('should call muteChat successfully', function(done) {
          // TODO: uncomment, update parameter values for muteChat call and complete the assertions
          /*
          var muteChatInputObject = new TextmagicClient.MuteChatInputObject();
          muteChatInputObject.id = 542;
          muteChatInputObject.mute = true;
          muteChatInputObject._for = 5;

          instance.muteChat(muteChatInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('muteChatsBulk', function() {
        it('should call muteChatsBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for muteChatsBulk call
          /*
          var muteChatsBulkInputObject = new TextmagicClient.MuteChatsBulkInputObject();
          muteChatsBulkInputObject.ids = "1,2,3";
          muteChatsBulkInputObject.all = false;
          muteChatsBulkInputObject._for = 1;

          instance.muteChatsBulk(muteChatsBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ping', function() {
        it('should call ping successfully', function(done) {
          // TODO: uncomment ping call and complete the assertions
          /*

          instance.ping().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.PingResponse);
            expect(data.userId).to.be.a('number');
            expect(data.userId).to.be(123);
            expect(data.ping).to.be.a('string');
            expect(data.ping).to.be("pong");
            expect(data.utcDateTime).to.be.a('string');
            expect(data.utcDateTime).to.be("2019-01-01T00:00:00.000Z");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reopenChatsBulk', function() {
        it('should call reopenChatsBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for reopenChatsBulk call
          /*
          var reopenChatsBulkInputObject = new TextmagicClient.ReopenChatsBulkInputObject();
          reopenChatsBulkInputObject.ids = "1,2,3";
          reopenChatsBulkInputObject.all = false;

          instance.reopenChatsBulk(reopenChatsBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('requestNewSubaccountToken', function() {
        it('should call requestNewSubaccountToken successfully', function(done) {
          // TODO: uncomment, update parameter values for requestNewSubaccountToken call and complete the assertions
          /*
          var requestNewSubaccountTokenInputObject = new TextmagicClient.RequestNewSubaccountTokenInputObject();
          requestNewSubaccountTokenInputObject.userId = 1;
          requestNewSubaccountTokenInputObject.password = "strongPassword";
          requestNewSubaccountTokenInputObject.appName = "sample app";

          instance.requestNewSubaccountToken(requestNewSubaccountTokenInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.User);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(305);
            expect(data.displayTimeFormat).to.be.a('string');
            expect(data.displayTimeFormat).to.be("24h");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("charles.conway");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("charles@example.com");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("A");
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be(208.64);
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("Example Ltd.");
            expect(data.currency).to.be.a(TextmagicClient.Currency);
                  expect(data.currency.id).to.be.a('string');
              expect(data.currency.id).to.be("GBP");
              expect(data.currency.unicodeSymbol).to.be.a('string');
              expect(data.currency.unicodeSymbol).to.be("£");
              expect(data.currency.htmlSymbol).to.be.a('string');
              expect(data.currency.htmlSymbol).to.be("&pound;");
            expect(data.country).to.be.a(TextmagicClient.Country);
                  expect(data.country.id).to.be.a('string');
              expect(data.country.id).to.be("US");
              expect(data.country.name).to.be.a('string');
              expect(data.country.name).to.be("India");
            expect(data.timezone).to.be.a(TextmagicClient.Timezone);
                  expect(data.timezone.id).to.be.a('number');
              expect(data.timezone.id).to.be(55);
              expect(data.timezone.area).to.be.a('string');
              expect(data.timezone.area).to.be("Europe");
              expect(data.timezone.dst).to.be.a('number');
              expect(data.timezone.dst).to.be(1);
              expect(data.timezone.offset).to.be.a('number');
              expect(data.timezone.offset).to.be(10800);
              expect(data.timezone.timezone).to.be.a('string');
              expect(data.timezone.timezone).to.be("Europe\/Tallinn");
            expect(data.subaccountType).to.be.a('string');
            expect(data.subaccountType).to.be("P");
            expect(data.emailAccepted).to.be.a('boolean');
            expect(data.emailAccepted).to.be(true);
            expect(data.phoneAccepted).to.be.a('boolean');
            expect(data.phoneAccepted).to.be(true);
            expect(data.avatar).to.be.a(TextmagicClient.UserImage);
                  expect(data.avatar.href).to.be.a('string');
              expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('requestSenderId', function() {
        it('should call requestSenderId successfully', function(done) {
          // TODO: uncomment, update parameter values for requestSenderId call and complete the assertions
          /*
          var requestSenderIdInputObject = new TextmagicClient.RequestSenderIdInputObject();
          requestSenderIdInputObject.senderId = "HotRod";
          requestSenderIdInputObject.explanation = "Because it equals to my company name.";

          instance.requestSenderId(requestSenderIdInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchChats', function() {
        it('should call searchChats successfully', function(done) {
          // TODO: uncomment, update parameter values for searchChats call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.query = "query_example";

          instance.searchChats(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SearchChatsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Chat);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(43328);
                expect(data.originalId).to.be.a('number');
                expect(data.originalId).to.be(43328);
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.contact).to.be.a(TextmagicClient.Contact);
                      expect(data.contact.id).to.be.a('number');
                  expect(data.contact.id).to.be(27074);
                  expect(data.contact.favorited).to.be.a('boolean');
                  expect(data.contact.favorited).to.be(true);
                  expect(data.contact.blocked).to.be.a('boolean');
                  expect(data.contact.blocked).to.be(true);
                  expect(data.contact.firstName).to.be.a('string');
                  expect(data.contact.firstName).to.be("Charles");
                  expect(data.contact.lastName).to.be.a('string');
                  expect(data.contact.lastName).to.be("Conway");
                  expect(data.contact.companyName).to.be.a('string');
                  expect(data.contact.companyName).to.be("Example Ltd.");
                  expect(data.contact.phone).to.be.a('string');
                  expect(data.contact.phone).to.be("447860021130");
                  expect(data.contact.email).to.be.a('string');
                  expect(data.contact.email).to.be("charles@example.com");
                  expect(data.contact.country).to.be.a(TextmagicClient.Country);
                        expect(data.contact.country.id).to.be.a('string');
                    expect(data.contact.country.id).to.be("US");
                    expect(data.contact.country.name).to.be.a('string');
                    expect(data.contact.country.name).to.be("India");
                  {
                    let dataCtr = data.contact.customFields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.ContactCustomField);
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
                      expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                            expect(data.userCustomField.id).to.be.a('number');
                        expect(data.userCustomField.id).to.be(23);
                        expect(data.userCustomField.name).to.be.a('string');
                        expect(data.userCustomField.name).to.be("DOB");
                        expect(data.userCustomField.createdAt).to.be.a(Date);
                        expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                    }
                  }
                  expect(data.contact.user).to.be.a(TextmagicClient.User);
                        expect(data.contact.user.id).to.be.a('number');
                    expect(data.contact.user.id).to.be(305);
                    expect(data.contact.user.displayTimeFormat).to.be.a('string');
                    expect(data.contact.user.displayTimeFormat).to.be("24h");
                    expect(data.contact.user.username).to.be.a('string');
                    expect(data.contact.user.username).to.be("charles.conway");
                    expect(data.contact.user.firstName).to.be.a('string');
                    expect(data.contact.user.firstName).to.be("Charles");
                    expect(data.contact.user.lastName).to.be.a('string');
                    expect(data.contact.user.lastName).to.be("Conway");
                    expect(data.contact.user.email).to.be.a('string');
                    expect(data.contact.user.email).to.be("charles@example.com");
                    expect(data.contact.user.status).to.be.a('string');
                    expect(data.contact.user.status).to.be("A");
                    expect(data.contact.user.balance).to.be.a('number');
                    expect(data.contact.user.balance).to.be(208.64);
                    expect(data.contact.user.phone).to.be.a('string');
                    expect(data.contact.user.phone).to.be("447860021130");
                    expect(data.contact.user.company).to.be.a('string');
                    expect(data.contact.user.company).to.be("Example Ltd.");
                    expect(data.contact.user.currency).to.be.a(TextmagicClient.Currency);
                          expect(data.contact.user.currency.id).to.be.a('string');
                      expect(data.contact.user.currency.id).to.be("GBP");
                      expect(data.contact.user.currency.unicodeSymbol).to.be.a('string');
                      expect(data.contact.user.currency.unicodeSymbol).to.be("£");
                      expect(data.contact.user.currency.htmlSymbol).to.be.a('string');
                      expect(data.contact.user.currency.htmlSymbol).to.be("&pound;");
                    expect(data.contact.user.country).to.be.a(TextmagicClient.Country);
                          expect(data.contact.user.country.id).to.be.a('string');
                      expect(data.contact.user.country.id).to.be("US");
                      expect(data.contact.user.country.name).to.be.a('string');
                      expect(data.contact.user.country.name).to.be("India");
                    expect(data.contact.user.timezone).to.be.a(TextmagicClient.Timezone);
                          expect(data.contact.user.timezone.id).to.be.a('number');
                      expect(data.contact.user.timezone.id).to.be(55);
                      expect(data.contact.user.timezone.area).to.be.a('string');
                      expect(data.contact.user.timezone.area).to.be("Europe");
                      expect(data.contact.user.timezone.dst).to.be.a('number');
                      expect(data.contact.user.timezone.dst).to.be(1);
                      expect(data.contact.user.timezone.offset).to.be.a('number');
                      expect(data.contact.user.timezone.offset).to.be(10800);
                      expect(data.contact.user.timezone.timezone).to.be.a('string');
                      expect(data.contact.user.timezone.timezone).to.be("Europe\/Tallinn");
                    expect(data.contact.user.subaccountType).to.be.a('string');
                    expect(data.contact.user.subaccountType).to.be("P");
                    expect(data.contact.user.emailAccepted).to.be.a('boolean');
                    expect(data.contact.user.emailAccepted).to.be(true);
                    expect(data.contact.user.phoneAccepted).to.be.a('boolean');
                    expect(data.contact.user.phoneAccepted).to.be(true);
                    expect(data.contact.user.avatar).to.be.a(TextmagicClient.UserImage);
                          expect(data.contact.user.avatar.href).to.be.a('string');
                      expect(data.contact.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  {
                    let dataCtr = data.contact.lists;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.List);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(715);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("Private list");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("Private contacts of C. R. Conway");
                      expect(data.favorited).to.be.a('boolean');
                      expect(data.favorited).to.be(false);
                      expect(data.membersCount).to.be.a('number');
                      expect(data.membersCount).to.be(332);
                      expect(data.user).to.be.a(TextmagicClient.User);
                            expect(data.user.id).to.be.a('number');
                        expect(data.user.id).to.be(305);
                        expect(data.user.displayTimeFormat).to.be.a('string');
                        expect(data.user.displayTimeFormat).to.be("24h");
                        expect(data.user.username).to.be.a('string');
                        expect(data.user.username).to.be("charles.conway");
                        expect(data.user.firstName).to.be.a('string');
                        expect(data.user.firstName).to.be("Charles");
                        expect(data.user.lastName).to.be.a('string');
                        expect(data.user.lastName).to.be("Conway");
                        expect(data.user.email).to.be.a('string');
                        expect(data.user.email).to.be("charles@example.com");
                        expect(data.user.status).to.be.a('string');
                        expect(data.user.status).to.be("A");
                        expect(data.user.balance).to.be.a('number');
                        expect(data.user.balance).to.be(208.64);
                        expect(data.user.phone).to.be.a('string');
                        expect(data.user.phone).to.be("447860021130");
                        expect(data.user.company).to.be.a('string');
                        expect(data.user.company).to.be("Example Ltd.");
                        expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                              expect(data.user.currency.id).to.be.a('string');
                          expect(data.user.currency.id).to.be("GBP");
                          expect(data.user.currency.unicodeSymbol).to.be.a('string');
                          expect(data.user.currency.unicodeSymbol).to.be("£");
                          expect(data.user.currency.htmlSymbol).to.be.a('string');
                          expect(data.user.currency.htmlSymbol).to.be("&pound;");
                        expect(data.user.country).to.be.a(TextmagicClient.Country);
                              expect(data.user.country.id).to.be.a('string');
                          expect(data.user.country.id).to.be("US");
                          expect(data.user.country.name).to.be.a('string');
                          expect(data.user.country.name).to.be("India");
                        expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                              expect(data.user.timezone.id).to.be.a('number');
                          expect(data.user.timezone.id).to.be(55);
                          expect(data.user.timezone.area).to.be.a('string');
                          expect(data.user.timezone.area).to.be("Europe");
                          expect(data.user.timezone.dst).to.be.a('number');
                          expect(data.user.timezone.dst).to.be(1);
                          expect(data.user.timezone.offset).to.be.a('number');
                          expect(data.user.timezone.offset).to.be(10800);
                          expect(data.user.timezone.timezone).to.be.a('string');
                          expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                        expect(data.user.subaccountType).to.be.a('string');
                        expect(data.user.subaccountType).to.be("P");
                        expect(data.user.emailAccepted).to.be.a('boolean');
                        expect(data.user.emailAccepted).to.be(true);
                        expect(data.user.phoneAccepted).to.be.a('boolean');
                        expect(data.user.phoneAccepted).to.be(true);
                        expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                              expect(data.user.avatar.href).to.be.a('string');
                          expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                      expect(data.service).to.be.a('boolean');
                      expect(data.service).to.be(false);
                      expect(data.shared).to.be.a('boolean');
                      expect(data.shared).to.be(false);
                      expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                            expect(data.avatar.href).to.be.a('string');
                        expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                      expect(data.isDefault).to.be.a('boolean');
                      expect(data.isDefault).to.be(false);
                    }
                  }
                  expect(data.contact.phoneType).to.be.a('string');
                  expect(data.contact.phoneType).to.be("");
                  expect(data.contact.avatar).to.be.a(TextmagicClient.ContactImage);
                        expect(data.contact.avatar.href).to.be.a('string');
                    expect(data.contact.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  {
                    let dataCtr = data.contact.notes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.ContactNote);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(5);
                      expect(data.createdAt).to.be.a(Date);
                      expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                      expect(data.note).to.be.a('string');
                      expect(data.note).to.be("Test note");
                      expect(data.user).to.be.a(TextmagicClient.User);
                            expect(data.user.id).to.be.a('number');
                        expect(data.user.id).to.be(305);
                        expect(data.user.displayTimeFormat).to.be.a('string');
                        expect(data.user.displayTimeFormat).to.be("24h");
                        expect(data.user.username).to.be.a('string');
                        expect(data.user.username).to.be("charles.conway");
                        expect(data.user.firstName).to.be.a('string');
                        expect(data.user.firstName).to.be("Charles");
                        expect(data.user.lastName).to.be.a('string');
                        expect(data.user.lastName).to.be("Conway");
                        expect(data.user.email).to.be.a('string');
                        expect(data.user.email).to.be("charles@example.com");
                        expect(data.user.status).to.be.a('string');
                        expect(data.user.status).to.be("A");
                        expect(data.user.balance).to.be.a('number');
                        expect(data.user.balance).to.be(208.64);
                        expect(data.user.phone).to.be.a('string');
                        expect(data.user.phone).to.be("447860021130");
                        expect(data.user.company).to.be.a('string');
                        expect(data.user.company).to.be("Example Ltd.");
                        expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                              expect(data.user.currency.id).to.be.a('string');
                          expect(data.user.currency.id).to.be("GBP");
                          expect(data.user.currency.unicodeSymbol).to.be.a('string');
                          expect(data.user.currency.unicodeSymbol).to.be("£");
                          expect(data.user.currency.htmlSymbol).to.be.a('string');
                          expect(data.user.currency.htmlSymbol).to.be("&pound;");
                        expect(data.user.country).to.be.a(TextmagicClient.Country);
                              expect(data.user.country.id).to.be.a('string');
                          expect(data.user.country.id).to.be("US");
                          expect(data.user.country.name).to.be.a('string');
                          expect(data.user.country.name).to.be("India");
                        expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                              expect(data.user.timezone.id).to.be.a('number');
                          expect(data.user.timezone.id).to.be(55);
                          expect(data.user.timezone.area).to.be.a('string');
                          expect(data.user.timezone.area).to.be("Europe");
                          expect(data.user.timezone.dst).to.be.a('number');
                          expect(data.user.timezone.dst).to.be(1);
                          expect(data.user.timezone.offset).to.be.a('number');
                          expect(data.user.timezone.offset).to.be(10800);
                          expect(data.user.timezone.timezone).to.be.a('string');
                          expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                        expect(data.user.subaccountType).to.be.a('string');
                        expect(data.user.subaccountType).to.be("P");
                        expect(data.user.emailAccepted).to.be.a('boolean');
                        expect(data.user.emailAccepted).to.be(true);
                        expect(data.user.phoneAccepted).to.be.a('boolean');
                        expect(data.user.phoneAccepted).to.be(true);
                        expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                              expect(data.user.avatar.href).to.be.a('string');
                          expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    }
                  }
                expect(data.unsubscribedContactId).to.be.a('number');
                expect(data.unsubscribedContactId).to.be(546);
                expect(data.unread).to.be.a('number');
                expect(data.unread).to.be(5);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2015-01-08T06:13:21+0000);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("a");
                expect(data.mute).to.be.a('number');
                expect(data.mute).to.be(0);
                expect(data.lastMessage).to.be.a('string');
                expect(data.lastMessage).to.be("Hello world!");
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("ci");
                expect(data.from).to.be.a('string');
                expect(data.from).to.be("447860021130");
                expect(data.mutedUntil).to.be.a(Date);
                expect(data.mutedUntil).to.be(2019-10-10T14:44:00+0000);
                expect(data.timeLeftMute).to.be.a('number');
                expect(data.timeLeftMute).to.be(17988);
                expect(data.country).to.be.a(TextmagicClient.Country);
                      expect(data.country.id).to.be.a('string');
                  expect(data.country.id).to.be("US");
                  expect(data.country.name).to.be.a('string');
                  expect(data.country.name).to.be("India");
                expect(data.pinned).to.be.a('boolean');
                expect(data.pinned).to.be(true);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchChatsByIds', function() {
        it('should call searchChatsByIds successfully', function(done) {
          // TODO: uncomment, update parameter values for searchChatsByIds call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.ids = "ids_example";

          instance.searchChatsByIds(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SearchChatsByIdsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Chat);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(43328);
                expect(data.originalId).to.be.a('number');
                expect(data.originalId).to.be(43328);
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.contact).to.be.a(TextmagicClient.Contact);
                      expect(data.contact.id).to.be.a('number');
                  expect(data.contact.id).to.be(27074);
                  expect(data.contact.favorited).to.be.a('boolean');
                  expect(data.contact.favorited).to.be(true);
                  expect(data.contact.blocked).to.be.a('boolean');
                  expect(data.contact.blocked).to.be(true);
                  expect(data.contact.firstName).to.be.a('string');
                  expect(data.contact.firstName).to.be("Charles");
                  expect(data.contact.lastName).to.be.a('string');
                  expect(data.contact.lastName).to.be("Conway");
                  expect(data.contact.companyName).to.be.a('string');
                  expect(data.contact.companyName).to.be("Example Ltd.");
                  expect(data.contact.phone).to.be.a('string');
                  expect(data.contact.phone).to.be("447860021130");
                  expect(data.contact.email).to.be.a('string');
                  expect(data.contact.email).to.be("charles@example.com");
                  expect(data.contact.country).to.be.a(TextmagicClient.Country);
                        expect(data.contact.country.id).to.be.a('string');
                    expect(data.contact.country.id).to.be("US");
                    expect(data.contact.country.name).to.be.a('string');
                    expect(data.contact.country.name).to.be("India");
                  {
                    let dataCtr = data.contact.customFields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.ContactCustomField);
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
                      expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                            expect(data.userCustomField.id).to.be.a('number');
                        expect(data.userCustomField.id).to.be(23);
                        expect(data.userCustomField.name).to.be.a('string');
                        expect(data.userCustomField.name).to.be("DOB");
                        expect(data.userCustomField.createdAt).to.be.a(Date);
                        expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                    }
                  }
                  expect(data.contact.user).to.be.a(TextmagicClient.User);
                        expect(data.contact.user.id).to.be.a('number');
                    expect(data.contact.user.id).to.be(305);
                    expect(data.contact.user.displayTimeFormat).to.be.a('string');
                    expect(data.contact.user.displayTimeFormat).to.be("24h");
                    expect(data.contact.user.username).to.be.a('string');
                    expect(data.contact.user.username).to.be("charles.conway");
                    expect(data.contact.user.firstName).to.be.a('string');
                    expect(data.contact.user.firstName).to.be("Charles");
                    expect(data.contact.user.lastName).to.be.a('string');
                    expect(data.contact.user.lastName).to.be("Conway");
                    expect(data.contact.user.email).to.be.a('string');
                    expect(data.contact.user.email).to.be("charles@example.com");
                    expect(data.contact.user.status).to.be.a('string');
                    expect(data.contact.user.status).to.be("A");
                    expect(data.contact.user.balance).to.be.a('number');
                    expect(data.contact.user.balance).to.be(208.64);
                    expect(data.contact.user.phone).to.be.a('string');
                    expect(data.contact.user.phone).to.be("447860021130");
                    expect(data.contact.user.company).to.be.a('string');
                    expect(data.contact.user.company).to.be("Example Ltd.");
                    expect(data.contact.user.currency).to.be.a(TextmagicClient.Currency);
                          expect(data.contact.user.currency.id).to.be.a('string');
                      expect(data.contact.user.currency.id).to.be("GBP");
                      expect(data.contact.user.currency.unicodeSymbol).to.be.a('string');
                      expect(data.contact.user.currency.unicodeSymbol).to.be("£");
                      expect(data.contact.user.currency.htmlSymbol).to.be.a('string');
                      expect(data.contact.user.currency.htmlSymbol).to.be("&pound;");
                    expect(data.contact.user.country).to.be.a(TextmagicClient.Country);
                          expect(data.contact.user.country.id).to.be.a('string');
                      expect(data.contact.user.country.id).to.be("US");
                      expect(data.contact.user.country.name).to.be.a('string');
                      expect(data.contact.user.country.name).to.be("India");
                    expect(data.contact.user.timezone).to.be.a(TextmagicClient.Timezone);
                          expect(data.contact.user.timezone.id).to.be.a('number');
                      expect(data.contact.user.timezone.id).to.be(55);
                      expect(data.contact.user.timezone.area).to.be.a('string');
                      expect(data.contact.user.timezone.area).to.be("Europe");
                      expect(data.contact.user.timezone.dst).to.be.a('number');
                      expect(data.contact.user.timezone.dst).to.be(1);
                      expect(data.contact.user.timezone.offset).to.be.a('number');
                      expect(data.contact.user.timezone.offset).to.be(10800);
                      expect(data.contact.user.timezone.timezone).to.be.a('string');
                      expect(data.contact.user.timezone.timezone).to.be("Europe\/Tallinn");
                    expect(data.contact.user.subaccountType).to.be.a('string');
                    expect(data.contact.user.subaccountType).to.be("P");
                    expect(data.contact.user.emailAccepted).to.be.a('boolean');
                    expect(data.contact.user.emailAccepted).to.be(true);
                    expect(data.contact.user.phoneAccepted).to.be.a('boolean');
                    expect(data.contact.user.phoneAccepted).to.be(true);
                    expect(data.contact.user.avatar).to.be.a(TextmagicClient.UserImage);
                          expect(data.contact.user.avatar.href).to.be.a('string');
                      expect(data.contact.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  {
                    let dataCtr = data.contact.lists;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.List);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(715);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("Private list");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("Private contacts of C. R. Conway");
                      expect(data.favorited).to.be.a('boolean');
                      expect(data.favorited).to.be(false);
                      expect(data.membersCount).to.be.a('number');
                      expect(data.membersCount).to.be(332);
                      expect(data.user).to.be.a(TextmagicClient.User);
                            expect(data.user.id).to.be.a('number');
                        expect(data.user.id).to.be(305);
                        expect(data.user.displayTimeFormat).to.be.a('string');
                        expect(data.user.displayTimeFormat).to.be("24h");
                        expect(data.user.username).to.be.a('string');
                        expect(data.user.username).to.be("charles.conway");
                        expect(data.user.firstName).to.be.a('string');
                        expect(data.user.firstName).to.be("Charles");
                        expect(data.user.lastName).to.be.a('string');
                        expect(data.user.lastName).to.be("Conway");
                        expect(data.user.email).to.be.a('string');
                        expect(data.user.email).to.be("charles@example.com");
                        expect(data.user.status).to.be.a('string');
                        expect(data.user.status).to.be("A");
                        expect(data.user.balance).to.be.a('number');
                        expect(data.user.balance).to.be(208.64);
                        expect(data.user.phone).to.be.a('string');
                        expect(data.user.phone).to.be("447860021130");
                        expect(data.user.company).to.be.a('string');
                        expect(data.user.company).to.be("Example Ltd.");
                        expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                              expect(data.user.currency.id).to.be.a('string');
                          expect(data.user.currency.id).to.be("GBP");
                          expect(data.user.currency.unicodeSymbol).to.be.a('string');
                          expect(data.user.currency.unicodeSymbol).to.be("£");
                          expect(data.user.currency.htmlSymbol).to.be.a('string');
                          expect(data.user.currency.htmlSymbol).to.be("&pound;");
                        expect(data.user.country).to.be.a(TextmagicClient.Country);
                              expect(data.user.country.id).to.be.a('string');
                          expect(data.user.country.id).to.be("US");
                          expect(data.user.country.name).to.be.a('string');
                          expect(data.user.country.name).to.be("India");
                        expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                              expect(data.user.timezone.id).to.be.a('number');
                          expect(data.user.timezone.id).to.be(55);
                          expect(data.user.timezone.area).to.be.a('string');
                          expect(data.user.timezone.area).to.be("Europe");
                          expect(data.user.timezone.dst).to.be.a('number');
                          expect(data.user.timezone.dst).to.be(1);
                          expect(data.user.timezone.offset).to.be.a('number');
                          expect(data.user.timezone.offset).to.be(10800);
                          expect(data.user.timezone.timezone).to.be.a('string');
                          expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                        expect(data.user.subaccountType).to.be.a('string');
                        expect(data.user.subaccountType).to.be("P");
                        expect(data.user.emailAccepted).to.be.a('boolean');
                        expect(data.user.emailAccepted).to.be(true);
                        expect(data.user.phoneAccepted).to.be.a('boolean');
                        expect(data.user.phoneAccepted).to.be(true);
                        expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                              expect(data.user.avatar.href).to.be.a('string');
                          expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                      expect(data.service).to.be.a('boolean');
                      expect(data.service).to.be(false);
                      expect(data.shared).to.be.a('boolean');
                      expect(data.shared).to.be(false);
                      expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                            expect(data.avatar.href).to.be.a('string');
                        expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                      expect(data.isDefault).to.be.a('boolean');
                      expect(data.isDefault).to.be(false);
                    }
                  }
                  expect(data.contact.phoneType).to.be.a('string');
                  expect(data.contact.phoneType).to.be("");
                  expect(data.contact.avatar).to.be.a(TextmagicClient.ContactImage);
                        expect(data.contact.avatar.href).to.be.a('string');
                    expect(data.contact.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  {
                    let dataCtr = data.contact.notes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.ContactNote);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(5);
                      expect(data.createdAt).to.be.a(Date);
                      expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                      expect(data.note).to.be.a('string');
                      expect(data.note).to.be("Test note");
                      expect(data.user).to.be.a(TextmagicClient.User);
                            expect(data.user.id).to.be.a('number');
                        expect(data.user.id).to.be(305);
                        expect(data.user.displayTimeFormat).to.be.a('string');
                        expect(data.user.displayTimeFormat).to.be("24h");
                        expect(data.user.username).to.be.a('string');
                        expect(data.user.username).to.be("charles.conway");
                        expect(data.user.firstName).to.be.a('string');
                        expect(data.user.firstName).to.be("Charles");
                        expect(data.user.lastName).to.be.a('string');
                        expect(data.user.lastName).to.be("Conway");
                        expect(data.user.email).to.be.a('string');
                        expect(data.user.email).to.be("charles@example.com");
                        expect(data.user.status).to.be.a('string');
                        expect(data.user.status).to.be("A");
                        expect(data.user.balance).to.be.a('number');
                        expect(data.user.balance).to.be(208.64);
                        expect(data.user.phone).to.be.a('string');
                        expect(data.user.phone).to.be("447860021130");
                        expect(data.user.company).to.be.a('string');
                        expect(data.user.company).to.be("Example Ltd.");
                        expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                              expect(data.user.currency.id).to.be.a('string');
                          expect(data.user.currency.id).to.be("GBP");
                          expect(data.user.currency.unicodeSymbol).to.be.a('string');
                          expect(data.user.currency.unicodeSymbol).to.be("£");
                          expect(data.user.currency.htmlSymbol).to.be.a('string');
                          expect(data.user.currency.htmlSymbol).to.be("&pound;");
                        expect(data.user.country).to.be.a(TextmagicClient.Country);
                              expect(data.user.country.id).to.be.a('string');
                          expect(data.user.country.id).to.be("US");
                          expect(data.user.country.name).to.be.a('string');
                          expect(data.user.country.name).to.be("India");
                        expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                              expect(data.user.timezone.id).to.be.a('number');
                          expect(data.user.timezone.id).to.be(55);
                          expect(data.user.timezone.area).to.be.a('string');
                          expect(data.user.timezone.area).to.be("Europe");
                          expect(data.user.timezone.dst).to.be.a('number');
                          expect(data.user.timezone.dst).to.be(1);
                          expect(data.user.timezone.offset).to.be.a('number');
                          expect(data.user.timezone.offset).to.be(10800);
                          expect(data.user.timezone.timezone).to.be.a('string');
                          expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                        expect(data.user.subaccountType).to.be.a('string');
                        expect(data.user.subaccountType).to.be("P");
                        expect(data.user.emailAccepted).to.be.a('boolean');
                        expect(data.user.emailAccepted).to.be(true);
                        expect(data.user.phoneAccepted).to.be.a('boolean');
                        expect(data.user.phoneAccepted).to.be(true);
                        expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                              expect(data.user.avatar.href).to.be.a('string');
                          expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    }
                  }
                expect(data.unsubscribedContactId).to.be.a('number');
                expect(data.unsubscribedContactId).to.be(546);
                expect(data.unread).to.be.a('number');
                expect(data.unread).to.be(5);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2015-01-08T06:13:21+0000);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("a");
                expect(data.mute).to.be.a('number');
                expect(data.mute).to.be(0);
                expect(data.lastMessage).to.be.a('string');
                expect(data.lastMessage).to.be("Hello world!");
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("ci");
                expect(data.from).to.be.a('string');
                expect(data.from).to.be("447860021130");
                expect(data.mutedUntil).to.be.a(Date);
                expect(data.mutedUntil).to.be(2019-10-10T14:44:00+0000);
                expect(data.timeLeftMute).to.be.a('number');
                expect(data.timeLeftMute).to.be(17988);
                expect(data.country).to.be.a(TextmagicClient.Country);
                      expect(data.country.id).to.be.a('string');
                  expect(data.country.id).to.be("US");
                  expect(data.country.name).to.be.a('string');
                  expect(data.country.name).to.be("India");
                expect(data.pinned).to.be.a('boolean');
                expect(data.pinned).to.be(true);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchChatsByReceipent', function() {
        it('should call searchChatsByReceipent successfully', function(done) {
          // TODO: uncomment, update parameter values for searchChatsByReceipent call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.query = "query_example";
          opts.orderBy = "id";

          instance.searchChatsByReceipent(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SearchChatsByReceipentPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Chat);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(43328);
                expect(data.originalId).to.be.a('number');
                expect(data.originalId).to.be(43328);
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.contact).to.be.a(TextmagicClient.Contact);
                      expect(data.contact.id).to.be.a('number');
                  expect(data.contact.id).to.be(27074);
                  expect(data.contact.favorited).to.be.a('boolean');
                  expect(data.contact.favorited).to.be(true);
                  expect(data.contact.blocked).to.be.a('boolean');
                  expect(data.contact.blocked).to.be(true);
                  expect(data.contact.firstName).to.be.a('string');
                  expect(data.contact.firstName).to.be("Charles");
                  expect(data.contact.lastName).to.be.a('string');
                  expect(data.contact.lastName).to.be("Conway");
                  expect(data.contact.companyName).to.be.a('string');
                  expect(data.contact.companyName).to.be("Example Ltd.");
                  expect(data.contact.phone).to.be.a('string');
                  expect(data.contact.phone).to.be("447860021130");
                  expect(data.contact.email).to.be.a('string');
                  expect(data.contact.email).to.be("charles@example.com");
                  expect(data.contact.country).to.be.a(TextmagicClient.Country);
                        expect(data.contact.country.id).to.be.a('string');
                    expect(data.contact.country.id).to.be("US");
                    expect(data.contact.country.name).to.be.a('string');
                    expect(data.contact.country.name).to.be("India");
                  {
                    let dataCtr = data.contact.customFields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.ContactCustomField);
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
                      expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                            expect(data.userCustomField.id).to.be.a('number');
                        expect(data.userCustomField.id).to.be(23);
                        expect(data.userCustomField.name).to.be.a('string');
                        expect(data.userCustomField.name).to.be("DOB");
                        expect(data.userCustomField.createdAt).to.be.a(Date);
                        expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                    }
                  }
                  expect(data.contact.user).to.be.a(TextmagicClient.User);
                        expect(data.contact.user.id).to.be.a('number');
                    expect(data.contact.user.id).to.be(305);
                    expect(data.contact.user.displayTimeFormat).to.be.a('string');
                    expect(data.contact.user.displayTimeFormat).to.be("24h");
                    expect(data.contact.user.username).to.be.a('string');
                    expect(data.contact.user.username).to.be("charles.conway");
                    expect(data.contact.user.firstName).to.be.a('string');
                    expect(data.contact.user.firstName).to.be("Charles");
                    expect(data.contact.user.lastName).to.be.a('string');
                    expect(data.contact.user.lastName).to.be("Conway");
                    expect(data.contact.user.email).to.be.a('string');
                    expect(data.contact.user.email).to.be("charles@example.com");
                    expect(data.contact.user.status).to.be.a('string');
                    expect(data.contact.user.status).to.be("A");
                    expect(data.contact.user.balance).to.be.a('number');
                    expect(data.contact.user.balance).to.be(208.64);
                    expect(data.contact.user.phone).to.be.a('string');
                    expect(data.contact.user.phone).to.be("447860021130");
                    expect(data.contact.user.company).to.be.a('string');
                    expect(data.contact.user.company).to.be("Example Ltd.");
                    expect(data.contact.user.currency).to.be.a(TextmagicClient.Currency);
                          expect(data.contact.user.currency.id).to.be.a('string');
                      expect(data.contact.user.currency.id).to.be("GBP");
                      expect(data.contact.user.currency.unicodeSymbol).to.be.a('string');
                      expect(data.contact.user.currency.unicodeSymbol).to.be("£");
                      expect(data.contact.user.currency.htmlSymbol).to.be.a('string');
                      expect(data.contact.user.currency.htmlSymbol).to.be("&pound;");
                    expect(data.contact.user.country).to.be.a(TextmagicClient.Country);
                          expect(data.contact.user.country.id).to.be.a('string');
                      expect(data.contact.user.country.id).to.be("US");
                      expect(data.contact.user.country.name).to.be.a('string');
                      expect(data.contact.user.country.name).to.be("India");
                    expect(data.contact.user.timezone).to.be.a(TextmagicClient.Timezone);
                          expect(data.contact.user.timezone.id).to.be.a('number');
                      expect(data.contact.user.timezone.id).to.be(55);
                      expect(data.contact.user.timezone.area).to.be.a('string');
                      expect(data.contact.user.timezone.area).to.be("Europe");
                      expect(data.contact.user.timezone.dst).to.be.a('number');
                      expect(data.contact.user.timezone.dst).to.be(1);
                      expect(data.contact.user.timezone.offset).to.be.a('number');
                      expect(data.contact.user.timezone.offset).to.be(10800);
                      expect(data.contact.user.timezone.timezone).to.be.a('string');
                      expect(data.contact.user.timezone.timezone).to.be("Europe\/Tallinn");
                    expect(data.contact.user.subaccountType).to.be.a('string');
                    expect(data.contact.user.subaccountType).to.be("P");
                    expect(data.contact.user.emailAccepted).to.be.a('boolean');
                    expect(data.contact.user.emailAccepted).to.be(true);
                    expect(data.contact.user.phoneAccepted).to.be.a('boolean');
                    expect(data.contact.user.phoneAccepted).to.be(true);
                    expect(data.contact.user.avatar).to.be.a(TextmagicClient.UserImage);
                          expect(data.contact.user.avatar.href).to.be.a('string');
                      expect(data.contact.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  {
                    let dataCtr = data.contact.lists;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.List);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(715);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("Private list");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("Private contacts of C. R. Conway");
                      expect(data.favorited).to.be.a('boolean');
                      expect(data.favorited).to.be(false);
                      expect(data.membersCount).to.be.a('number');
                      expect(data.membersCount).to.be(332);
                      expect(data.user).to.be.a(TextmagicClient.User);
                            expect(data.user.id).to.be.a('number');
                        expect(data.user.id).to.be(305);
                        expect(data.user.displayTimeFormat).to.be.a('string');
                        expect(data.user.displayTimeFormat).to.be("24h");
                        expect(data.user.username).to.be.a('string');
                        expect(data.user.username).to.be("charles.conway");
                        expect(data.user.firstName).to.be.a('string');
                        expect(data.user.firstName).to.be("Charles");
                        expect(data.user.lastName).to.be.a('string');
                        expect(data.user.lastName).to.be("Conway");
                        expect(data.user.email).to.be.a('string');
                        expect(data.user.email).to.be("charles@example.com");
                        expect(data.user.status).to.be.a('string');
                        expect(data.user.status).to.be("A");
                        expect(data.user.balance).to.be.a('number');
                        expect(data.user.balance).to.be(208.64);
                        expect(data.user.phone).to.be.a('string');
                        expect(data.user.phone).to.be("447860021130");
                        expect(data.user.company).to.be.a('string');
                        expect(data.user.company).to.be("Example Ltd.");
                        expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                              expect(data.user.currency.id).to.be.a('string');
                          expect(data.user.currency.id).to.be("GBP");
                          expect(data.user.currency.unicodeSymbol).to.be.a('string');
                          expect(data.user.currency.unicodeSymbol).to.be("£");
                          expect(data.user.currency.htmlSymbol).to.be.a('string');
                          expect(data.user.currency.htmlSymbol).to.be("&pound;");
                        expect(data.user.country).to.be.a(TextmagicClient.Country);
                              expect(data.user.country.id).to.be.a('string');
                          expect(data.user.country.id).to.be("US");
                          expect(data.user.country.name).to.be.a('string');
                          expect(data.user.country.name).to.be("India");
                        expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                              expect(data.user.timezone.id).to.be.a('number');
                          expect(data.user.timezone.id).to.be(55);
                          expect(data.user.timezone.area).to.be.a('string');
                          expect(data.user.timezone.area).to.be("Europe");
                          expect(data.user.timezone.dst).to.be.a('number');
                          expect(data.user.timezone.dst).to.be(1);
                          expect(data.user.timezone.offset).to.be.a('number');
                          expect(data.user.timezone.offset).to.be(10800);
                          expect(data.user.timezone.timezone).to.be.a('string');
                          expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                        expect(data.user.subaccountType).to.be.a('string');
                        expect(data.user.subaccountType).to.be("P");
                        expect(data.user.emailAccepted).to.be.a('boolean');
                        expect(data.user.emailAccepted).to.be(true);
                        expect(data.user.phoneAccepted).to.be.a('boolean');
                        expect(data.user.phoneAccepted).to.be(true);
                        expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                              expect(data.user.avatar.href).to.be.a('string');
                          expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                      expect(data.service).to.be.a('boolean');
                      expect(data.service).to.be(false);
                      expect(data.shared).to.be.a('boolean');
                      expect(data.shared).to.be(false);
                      expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                            expect(data.avatar.href).to.be.a('string');
                        expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                      expect(data.isDefault).to.be.a('boolean');
                      expect(data.isDefault).to.be(false);
                    }
                  }
                  expect(data.contact.phoneType).to.be.a('string');
                  expect(data.contact.phoneType).to.be("");
                  expect(data.contact.avatar).to.be.a(TextmagicClient.ContactImage);
                        expect(data.contact.avatar.href).to.be.a('string');
                    expect(data.contact.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  {
                    let dataCtr = data.contact.notes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TextmagicClient.ContactNote);
                      expect(data.id).to.be.a('number');
                      expect(data.id).to.be(5);
                      expect(data.createdAt).to.be.a(Date);
                      expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                      expect(data.note).to.be.a('string');
                      expect(data.note).to.be("Test note");
                      expect(data.user).to.be.a(TextmagicClient.User);
                            expect(data.user.id).to.be.a('number');
                        expect(data.user.id).to.be(305);
                        expect(data.user.displayTimeFormat).to.be.a('string');
                        expect(data.user.displayTimeFormat).to.be("24h");
                        expect(data.user.username).to.be.a('string');
                        expect(data.user.username).to.be("charles.conway");
                        expect(data.user.firstName).to.be.a('string');
                        expect(data.user.firstName).to.be("Charles");
                        expect(data.user.lastName).to.be.a('string');
                        expect(data.user.lastName).to.be("Conway");
                        expect(data.user.email).to.be.a('string');
                        expect(data.user.email).to.be("charles@example.com");
                        expect(data.user.status).to.be.a('string');
                        expect(data.user.status).to.be("A");
                        expect(data.user.balance).to.be.a('number');
                        expect(data.user.balance).to.be(208.64);
                        expect(data.user.phone).to.be.a('string');
                        expect(data.user.phone).to.be("447860021130");
                        expect(data.user.company).to.be.a('string');
                        expect(data.user.company).to.be("Example Ltd.");
                        expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                              expect(data.user.currency.id).to.be.a('string');
                          expect(data.user.currency.id).to.be("GBP");
                          expect(data.user.currency.unicodeSymbol).to.be.a('string');
                          expect(data.user.currency.unicodeSymbol).to.be("£");
                          expect(data.user.currency.htmlSymbol).to.be.a('string');
                          expect(data.user.currency.htmlSymbol).to.be("&pound;");
                        expect(data.user.country).to.be.a(TextmagicClient.Country);
                              expect(data.user.country.id).to.be.a('string');
                          expect(data.user.country.id).to.be("US");
                          expect(data.user.country.name).to.be.a('string');
                          expect(data.user.country.name).to.be("India");
                        expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                              expect(data.user.timezone.id).to.be.a('number');
                          expect(data.user.timezone.id).to.be(55);
                          expect(data.user.timezone.area).to.be.a('string');
                          expect(data.user.timezone.area).to.be("Europe");
                          expect(data.user.timezone.dst).to.be.a('number');
                          expect(data.user.timezone.dst).to.be(1);
                          expect(data.user.timezone.offset).to.be.a('number');
                          expect(data.user.timezone.offset).to.be(10800);
                          expect(data.user.timezone.timezone).to.be.a('string');
                          expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                        expect(data.user.subaccountType).to.be.a('string');
                        expect(data.user.subaccountType).to.be("P");
                        expect(data.user.emailAccepted).to.be.a('boolean');
                        expect(data.user.emailAccepted).to.be(true);
                        expect(data.user.phoneAccepted).to.be.a('boolean');
                        expect(data.user.phoneAccepted).to.be(true);
                        expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                              expect(data.user.avatar.href).to.be.a('string');
                          expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    }
                  }
                expect(data.unsubscribedContactId).to.be.a('number');
                expect(data.unsubscribedContactId).to.be(546);
                expect(data.unread).to.be.a('number');
                expect(data.unread).to.be(5);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2015-01-08T06:13:21+0000);
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("a");
                expect(data.mute).to.be.a('number');
                expect(data.mute).to.be(0);
                expect(data.lastMessage).to.be.a('string');
                expect(data.lastMessage).to.be("Hello world!");
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("ci");
                expect(data.from).to.be.a('string');
                expect(data.from).to.be("447860021130");
                expect(data.mutedUntil).to.be.a(Date);
                expect(data.mutedUntil).to.be(2019-10-10T14:44:00+0000);
                expect(data.timeLeftMute).to.be.a('number');
                expect(data.timeLeftMute).to.be(17988);
                expect(data.country).to.be.a(TextmagicClient.Country);
                      expect(data.country.id).to.be.a('string');
                  expect(data.country.id).to.be("US");
                  expect(data.country.name).to.be.a('string');
                  expect(data.country.name).to.be("India");
                expect(data.pinned).to.be.a('boolean');
                expect(data.pinned).to.be(true);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchContacts', function() {
        it('should call searchContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for searchContacts call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.shared = 0;
          opts.ids = "ids_example";
          opts.listId = 56;
          opts.includeBlocked = 56;
          opts.query = "query_example";
          opts.local = 0;
          opts.exactMatch = 0;
          opts.country = "country_example";
          opts.orderBy = "id";
          opts.direction = "desc";

          instance.searchContacts(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SearchContactsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.Contact);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(27074);
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(true);
                expect(data.blocked).to.be.a('boolean');
                expect(data.blocked).to.be(true);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Charles");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.companyName).to.be.a('string');
                expect(data.companyName).to.be("Example Ltd.");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447860021130");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("charles@example.com");
                expect(data.country).to.be.a(TextmagicClient.Country);
                      expect(data.country.id).to.be.a('string');
                  expect(data.country.id).to.be("US");
                  expect(data.country.name).to.be.a('string');
                  expect(data.country.name).to.be("India");
                {
                  let dataCtr = data.customFields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.ContactCustomField);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.userCustomField).to.be.a(TextmagicClient.UserCustomField);
                          expect(data.userCustomField.id).to.be.a('number');
                      expect(data.userCustomField.id).to.be(23);
                      expect(data.userCustomField.name).to.be.a('string');
                      expect(data.userCustomField.name).to.be("DOB");
                      expect(data.userCustomField.createdAt).to.be.a(Date);
                      expect(data.userCustomField.createdAt).to.be(2015-02-11T07:33:19+0000);
                  }
                }
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                {
                  let dataCtr = data.lists;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.List);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(715);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("Private list");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("Private contacts of C. R. Conway");
                    expect(data.favorited).to.be.a('boolean');
                    expect(data.favorited).to.be(false);
                    expect(data.membersCount).to.be.a('number');
                    expect(data.membersCount).to.be(332);
                    expect(data.user).to.be.a(TextmagicClient.User);
                          expect(data.user.id).to.be.a('number');
                      expect(data.user.id).to.be(305);
                      expect(data.user.displayTimeFormat).to.be.a('string');
                      expect(data.user.displayTimeFormat).to.be("24h");
                      expect(data.user.username).to.be.a('string');
                      expect(data.user.username).to.be("charles.conway");
                      expect(data.user.firstName).to.be.a('string');
                      expect(data.user.firstName).to.be("Charles");
                      expect(data.user.lastName).to.be.a('string');
                      expect(data.user.lastName).to.be("Conway");
                      expect(data.user.email).to.be.a('string');
                      expect(data.user.email).to.be("charles@example.com");
                      expect(data.user.status).to.be.a('string');
                      expect(data.user.status).to.be("A");
                      expect(data.user.balance).to.be.a('number');
                      expect(data.user.balance).to.be(208.64);
                      expect(data.user.phone).to.be.a('string');
                      expect(data.user.phone).to.be("447860021130");
                      expect(data.user.company).to.be.a('string');
                      expect(data.user.company).to.be("Example Ltd.");
                      expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                            expect(data.user.currency.id).to.be.a('string');
                        expect(data.user.currency.id).to.be("GBP");
                        expect(data.user.currency.unicodeSymbol).to.be.a('string');
                        expect(data.user.currency.unicodeSymbol).to.be("£");
                        expect(data.user.currency.htmlSymbol).to.be.a('string');
                        expect(data.user.currency.htmlSymbol).to.be("&pound;");
                      expect(data.user.country).to.be.a(TextmagicClient.Country);
                            expect(data.user.country.id).to.be.a('string');
                        expect(data.user.country.id).to.be("US");
                        expect(data.user.country.name).to.be.a('string');
                        expect(data.user.country.name).to.be("India");
                      expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                            expect(data.user.timezone.id).to.be.a('number');
                        expect(data.user.timezone.id).to.be(55);
                        expect(data.user.timezone.area).to.be.a('string');
                        expect(data.user.timezone.area).to.be("Europe");
                        expect(data.user.timezone.dst).to.be.a('number');
                        expect(data.user.timezone.dst).to.be(1);
                        expect(data.user.timezone.offset).to.be.a('number');
                        expect(data.user.timezone.offset).to.be(10800);
                        expect(data.user.timezone.timezone).to.be.a('string');
                        expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                      expect(data.user.subaccountType).to.be.a('string');
                      expect(data.user.subaccountType).to.be("P");
                      expect(data.user.emailAccepted).to.be.a('boolean');
                      expect(data.user.emailAccepted).to.be(true);
                      expect(data.user.phoneAccepted).to.be.a('boolean');
                      expect(data.user.phoneAccepted).to.be(true);
                      expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                            expect(data.user.avatar.href).to.be.a('string');
                        expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    expect(data.service).to.be.a('boolean');
                    expect(data.service).to.be(false);
                    expect(data.shared).to.be.a('boolean');
                    expect(data.shared).to.be(false);
                    expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                          expect(data.avatar.href).to.be.a('string');
                      expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                    expect(data.isDefault).to.be.a('boolean');
                    expect(data.isDefault).to.be(false);
                  }
                }
                expect(data.phoneType).to.be.a('string');
                expect(data.phoneType).to.be("");
                expect(data.avatar).to.be.a(TextmagicClient.ContactImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                {
                  let dataCtr = data.notes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TextmagicClient.ContactNote);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(5);
                    expect(data.createdAt).to.be.a(Date);
                    expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
                    expect(data.note).to.be.a('string');
                    expect(data.note).to.be("Test note");
                    expect(data.user).to.be.a(TextmagicClient.User);
                          expect(data.user.id).to.be.a('number');
                      expect(data.user.id).to.be(305);
                      expect(data.user.displayTimeFormat).to.be.a('string');
                      expect(data.user.displayTimeFormat).to.be("24h");
                      expect(data.user.username).to.be.a('string');
                      expect(data.user.username).to.be("charles.conway");
                      expect(data.user.firstName).to.be.a('string');
                      expect(data.user.firstName).to.be("Charles");
                      expect(data.user.lastName).to.be.a('string');
                      expect(data.user.lastName).to.be("Conway");
                      expect(data.user.email).to.be.a('string');
                      expect(data.user.email).to.be("charles@example.com");
                      expect(data.user.status).to.be.a('string');
                      expect(data.user.status).to.be("A");
                      expect(data.user.balance).to.be.a('number');
                      expect(data.user.balance).to.be(208.64);
                      expect(data.user.phone).to.be.a('string');
                      expect(data.user.phone).to.be("447860021130");
                      expect(data.user.company).to.be.a('string');
                      expect(data.user.company).to.be("Example Ltd.");
                      expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                            expect(data.user.currency.id).to.be.a('string');
                        expect(data.user.currency.id).to.be("GBP");
                        expect(data.user.currency.unicodeSymbol).to.be.a('string');
                        expect(data.user.currency.unicodeSymbol).to.be("£");
                        expect(data.user.currency.htmlSymbol).to.be.a('string');
                        expect(data.user.currency.htmlSymbol).to.be("&pound;");
                      expect(data.user.country).to.be.a(TextmagicClient.Country);
                            expect(data.user.country.id).to.be.a('string');
                        expect(data.user.country.id).to.be("US");
                        expect(data.user.country.name).to.be.a('string');
                        expect(data.user.country.name).to.be("India");
                      expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                            expect(data.user.timezone.id).to.be.a('number');
                        expect(data.user.timezone.id).to.be(55);
                        expect(data.user.timezone.area).to.be.a('string');
                        expect(data.user.timezone.area).to.be("Europe");
                        expect(data.user.timezone.dst).to.be.a('number');
                        expect(data.user.timezone.dst).to.be(1);
                        expect(data.user.timezone.offset).to.be.a('number');
                        expect(data.user.timezone.offset).to.be(10800);
                        expect(data.user.timezone.timezone).to.be.a('string');
                        expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                      expect(data.user.subaccountType).to.be.a('string');
                      expect(data.user.subaccountType).to.be("P");
                      expect(data.user.emailAccepted).to.be.a('boolean');
                      expect(data.user.emailAccepted).to.be(true);
                      expect(data.user.phoneAccepted).to.be.a('boolean');
                      expect(data.user.phoneAccepted).to.be(true);
                      expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                            expect(data.user.avatar.href).to.be.a('string');
                        expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                  }
                }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchInboundMessages', function() {
        it('should call searchInboundMessages successfully', function(done) {
          // TODO: uncomment, update parameter values for searchInboundMessages call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.ids = "ids_example";
          opts.query = "query_example";
          opts.orderBy = "id";
          opts.direction = "desc";
          opts.expand = 0;

          instance.searchInboundMessages(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SearchInboundMessagesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageIn);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(1782832);
                expect(data.sender).to.be.a('string');
                expect(data.sender).to.be("447860021130");
                expect(data.receiver).to.be.a('string');
                expect(data.receiver).to.be("447624800500");
                expect(data.messageTime).to.be.a(Date);
                expect(data.messageTime).to.be(2012-11-28T18:38:28+0000);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("I Love TextMagic!");
                expect(data.contactId).to.be.a('number');
                expect(data.contactId).to.be(1);
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("Charles");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("charles@example.com");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchLists', function() {
        it('should call searchLists successfully', function(done) {
          // TODO: uncomment, update parameter values for searchLists call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.ids = "1,2,3,4";
          opts.query = "A";
          opts.onlyMine = 0;
          opts.onlyDefault = 0;
          opts.orderBy = "id";
          opts.direction = "desc";

          instance.searchLists(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SearchListsPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.List);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(715);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Private list");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("Private contacts of C. R. Conway");
                expect(data.favorited).to.be.a('boolean');
                expect(data.favorited).to.be(false);
                expect(data.membersCount).to.be.a('number');
                expect(data.membersCount).to.be(332);
                expect(data.user).to.be.a(TextmagicClient.User);
                      expect(data.user.id).to.be.a('number');
                  expect(data.user.id).to.be(305);
                  expect(data.user.displayTimeFormat).to.be.a('string');
                  expect(data.user.displayTimeFormat).to.be("24h");
                  expect(data.user.username).to.be.a('string');
                  expect(data.user.username).to.be("charles.conway");
                  expect(data.user.firstName).to.be.a('string');
                  expect(data.user.firstName).to.be("Charles");
                  expect(data.user.lastName).to.be.a('string');
                  expect(data.user.lastName).to.be("Conway");
                  expect(data.user.email).to.be.a('string');
                  expect(data.user.email).to.be("charles@example.com");
                  expect(data.user.status).to.be.a('string');
                  expect(data.user.status).to.be("A");
                  expect(data.user.balance).to.be.a('number');
                  expect(data.user.balance).to.be(208.64);
                  expect(data.user.phone).to.be.a('string');
                  expect(data.user.phone).to.be("447860021130");
                  expect(data.user.company).to.be.a('string');
                  expect(data.user.company).to.be("Example Ltd.");
                  expect(data.user.currency).to.be.a(TextmagicClient.Currency);
                        expect(data.user.currency.id).to.be.a('string');
                    expect(data.user.currency.id).to.be("GBP");
                    expect(data.user.currency.unicodeSymbol).to.be.a('string');
                    expect(data.user.currency.unicodeSymbol).to.be("£");
                    expect(data.user.currency.htmlSymbol).to.be.a('string');
                    expect(data.user.currency.htmlSymbol).to.be("&pound;");
                  expect(data.user.country).to.be.a(TextmagicClient.Country);
                        expect(data.user.country.id).to.be.a('string');
                    expect(data.user.country.id).to.be("US");
                    expect(data.user.country.name).to.be.a('string');
                    expect(data.user.country.name).to.be("India");
                  expect(data.user.timezone).to.be.a(TextmagicClient.Timezone);
                        expect(data.user.timezone.id).to.be.a('number');
                    expect(data.user.timezone.id).to.be(55);
                    expect(data.user.timezone.area).to.be.a('string');
                    expect(data.user.timezone.area).to.be("Europe");
                    expect(data.user.timezone.dst).to.be.a('number');
                    expect(data.user.timezone.dst).to.be(1);
                    expect(data.user.timezone.offset).to.be.a('number');
                    expect(data.user.timezone.offset).to.be(10800);
                    expect(data.user.timezone.timezone).to.be.a('string');
                    expect(data.user.timezone.timezone).to.be("Europe\/Tallinn");
                  expect(data.user.subaccountType).to.be.a('string');
                  expect(data.user.subaccountType).to.be("P");
                  expect(data.user.emailAccepted).to.be.a('boolean');
                  expect(data.user.emailAccepted).to.be(true);
                  expect(data.user.phoneAccepted).to.be.a('boolean');
                  expect(data.user.phoneAccepted).to.be(true);
                  expect(data.user.avatar).to.be.a(TextmagicClient.UserImage);
                        expect(data.user.avatar.href).to.be.a('string');
                    expect(data.user.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.service).to.be.a('boolean');
                expect(data.service).to.be(false);
                expect(data.shared).to.be.a('boolean');
                expect(data.shared).to.be(false);
                expect(data.avatar).to.be.a(TextmagicClient.ListImage);
                      expect(data.avatar.href).to.be.a('string');
                  expect(data.avatar.href).to.be("avatars/lav5d8de21d89971646555094.png");
                expect(data.isDefault).to.be.a('boolean');
                expect(data.isDefault).to.be(false);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchOutboundMessages', function() {
        it('should call searchOutboundMessages successfully', function(done) {
          // TODO: uncomment, update parameter values for searchOutboundMessages call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.lastId = 56;
          opts.ids = "ids_example";
          opts.sessionId = 56;
          opts.statuses = "q";
          opts.includeDeleted = 0;
          opts.query = "query_example";

          instance.searchOutboundMessages(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SearchOutboundMessagesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageOut);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(4991);
                expect(data.sender).to.be.a('string');
                expect(data.sender).to.be("447624800500");
                expect(data.receiver).to.be.a('string');
                expect(data.receiver).to.be("447860021130");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("I love TextMagic!");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("d");
                expect(data.contactId).to.be.a('number');
                expect(data.contactId).to.be(2764);
                expect(data.sessionId).to.be.a('number');
                expect(data.sessionId).to.be(3122);
                expect(data.messageTime).to.be.a(Date);
                expect(data.messageTime).to.be(2019-08-12T11:43:37+0000);
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.charset).to.be.a('string');
                expect(data.charset).to.be("ISO-8859-1");
                expect(data.charsetLabel).to.be.a('string');
                expect(data.charsetLabel).to.be("ISO-8859-1");
                expect(data.firstName).to.be.a('string');
                expect(data.firstName).to.be("John");
                expect(data.lastName).to.be.a('string');
                expect(data.lastName).to.be("Conway");
                expect(data.country).to.be.a('string');
                expect(data.country).to.be("US");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("447624800500");
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.025);
                expect(data.partsCount).to.be.a('number');
                expect(data.partsCount).to.be(6);
                expect(data.fromEmail).to.be.a('string');
                expect(data.fromEmail).to.be("test@email.com");
                expect(data.fromNumber).to.be.a('string');
                expect(data.fromNumber).to.be("447624800500");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchScheduledMessages', function() {
        it('should call searchScheduledMessages successfully', function(done) {
          // TODO: uncomment, update parameter values for searchScheduledMessages call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.query = "query_example";
          opts.ids = "ids_example";
          opts.status = "x";
          opts.orderBy = "id";
          opts.direction = "desc";

          instance.searchScheduledMessages(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SearchScheduledMessagesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessagesIcs);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(562);
                expect(data.nextSend).to.be.a(Date);
                expect(data.nextSend).to.be(2014-10-13T05:00:00+0000);
                expect(data.rrule).to.be.a('string');
                expect(data.rrule).to.be("FREQ=DAILY;INTERVAL=2;COUNT=5;");
                expect(data.session).to.be.a(TextmagicClient.MessageSession);
                      expect(data.session.id).to.be.a('number');
                  expect(data.session.id).to.be(4991);
                  expect(data.session.startTime).to.be.a('string');
                  expect(data.session.startTime).to.be("2015-06-19T09:48:24+0000");
                  expect(data.session.text).to.be.a('string');
                  expect(data.session.text).to.be("Hello {First name}!");
                  expect(data.session.source).to.be.a('string');
                  expect(data.session.source).to.be("O");
                  expect(data.session.referenceId).to.be.a('string');
                  expect(data.session.referenceId).to.be("my_reference_id_4991");
                  expect(data.session.price).to.be.a('number');
                  expect(data.session.price).to.be(3.45);
                  expect(data.session.numbersCount).to.be.a('number');
                  expect(data.session.numbersCount).to.be(18);
                  expect(data.session.destination).to.be.a('string');
                  expect(data.session.destination).to.be("t");
                expect(data.lastSent).to.be.a(Date);
                expect(data.lastSent).to.be(2015-06-19T09:48:24+0000);
                expect(data.contactName).to.be.a('string');
                expect(data.contactName).to.be("15 recipients");
                expect(data.parameters).to.be.a(TextmagicClient.MessagesIcsParameters);
                      expect(data.parameters.text).to.be.a('string');
                  expect(data.parameters.text).to.be("I Love TextMagic!");
                  expect(data.parameters.recipients).to.be.a(TextmagicClient.MessagesIcsParametersRecipients);
                        {
                      let dataCtr = data.parameters.recipients.contacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(39318);
                      }
                    }
                    {
                      let dataCtr = data.parameters.recipients.groups;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(39318);
                      }
                    }
                    {
                      let dataCtr = data.parameters.recipients.numbers;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("447860021130");
                      }
                    }
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("once");
                expect(data.summary).to.be.a('string');
                expect(data.summary).to.be("Every 2 weeks on Monday, Tuesday, Thursday at 10:30 (UTC+03:00)");
                expect(data.textParameters).to.be.a(TextmagicClient.MessagesIcsTextParameters);
                      expect(data.textParameters.cost).to.be.a('number');
                  expect(data.textParameters.cost).to.be(0.04);
                  expect(data.textParameters.parts).to.be.a('number');
                  expect(data.textParameters.parts).to.be(6);
                  expect(data.textParameters.chars).to.be.a('number');
                  expect(data.textParameters.chars).to.be(125);
                  expect(data.textParameters.encoding).to.be.a('string');
                  expect(data.textParameters.encoding).to.be("ISO-8859-1");
                  {
                    let dataCtr = data.textParameters.countries;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("US");
                    }
                  }
                  expect(data.textParameters.charsetLabel).to.be.a('string');
                  expect(data.textParameters.charsetLabel).to.be("ISO-8859-1");
                expect(data.firstOccurrence).to.be.a(Date);
                expect(data.firstOccurrence).to.be(2015-06-19T09:48:24+0000);
                expect(data.lastOccurrence).to.be.a(Date);
                expect(data.lastOccurrence).to.be(2015-06-19T09:48:24+0000);
                expect(data.recipientsCount).to.be.a('number');
                expect(data.recipientsCount).to.be(2);
                expect(data.timezone).to.be.a('string');
                expect(data.timezone).to.be("Europe/Tallinn");
                expect(data.completed).to.be.a('boolean');
                expect(data.completed).to.be(true);
                expect(data.avatar).to.be.a('string');
                expect(data.avatar).to.be("avatars/dummy_avatar.png");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2015-06-19T09:48:24+0000);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchTemplates', function() {
        it('should call searchTemplates successfully', function(done) {
          // TODO: uncomment, update parameter values for searchTemplates call and complete the assertions
          /*
          var opts = {};
          opts.page = 1;
          opts.limit = 10;
          opts.ids = "ids_example";
          opts.name = "name_example";
          opts.content = "content_example";

          instance.searchTemplates(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SearchTemplatesPaginatedResponse);
            expect(data.page).to.be.a('number');
            expect(data.page).to.be(1);
            expect(data.pageCount).to.be.a('number');
            expect(data.pageCount).to.be(10);
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(10);
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TextmagicClient.MessageTemplate);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(519);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Appointment reminder");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("Hello {First name}!");
                expect(data.lastModified).to.be.a(Date);
                expect(data.lastModified).to.be(2014-09-11T08:12:01+0000);
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sendMessage', function() {
        it('should call sendMessage successfully', function(done) {
          // TODO: uncomment, update parameter values for sendMessage call and complete the assertions
          /*
          var sendMessageInputObject = new TextmagicClient.SendMessageInputObject();
          sendMessageInputObject.text = "Hello, how are you?";
          sendMessageInputObject.templateId = 1;
          sendMessageInputObject.sendingTime = 1565606455;
          sendMessageInputObject.sendingDateTime = "2020-05-27 13:02:33";
          sendMessageInputObject.sendingTimezone = "America/Buenos_Aires";
          sendMessageInputObject.contacts = "1,2,3,4";
          sendMessageInputObject.lists = "1,2,3,4";
          sendMessageInputObject.phones = "447860021130,447860021131";
          sendMessageInputObject.cutExtra = true;
          sendMessageInputObject.partsCount = 6;
          sendMessageInputObject.referenceId = 1;
          sendMessageInputObject.from = "Test sender id";
          sendMessageInputObject.rrule = "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1";
          sendMessageInputObject.createChat = false;
          sendMessageInputObject.tts = false;
          sendMessageInputObject.local = false;
          sendMessageInputObject.localCountry = "US";
          sendMessageInputObject.destination = "mms";
          sendMessageInputObject.resources = "tmauKcSmwflB77kLQ15904023426649.jpg";

          instance.sendMessage(sendMessageInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SendMessageResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(10489);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/sessions/10489");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("session");
            expect(data.sessionId).to.be.a('number');
            expect(data.sessionId).to.be(10489);
            expect(data.bulkId).to.be.a('number');
            expect(data.bulkId).to.be(0);
            expect(data.messageId).to.be.a('number');
            expect(data.messageId).to.be(0);
            expect(data.scheduleId).to.be.a('number');
            expect(data.scheduleId).to.be(0);
            expect(data.chatId).to.be.a('number');
            expect(data.chatId).to.be(0);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sendPhoneVerificationCodeTFA', function() {
        it('should call sendPhoneVerificationCodeTFA successfully', function(done) {
          // TODO: uncomment, update parameter values for sendPhoneVerificationCodeTFA call and complete the assertions
          /*
          var sendPhoneVerificationCodeTFAInputObject = new TextmagicClient.SendPhoneVerificationCodeTFAInputObject();
          sendPhoneVerificationCodeTFAInputObject.phone = "447860021130";
          sendPhoneVerificationCodeTFAInputObject.workflowId = "6";
          sendPhoneVerificationCodeTFAInputObject.brand = "TextMagic";
          sendPhoneVerificationCodeTFAInputObject.codeLength = 4;
          sendPhoneVerificationCodeTFAInputObject.language = "en-gb";
          sendPhoneVerificationCodeTFAInputObject.senderId = "TextMagic";
          sendPhoneVerificationCodeTFAInputObject.country = "US";

          instance.sendPhoneVerificationCodeTFA(sendPhoneVerificationCodeTFAInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.SendPhoneVerificationCodeResponse);
            expect(data.verifyId).to.be.a('string');
            expect(data.verifyId).to.be("123e4567-e89b-12d3-a456-426655440000");
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(0.05);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setChatStatus', function() {
        it('should call setChatStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for setChatStatus call and complete the assertions
          /*
          var setChatStatusInputObject = new TextmagicClient.SetChatStatusInputObject();
          setChatStatusInputObject.id = 543;
          setChatStatusInputObject.status = "a";

          instance.setChatStatus(setChatStatusInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unblockContact', function() {
        it('should call unblockContact successfully', function(done) {
          // TODO: uncomment, update parameter values for unblockContact call
          /*
          var unblockContactInputObject = new TextmagicClient.UnblockContactInputObject();
          unblockContactInputObject.phone = "447860021130";

          instance.unblockContact(unblockContactInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unblockContactsBulk', function() {
        it('should call unblockContactsBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for unblockContactsBulk call
          /*
          var unblockContactsBulkInputObject = new TextmagicClient.UnblockContactsBulkInputObject();
          unblockContactsBulkInputObject.ids = "1,2,3";
          unblockContactsBulkInputObject.all = 0;

          instance.unblockContactsBulk(unblockContactsBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unmuteChatsBulk', function() {
        it('should call unmuteChatsBulk successfully', function(done) {
          // TODO: uncomment, update parameter values for unmuteChatsBulk call
          /*
          var unmuteChatsBulkInputObject = new TextmagicClient.UnmuteChatsBulkInputObject();
          unmuteChatsBulkInputObject.ids = "1,2,3";
          unmuteChatsBulkInputObject.all = false;

          instance.unmuteChatsBulk(unmuteChatsBulkInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unsubscribeContact', function() {
        it('should call unsubscribeContact successfully', function(done) {
          // TODO: uncomment, update parameter values for unsubscribeContact call and complete the assertions
          /*
          var unsubscribeContactInputObject = new TextmagicClient.UnsubscribeContactInputObject();
          unsubscribeContactInputObject.phone = "447860021130";
          unsubscribeContactInputObject.blockIncoming = 0;

          instance.unsubscribeContact(unsubscribeContactInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBalanceNotificationSettings', function() {
        it('should call updateBalanceNotificationSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBalanceNotificationSettings call
          /*
          var updateBalanceNotificationSettingsInputObject = new TextmagicClient.UpdateBalanceNotificationSettingsInputObject();
          updateBalanceNotificationSettingsInputObject.lowBalanceNotification = true;
          updateBalanceNotificationSettingsInputObject.alertBalance = "50";
          updateBalanceNotificationSettingsInputObject.alertPhone = "15417543010";
          updateBalanceNotificationSettingsInputObject.alertEmail1 = "test@test.com";
          updateBalanceNotificationSettingsInputObject.alertEmail2 = "test@test.com";
          updateBalanceNotificationSettingsInputObject.alertEmail3 = "test@test.com";

          instance.updateBalanceNotificationSettings(updateBalanceNotificationSettingsInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCallbackSettings', function() {
        it('should call updateCallbackSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCallbackSettings call
          /*
          var updateCallbackSettingsInputObject = new TextmagicClient.UpdateCallbackSettingsInputObject();
          updateCallbackSettingsInputObject.outUrl = "http://www.mysite.com/delivery-callback.php";
          updateCallbackSettingsInputObject.inUrl = "http://www.mysite.com/incoming-sms-callback.php";
          updateCallbackSettingsInputObject.format = "m";

          instance.updateCallbackSettings(updateCallbackSettingsInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateChatDesktopNotificationSettings', function() {
        it('should call updateChatDesktopNotificationSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateChatDesktopNotificationSettings call
          /*
          var updateChatDesktopNotificationSettingsInputObject = new TextmagicClient.UpdateChatDesktopNotificationSettingsInputObject();
          updateChatDesktopNotificationSettingsInputObject.playSound = false;
          updateChatDesktopNotificationSettingsInputObject.showNotifications = false;
          updateChatDesktopNotificationSettingsInputObject.showText = true;
          updateChatDesktopNotificationSettingsInputObject.soundId = 23;

          instance.updateChatDesktopNotificationSettings(updateChatDesktopNotificationSettingsInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateContact', function() {
        it('should call updateContact successfully', function(done) {
          // TODO: uncomment, update parameter values for updateContact call and complete the assertions
          /*
          var updateContactInputObject = new TextmagicClient.UpdateContactInputObject();
          updateContactInputObject.firstName = "Example first name";
          updateContactInputObject.lastName = "Example first name";
          updateContactInputObject.phone = "447860021130";
          updateContactInputObject.email = "charles@example.com";
          updateContactInputObject.companyName = "My pretty company";
          updateContactInputObject.lists = "10541,18599";
          updateContactInputObject.favorited = false;
          updateContactInputObject.blocked = false;
          updateContactInputObject.type = 1;
          updateContactInputObject.customFieldValues = [new TextmagicClient.CustomFieldListItem()];
          updateContactInputObject.customFieldValues[0].id = 515;
          updateContactInputObject.customFieldValues[0].value = "Custom value";
          updateContactInputObject.local = 0;
          updateContactInputObject.country = "US";
          var id = 1;

          instance.updateContact(updateContactInputObject, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateContactNote', function() {
        it('should call updateContactNote successfully', function(done) {
          // TODO: uncomment, update parameter values for updateContactNote call and complete the assertions
          /*
          var updateContactNoteInputObject = new TextmagicClient.UpdateContactNoteInputObject();
          updateContactNoteInputObject.note = "My new note";
          var id = 1;

          instance.updateContactNote(updateContactNoteInputObject, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCurrentUser', function() {
        it('should call updateCurrentUser successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCurrentUser call and complete the assertions
          /*
          var updateCurrentUserInputObject = new TextmagicClient.UpdateCurrentUserInputObject();
          updateCurrentUserInputObject.username = "Test";
          updateCurrentUserInputObject.firstName = "Charles";
          updateCurrentUserInputObject.lastName = "Conway";
          updateCurrentUserInputObject.email = "charles@example.com";
          updateCurrentUserInputObject.phone = "447860021130";
          updateCurrentUserInputObject.company = "Example Ltd.";
          updateCurrentUserInputObject.timezone = 2;

          instance.updateCurrentUser(updateCurrentUserInputObject).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.UpdateCurrentUserResponse);
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("charles.conway");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("Charles");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("Conway");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("charles@example.com");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("447860021130");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("Example Ltd.");
            expect(data.timezone).to.be.a('number');
            expect(data.timezone).to.be(13);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCustomField', function() {
        it('should call updateCustomField successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCustomField call and complete the assertions
          /*
          var updateCustomFieldInputObject = new TextmagicClient.UpdateCustomFieldInputObject();
          updateCustomFieldInputObject.name = "DOB";
          var id = 1;

          instance.updateCustomField(updateCustomFieldInputObject, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCustomFieldValue', function() {
        it('should call updateCustomFieldValue successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCustomFieldValue call and complete the assertions
          /*
          var updateCustomFieldValueInputObject = new TextmagicClient.UpdateCustomFieldValueInputObject();
          updateCustomFieldValueInputObject.contactId = 50315;
          updateCustomFieldValueInputObject.value = "1983-08-31T00:00:00.000Z";
          var id = 554;

          instance.updateCustomFieldValue(updateCustomFieldValueInputObject, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateInboundMessagesNotificationSettings', function() {
        it('should call updateInboundMessagesNotificationSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateInboundMessagesNotificationSettings call
          /*
          var updateInboundMessagesNotificationSettingsInputObject = new TextmagicClient.UpdateInboundMessagesNotificationSettingsInputObject();
          updateInboundMessagesNotificationSettingsInputObject.inboundMessageNotification = true;
          updateInboundMessagesNotificationSettingsInputObject.includeSmsHistory = true;
          updateInboundMessagesNotificationSettingsInputObject.sendInHtmlFormat = true;
          updateInboundMessagesNotificationSettingsInputObject.alertEmail1 = "test@test.com";
          updateInboundMessagesNotificationSettingsInputObject.alertEmail2 = "test@test.com";
          updateInboundMessagesNotificationSettingsInputObject.alertEmail3 = "test@test.com";

          instance.updateInboundMessagesNotificationSettings(updateInboundMessagesNotificationSettingsInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateList', function() {
        it('should call updateList successfully', function(done) {
          // TODO: uncomment, update parameter values for updateList call and complete the assertions
          /*
          var id = 1;
          var opts = {};
          opts.updateListObject = new TextmagicClient.UpdateListObject();
          opts.updateListObject.name = "Private list";
          opts.updateListObject.shared = true;
          opts.updateListObject.favorited = true;
          opts.updateListObject.isDefault = true;

          instance.updateList(id, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateSenderSetting', function() {
        it('should call updateSenderSetting successfully', function(done) {
          // TODO: uncomment, update parameter values for updateSenderSetting call
          /*
          var updateSenderSettingInputObject = new TextmagicClient.UpdateSenderSettingInputObject();
          updateSenderSettingInputObject.value = "447624800500";
          updateSenderSettingInputObject.country = "AF";
          updateSenderSettingInputObject.chatId = 344;

          instance.updateSenderSetting(updateSenderSettingInputObject).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTemplate', function() {
        it('should call updateTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTemplate call and complete the assertions
          /*
          var updateTemplateInputObject = new TextmagicClient.UpdateTemplateInputObject();
          updateTemplateInputObject.name = "New template name";
          updateTemplateInputObject.content = "New template content";
          var id = 1;

          instance.updateTemplate(updateTemplateInputObject, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadAvatar', function() {
        it('should call uploadAvatar successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadAvatar call
          /*
          var image = "/path/to/file.txt";

          instance.uploadAvatar(image).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadContactAvatar', function() {
        it('should call uploadContactAvatar successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadContactAvatar call and complete the assertions
          /*
          var image = "/path/to/file.txt";
          var id = 1;

          instance.uploadContactAvatar(image, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadListAvatar', function() {
        it('should call uploadListAvatar successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadListAvatar call and complete the assertions
          /*
          var image = "/path/to/file.txt";
          var id = 1;

          instance.uploadListAvatar(image, id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.ResourceLinkResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(515);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("/api/v2/entity_name/1");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadMessageAttachment', function() {
        it('should call uploadMessageAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadMessageAttachment call and complete the assertions
          /*
          var file = "/path/to/file.txt";

          instance.uploadMessageAttachment(file).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.UploadMessageAttachmentResponse);
            expect(data.chars).to.be.a('number');
            expect(data.chars).to.be(10);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("click/Zwcj9");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("test.pdf");
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(1094);
            expect(data.resource).to.be.a('string');
            expect(data.resource).to.be("tmfGSR8ShMSDMy8Aa15904809817838.jpg");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadMessageMMSAttachment', function() {
        it('should call uploadMessageMMSAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadMessageMMSAttachment call and complete the assertions
          /*
          var file = "/path/to/file.txt";

          instance.uploadMessageMMSAttachment(file).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(TextmagicClient.UploadMessageAttachmentResponse);
            expect(data.chars).to.be.a('number');
            expect(data.chars).to.be(10);
            expect(data.href).to.be.a('string');
            expect(data.href).to.be("click/Zwcj9");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("test.pdf");
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(1094);
            expect(data.resource).to.be.a('string');
            expect(data.resource).to.be("tmfGSR8ShMSDMy8Aa15904809817838.jpg");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
