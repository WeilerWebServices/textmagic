/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Chat.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

Chat::Chat()
{
    m_Id = 0;
    m_OriginalId = 0;
    m_Phone = utility::conversions::to_string_t("");
    m_UnsubscribedContactId = 0;
    m_Unread = 0;
    m_UpdatedAt = utility::datetime();
    m_Status = utility::conversions::to_string_t("");
    m_Mute = 0;
    m_LastMessage = utility::conversions::to_string_t("");
    m_Direction = utility::conversions::to_string_t("");
    m_From = utility::conversions::to_string_t("");
    m_MutedUntil = utility::datetime();
    m_TimeLeftMute = 0;
    m_Pinned = false;
}

Chat::~Chat()
{
}

void Chat::validate()
{
    // TODO: implement validation
}

web::json::value Chat::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("originalId")] = ModelBase::toJson(m_OriginalId);
    val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    val[utility::conversions::to_string_t("contact")] = ModelBase::toJson(m_Contact);
    val[utility::conversions::to_string_t("unsubscribedContactId")] = ModelBase::toJson(m_UnsubscribedContactId);
    val[utility::conversions::to_string_t("unread")] = ModelBase::toJson(m_Unread);
    val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("mute")] = ModelBase::toJson(m_Mute);
    val[utility::conversions::to_string_t("lastMessage")] = ModelBase::toJson(m_LastMessage);
    val[utility::conversions::to_string_t("direction")] = ModelBase::toJson(m_Direction);
    val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    val[utility::conversions::to_string_t("mutedUntil")] = ModelBase::toJson(m_MutedUntil);
    val[utility::conversions::to_string_t("timeLeftMute")] = ModelBase::toJson(m_TimeLeftMute);
    val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    val[utility::conversions::to_string_t("pinned")] = ModelBase::toJson(m_Pinned);

    return val;
}

void Chat::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("originalId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("originalId")];
        if(!fieldValue.is_null())
        {
            setOriginalId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phone")];
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contact")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contact")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Contact> newItem(new Contact());
            newItem->fromJson(fieldValue);
            setContact( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unsubscribedContactId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unsubscribedContactId")];
        if(!fieldValue.is_null())
        {
            setUnsubscribedContactId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unread")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unread")];
        if(!fieldValue.is_null())
        {
            setUnread(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updatedAt")];
        if(!fieldValue.is_null())
        {
            setUpdatedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mute")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("mute")];
        if(!fieldValue.is_null())
        {
            setMute(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastMessage")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastMessage")];
        if(!fieldValue.is_null())
        {
            setLastMessage(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("direction")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("direction")];
        if(!fieldValue.is_null())
        {
            setDirection(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("from")];
        if(!fieldValue.is_null())
        {
            setFrom(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mutedUntil")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("mutedUntil")];
        if(!fieldValue.is_null())
        {
            setMutedUntil(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeLeftMute")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timeLeftMute")];
        if(!fieldValue.is_null())
        {
            setTimeLeftMute(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> newItem(new Country());
            newItem->fromJson(fieldValue);
            setCountry( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pinned")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("pinned")];
        if(!fieldValue.is_null())
        {
            setPinned(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void Chat::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("originalId"), m_OriginalId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
    m_Contact->toMultipart(multipart, utility::conversions::to_string_t("contact."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unsubscribedContactId"), m_UnsubscribedContactId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unread"), m_Unread));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mute"), m_Mute));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastMessage"), m_LastMessage));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("direction"), m_Direction));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mutedUntil"), m_MutedUntil));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeLeftMute"), m_TimeLeftMute));
    m_Country->toMultipart(multipart, utility::conversions::to_string_t("country."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pinned"), m_Pinned));
}

void Chat::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setOriginalId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("originalId"))));
    setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    std::shared_ptr<Contact> newContact(new Contact());
    newContact->fromMultiPart(multipart, utility::conversions::to_string_t("contact."));
    setContact( newContact );
    setUnsubscribedContactId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unsubscribedContactId"))));
    setUnread(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unread"))));
    setUpdatedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt"))));
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setMute(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mute"))));
    setLastMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastMessage"))));
    setDirection(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("direction"))));
    setFrom(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("from"))));
    setMutedUntil(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("mutedUntil"))));
    setTimeLeftMute(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeLeftMute"))));
    std::shared_ptr<Country> newCountry(new Country());
    newCountry->fromMultiPart(multipart, utility::conversions::to_string_t("country."));
    setCountry( newCountry );
    setPinned(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pinned"))));
}

int32_t Chat::getId() const
{
    return m_Id;
}


void Chat::setId(int32_t value)
{
    m_Id = value;
    
}
int32_t Chat::getOriginalId() const
{
    return m_OriginalId;
}


void Chat::setOriginalId(int32_t value)
{
    m_OriginalId = value;
    
}
utility::string_t Chat::getPhone() const
{
    return m_Phone;
}


void Chat::setPhone(utility::string_t value)
{
    m_Phone = value;
    
}
std::shared_ptr<Contact> Chat::getContact() const
{
    return m_Contact;
}


void Chat::setContact(std::shared_ptr<Contact> value)
{
    m_Contact = value;
    
}
int32_t Chat::getUnsubscribedContactId() const
{
    return m_UnsubscribedContactId;
}


void Chat::setUnsubscribedContactId(int32_t value)
{
    m_UnsubscribedContactId = value;
    
}
int32_t Chat::getUnread() const
{
    return m_Unread;
}


void Chat::setUnread(int32_t value)
{
    m_Unread = value;
    
}
utility::datetime Chat::getUpdatedAt() const
{
    return m_UpdatedAt;
}


void Chat::setUpdatedAt(utility::datetime value)
{
    m_UpdatedAt = value;
    
}
utility::string_t Chat::getStatus() const
{
    return m_Status;
}


void Chat::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
int32_t Chat::getMute() const
{
    return m_Mute;
}


void Chat::setMute(int32_t value)
{
    m_Mute = value;
    
}
utility::string_t Chat::getLastMessage() const
{
    return m_LastMessage;
}


void Chat::setLastMessage(utility::string_t value)
{
    m_LastMessage = value;
    
}
utility::string_t Chat::getDirection() const
{
    return m_Direction;
}


void Chat::setDirection(utility::string_t value)
{
    m_Direction = value;
    
}
utility::string_t Chat::getFrom() const
{
    return m_From;
}


void Chat::setFrom(utility::string_t value)
{
    m_From = value;
    
}
utility::datetime Chat::getMutedUntil() const
{
    return m_MutedUntil;
}


void Chat::setMutedUntil(utility::datetime value)
{
    m_MutedUntil = value;
    
}
int32_t Chat::getTimeLeftMute() const
{
    return m_TimeLeftMute;
}


void Chat::setTimeLeftMute(int32_t value)
{
    m_TimeLeftMute = value;
    
}
std::shared_ptr<Country> Chat::getCountry() const
{
    return m_Country;
}


void Chat::setCountry(std::shared_ptr<Country> value)
{
    m_Country = value;
    
}
bool Chat::isPinned() const
{
    return m_Pinned;
}


void Chat::setPinned(bool value)
{
    m_Pinned = value;
    
}
}
}
}
}

