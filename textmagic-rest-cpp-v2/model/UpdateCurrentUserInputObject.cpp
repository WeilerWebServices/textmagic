/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UpdateCurrentUserInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

UpdateCurrentUserInputObject::UpdateCurrentUserInputObject()
{
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
    m_Company = utility::conversions::to_string_t("");
    m_CompanyIsSet = false;
    m_Timezone = 0;
    m_TimezoneIsSet = false;
}

UpdateCurrentUserInputObject::~UpdateCurrentUserInputObject()
{
}

void UpdateCurrentUserInputObject::validate()
{
    // TODO: implement validation
}

web::json::value UpdateCurrentUserInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    }
    if(m_CompanyIsSet)
    {
        val[utility::conversions::to_string_t("company")] = ModelBase::toJson(m_Company);
    }
    if(m_TimezoneIsSet)
    {
        val[utility::conversions::to_string_t("timezone")] = ModelBase::toJson(m_Timezone);
    }

    return val;
}

void UpdateCurrentUserInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("username")];
        if(!fieldValue.is_null())
        {
            setUsername(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("email")];
        if(!fieldValue.is_null())
        {
            setEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phone")];
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("company")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("company")];
        if(!fieldValue.is_null())
        {
            setCompany(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timezone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timezone")];
        if(!fieldValue.is_null())
        {
            setTimezone(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void UpdateCurrentUserInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
        
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
        
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
        
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
        
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
        
    }
    if(m_CompanyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("company"), m_Company));
        
    }
    if(m_TimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timezone"), m_Timezone));
    }
}

void UpdateCurrentUserInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("company")))
    {
        setCompany(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("company"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timezone")))
    {
        setTimezone(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timezone"))));
    }
}

utility::string_t UpdateCurrentUserInputObject::getUsername() const
{
    return m_Username;
}


void UpdateCurrentUserInputObject::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool UpdateCurrentUserInputObject::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void UpdateCurrentUserInputObject::unsetUsername()
{
    m_UsernameIsSet = false;
}

utility::string_t UpdateCurrentUserInputObject::getFirstName() const
{
    return m_FirstName;
}


void UpdateCurrentUserInputObject::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool UpdateCurrentUserInputObject::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void UpdateCurrentUserInputObject::unsetFirstName()
{
    m_FirstNameIsSet = false;
}

utility::string_t UpdateCurrentUserInputObject::getLastName() const
{
    return m_LastName;
}


void UpdateCurrentUserInputObject::setLastName(utility::string_t value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}
bool UpdateCurrentUserInputObject::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void UpdateCurrentUserInputObject::unsetLastName()
{
    m_LastNameIsSet = false;
}

utility::string_t UpdateCurrentUserInputObject::getEmail() const
{
    return m_Email;
}


void UpdateCurrentUserInputObject::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool UpdateCurrentUserInputObject::emailIsSet() const
{
    return m_EmailIsSet;
}

void UpdateCurrentUserInputObject::unsetEmail()
{
    m_EmailIsSet = false;
}

utility::string_t UpdateCurrentUserInputObject::getPhone() const
{
    return m_Phone;
}


void UpdateCurrentUserInputObject::setPhone(utility::string_t value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool UpdateCurrentUserInputObject::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void UpdateCurrentUserInputObject::unsetPhone()
{
    m_PhoneIsSet = false;
}

utility::string_t UpdateCurrentUserInputObject::getCompany() const
{
    return m_Company;
}


void UpdateCurrentUserInputObject::setCompany(utility::string_t value)
{
    m_Company = value;
    m_CompanyIsSet = true;
}
bool UpdateCurrentUserInputObject::companyIsSet() const
{
    return m_CompanyIsSet;
}

void UpdateCurrentUserInputObject::unsetCompany()
{
    m_CompanyIsSet = false;
}

int32_t UpdateCurrentUserInputObject::getTimezone() const
{
    return m_Timezone;
}


void UpdateCurrentUserInputObject::setTimezone(int32_t value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}
bool UpdateCurrentUserInputObject::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}

void UpdateCurrentUserInputObject::unsetTimezone()
{
    m_TimezoneIsSet = false;
}

}
}
}
}

