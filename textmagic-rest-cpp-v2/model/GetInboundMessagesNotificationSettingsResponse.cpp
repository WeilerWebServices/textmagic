/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetInboundMessagesNotificationSettingsResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetInboundMessagesNotificationSettingsResponse::GetInboundMessagesNotificationSettingsResponse()
{
    m_InboundMessageNotification = false;
    m_ForwardedCallNotification = false;
    m_IncludeSmsHistory = false;
    m_SendInHtmlFormat = false;
    m_AlertEmail1 = utility::conversions::to_string_t("");
    m_AlertEmail2 = utility::conversions::to_string_t("");
    m_AlertEmail3 = utility::conversions::to_string_t("");
}

GetInboundMessagesNotificationSettingsResponse::~GetInboundMessagesNotificationSettingsResponse()
{
}

void GetInboundMessagesNotificationSettingsResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetInboundMessagesNotificationSettingsResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("inboundMessageNotification")] = ModelBase::toJson(m_InboundMessageNotification);
    val[utility::conversions::to_string_t("forwardedCallNotification")] = ModelBase::toJson(m_ForwardedCallNotification);
    val[utility::conversions::to_string_t("includeSmsHistory")] = ModelBase::toJson(m_IncludeSmsHistory);
    val[utility::conversions::to_string_t("sendInHtmlFormat")] = ModelBase::toJson(m_SendInHtmlFormat);
    val[utility::conversions::to_string_t("alertEmail1")] = ModelBase::toJson(m_AlertEmail1);
    val[utility::conversions::to_string_t("alertEmail2")] = ModelBase::toJson(m_AlertEmail2);
    val[utility::conversions::to_string_t("alertEmail3")] = ModelBase::toJson(m_AlertEmail3);

    return val;
}

void GetInboundMessagesNotificationSettingsResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("inboundMessageNotification")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("inboundMessageNotification")];
        if(!fieldValue.is_null())
        {
            setInboundMessageNotification(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("forwardedCallNotification")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("forwardedCallNotification")];
        if(!fieldValue.is_null())
        {
            setForwardedCallNotification(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeSmsHistory")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("includeSmsHistory")];
        if(!fieldValue.is_null())
        {
            setIncludeSmsHistory(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendInHtmlFormat")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sendInHtmlFormat")];
        if(!fieldValue.is_null())
        {
            setSendInHtmlFormat(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertEmail1")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertEmail1")];
        if(!fieldValue.is_null())
        {
            setAlertEmail1(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertEmail2")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertEmail2")];
        if(!fieldValue.is_null())
        {
            setAlertEmail2(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertEmail3")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertEmail3")];
        if(!fieldValue.is_null())
        {
            setAlertEmail3(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void GetInboundMessagesNotificationSettingsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inboundMessageNotification"), m_InboundMessageNotification));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("forwardedCallNotification"), m_ForwardedCallNotification));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeSmsHistory"), m_IncludeSmsHistory));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendInHtmlFormat"), m_SendInHtmlFormat));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertEmail1"), m_AlertEmail1));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertEmail2"), m_AlertEmail2));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertEmail3"), m_AlertEmail3));
}

void GetInboundMessagesNotificationSettingsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setInboundMessageNotification(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("inboundMessageNotification"))));
    setForwardedCallNotification(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("forwardedCallNotification"))));
    setIncludeSmsHistory(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeSmsHistory"))));
    setSendInHtmlFormat(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendInHtmlFormat"))));
    setAlertEmail1(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertEmail1"))));
    setAlertEmail2(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertEmail2"))));
    setAlertEmail3(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertEmail3"))));
}

bool GetInboundMessagesNotificationSettingsResponse::isInboundMessageNotification() const
{
    return m_InboundMessageNotification;
}


void GetInboundMessagesNotificationSettingsResponse::setInboundMessageNotification(bool value)
{
    m_InboundMessageNotification = value;
    
}
bool GetInboundMessagesNotificationSettingsResponse::isForwardedCallNotification() const
{
    return m_ForwardedCallNotification;
}


void GetInboundMessagesNotificationSettingsResponse::setForwardedCallNotification(bool value)
{
    m_ForwardedCallNotification = value;
    
}
bool GetInboundMessagesNotificationSettingsResponse::isIncludeSmsHistory() const
{
    return m_IncludeSmsHistory;
}


void GetInboundMessagesNotificationSettingsResponse::setIncludeSmsHistory(bool value)
{
    m_IncludeSmsHistory = value;
    
}
bool GetInboundMessagesNotificationSettingsResponse::isSendInHtmlFormat() const
{
    return m_SendInHtmlFormat;
}


void GetInboundMessagesNotificationSettingsResponse::setSendInHtmlFormat(bool value)
{
    m_SendInHtmlFormat = value;
    
}
utility::string_t GetInboundMessagesNotificationSettingsResponse::getAlertEmail1() const
{
    return m_AlertEmail1;
}


void GetInboundMessagesNotificationSettingsResponse::setAlertEmail1(utility::string_t value)
{
    m_AlertEmail1 = value;
    
}
utility::string_t GetInboundMessagesNotificationSettingsResponse::getAlertEmail2() const
{
    return m_AlertEmail2;
}


void GetInboundMessagesNotificationSettingsResponse::setAlertEmail2(utility::string_t value)
{
    m_AlertEmail2 = value;
    
}
utility::string_t GetInboundMessagesNotificationSettingsResponse::getAlertEmail3() const
{
    return m_AlertEmail3;
}


void GetInboundMessagesNotificationSettingsResponse::setAlertEmail3(utility::string_t value)
{
    m_AlertEmail3 = value;
    
}
}
}
}
}

