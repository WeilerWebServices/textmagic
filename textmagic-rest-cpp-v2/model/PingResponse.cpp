/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PingResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

PingResponse::PingResponse()
{
    m_UserId = 0;
    m_Ping = utility::conversions::to_string_t("");
    m_UtcDateTime = utility::conversions::to_string_t("");
}

PingResponse::~PingResponse()
{
}

void PingResponse::validate()
{
    // TODO: implement validation
}

web::json::value PingResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    val[utility::conversions::to_string_t("ping")] = ModelBase::toJson(m_Ping);
    val[utility::conversions::to_string_t("utcDateTime")] = ModelBase::toJson(m_UtcDateTime);

    return val;
}

void PingResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("userId")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ping")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ping")];
        if(!fieldValue.is_null())
        {
            setPing(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("utcDateTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("utcDateTime")];
        if(!fieldValue.is_null())
        {
            setUtcDateTime(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void PingResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ping"), m_Ping));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("utcDateTime"), m_UtcDateTime));
}

void PingResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId"))));
    setPing(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ping"))));
    setUtcDateTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("utcDateTime"))));
}

int32_t PingResponse::getUserId() const
{
    return m_UserId;
}


void PingResponse::setUserId(int32_t value)
{
    m_UserId = value;
    
}
utility::string_t PingResponse::getPing() const
{
    return m_Ping;
}


void PingResponse::setPing(utility::string_t value)
{
    m_Ping = value;
    
}
utility::string_t PingResponse::getUtcDateTime() const
{
    return m_UtcDateTime;
}


void PingResponse::setUtcDateTime(utility::string_t value)
{
    m_UtcDateTime = value;
    
}
}
}
}
}

