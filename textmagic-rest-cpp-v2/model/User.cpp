/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "User.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

User::User()
{
    m_Id = 0;
    m_DisplayTimeFormat = utility::conversions::to_string_t("");
    m_DisplayTimeFormatIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_FirstName = utility::conversions::to_string_t("");
    m_LastName = utility::conversions::to_string_t("");
    m_Email = utility::conversions::to_string_t("");
    m_Status = utility::conversions::to_string_t("");
    m_Balance = 0.0;
    m_Phone = utility::conversions::to_string_t("");
    m_Company = utility::conversions::to_string_t("");
    m_SubaccountType = utility::conversions::to_string_t("");
    m_EmailAccepted = false;
    m_PhoneAccepted = false;
}

User::~User()
{
}

void User::validate()
{
    // TODO: implement validation
}

web::json::value User::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    if(m_DisplayTimeFormatIsSet)
    {
        val[utility::conversions::to_string_t("displayTimeFormat")] = ModelBase::toJson(m_DisplayTimeFormat);
    }
    val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("balance")] = ModelBase::toJson(m_Balance);
    val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    val[utility::conversions::to_string_t("company")] = ModelBase::toJson(m_Company);
    val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    val[utility::conversions::to_string_t("timezone")] = ModelBase::toJson(m_Timezone);
    val[utility::conversions::to_string_t("subaccountType")] = ModelBase::toJson(m_SubaccountType);
    val[utility::conversions::to_string_t("emailAccepted")] = ModelBase::toJson(m_EmailAccepted);
    val[utility::conversions::to_string_t("phoneAccepted")] = ModelBase::toJson(m_PhoneAccepted);
    val[utility::conversions::to_string_t("avatar")] = ModelBase::toJson(m_Avatar);

    return val;
}

void User::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayTimeFormat")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("displayTimeFormat")];
        if(!fieldValue.is_null())
        {
            setDisplayTimeFormat(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("username")];
        if(!fieldValue.is_null())
        {
            setUsername(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("email")];
        if(!fieldValue.is_null())
        {
            setEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("balance")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("balance")];
        if(!fieldValue.is_null())
        {
            setBalance(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phone")];
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("company")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("company")];
        if(!fieldValue.is_null())
        {
            setCompany(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Currency> newItem(new Currency());
            newItem->fromJson(fieldValue);
            setCurrency( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Country> newItem(new Country());
            newItem->fromJson(fieldValue);
            setCountry( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timezone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timezone")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Timezone> newItem(new Timezone());
            newItem->fromJson(fieldValue);
            setTimezone( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subaccountType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("subaccountType")];
        if(!fieldValue.is_null())
        {
            setSubaccountType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailAccepted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("emailAccepted")];
        if(!fieldValue.is_null())
        {
            setEmailAccepted(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phoneAccepted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phoneAccepted")];
        if(!fieldValue.is_null())
        {
            setPhoneAccepted(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avatar")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UserImage> newItem(new UserImage());
            newItem->fromJson(fieldValue);
            setAvatar( newItem );
        }
    }
}

void User::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    if(m_DisplayTimeFormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayTimeFormat"), m_DisplayTimeFormat));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("balance"), m_Balance));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("company"), m_Company));
    m_Currency->toMultipart(multipart, utility::conversions::to_string_t("currency."));
    m_Country->toMultipart(multipart, utility::conversions::to_string_t("country."));
    m_Timezone->toMultipart(multipart, utility::conversions::to_string_t("timezone."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subaccountType"), m_SubaccountType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailAccepted"), m_EmailAccepted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phoneAccepted"), m_PhoneAccepted));
    m_Avatar->toMultipart(multipart, utility::conversions::to_string_t("avatar."));
}

void User::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    if(multipart->hasContent(utility::conversions::to_string_t("displayTimeFormat")))
    {
        setDisplayTimeFormat(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayTimeFormat"))));
    }
    setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
    setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setBalance(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("balance"))));
    setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    setCompany(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("company"))));
    std::shared_ptr<Currency> newCurrency(new Currency());
    newCurrency->fromMultiPart(multipart, utility::conversions::to_string_t("currency."));
    setCurrency( newCurrency );
    std::shared_ptr<Country> newCountry(new Country());
    newCountry->fromMultiPart(multipart, utility::conversions::to_string_t("country."));
    setCountry( newCountry );
    std::shared_ptr<Timezone> newTimezone(new Timezone());
    newTimezone->fromMultiPart(multipart, utility::conversions::to_string_t("timezone."));
    setTimezone( newTimezone );
    setSubaccountType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("subaccountType"))));
    setEmailAccepted(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailAccepted"))));
    setPhoneAccepted(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phoneAccepted"))));
    std::shared_ptr<UserImage> newAvatar(new UserImage());
    newAvatar->fromMultiPart(multipart, utility::conversions::to_string_t("avatar."));
    setAvatar( newAvatar );
}

int32_t User::getId() const
{
    return m_Id;
}


void User::setId(int32_t value)
{
    m_Id = value;
    
}
utility::string_t User::getDisplayTimeFormat() const
{
    return m_DisplayTimeFormat;
}


void User::setDisplayTimeFormat(utility::string_t value)
{
    m_DisplayTimeFormat = value;
    m_DisplayTimeFormatIsSet = true;
}
bool User::displayTimeFormatIsSet() const
{
    return m_DisplayTimeFormatIsSet;
}

void User::unsetDisplayTimeFormat()
{
    m_DisplayTimeFormatIsSet = false;
}

utility::string_t User::getUsername() const
{
    return m_Username;
}


void User::setUsername(utility::string_t value)
{
    m_Username = value;
    
}
utility::string_t User::getFirstName() const
{
    return m_FirstName;
}


void User::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    
}
utility::string_t User::getLastName() const
{
    return m_LastName;
}


void User::setLastName(utility::string_t value)
{
    m_LastName = value;
    
}
utility::string_t User::getEmail() const
{
    return m_Email;
}


void User::setEmail(utility::string_t value)
{
    m_Email = value;
    
}
utility::string_t User::getStatus() const
{
    return m_Status;
}


void User::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
double User::getBalance() const
{
    return m_Balance;
}


void User::setBalance(double value)
{
    m_Balance = value;
    
}
utility::string_t User::getPhone() const
{
    return m_Phone;
}


void User::setPhone(utility::string_t value)
{
    m_Phone = value;
    
}
utility::string_t User::getCompany() const
{
    return m_Company;
}


void User::setCompany(utility::string_t value)
{
    m_Company = value;
    
}
std::shared_ptr<Currency> User::getCurrency() const
{
    return m_Currency;
}


void User::setCurrency(std::shared_ptr<Currency> value)
{
    m_Currency = value;
    
}
std::shared_ptr<Country> User::getCountry() const
{
    return m_Country;
}


void User::setCountry(std::shared_ptr<Country> value)
{
    m_Country = value;
    
}
std::shared_ptr<Timezone> User::getTimezone() const
{
    return m_Timezone;
}


void User::setTimezone(std::shared_ptr<Timezone> value)
{
    m_Timezone = value;
    
}
utility::string_t User::getSubaccountType() const
{
    return m_SubaccountType;
}


void User::setSubaccountType(utility::string_t value)
{
    m_SubaccountType = value;
    
}
bool User::isEmailAccepted() const
{
    return m_EmailAccepted;
}


void User::setEmailAccepted(bool value)
{
    m_EmailAccepted = value;
    
}
bool User::isPhoneAccepted() const
{
    return m_PhoneAccepted;
}


void User::setPhoneAccepted(bool value)
{
    m_PhoneAccepted = value;
    
}
std::shared_ptr<UserImage> User::getAvatar() const
{
    return m_Avatar;
}


void User::setAvatar(std::shared_ptr<UserImage> value)
{
    m_Avatar = value;
    
}
}
}
}
}

