=begin comment

TextMagic API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package Net::Sms::TextMagicClient::Object::User;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use Net::Sms::TextMagicClient::Object::Country;
use Net::Sms::TextMagicClient::Object::Currency;
use Net::Sms::TextMagicClient::Object::Number;
use Net::Sms::TextMagicClient::Object::Timezone;
use Net::Sms::TextMagicClient::Object::UserImage;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

TextMagic API

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "Net::Sms::TextMagicClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'User',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'id' => {
    	datatype => 'int',
    	base_name => 'id',
    	description => 'User ID.',
    	format => '',
    	read_only => '',
    		},
    'display_time_format' => {
    	datatype => 'string',
    	base_name => 'displayTimeFormat',
    	description => 'User&#39;s preferred format of time display: * *12h* - AM/PM format; * *24h* - 24-hour clock format. ',
    	format => '',
    	read_only => '',
    		},
    'username' => {
    	datatype => 'string',
    	base_name => 'username',
    	description => 'Username.',
    	format => '',
    	read_only => '',
    		},
    'first_name' => {
    	datatype => 'string',
    	base_name => 'firstName',
    	description => 'Account first name.',
    	format => '',
    	read_only => '',
    		},
    'last_name' => {
    	datatype => 'string',
    	base_name => 'lastName',
    	description => 'Account last name.',
    	format => '',
    	read_only => '',
    		},
    'email' => {
    	datatype => 'string',
    	base_name => 'email',
    	description => 'User email address.',
    	format => '',
    	read_only => '',
    		},
    'status' => {
    	datatype => 'string',
    	base_name => 'status',
    	description => 'Current account status: * **A** for Active; * **T** for Trial. ',
    	format => '',
    	read_only => '',
    		},
    'balance' => {
    	datatype => 'Number',
    	base_name => 'balance',
    	description => 'Account balance (in account currency).',
    	format => '',
    	read_only => '',
    		},
    'phone' => {
    	datatype => 'string',
    	base_name => 'phone',
    	description => 'User&#39;s phone number.',
    	format => '',
    	read_only => '',
    		},
    'company' => {
    	datatype => 'string',
    	base_name => 'company',
    	description => 'Account company name.',
    	format => '',
    	read_only => '',
    		},
    'currency' => {
    	datatype => 'Currency',
    	base_name => 'currency',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'country' => {
    	datatype => 'Country',
    	base_name => 'country',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'timezone' => {
    	datatype => 'Timezone',
    	base_name => 'timezone',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'subaccount_type' => {
    	datatype => 'string',
    	base_name => 'subaccountType',
    	description => 'Type of account: * **P** for Parent User; * **A** for Administrator Sub-Account; * **U** for Regular User. ',
    	format => '',
    	read_only => '',
    		},
    'email_accepted' => {
    	datatype => 'boolean',
    	base_name => 'emailAccepted',
    	description => 'Does the account have a confirmed email?',
    	format => '',
    	read_only => '',
    		},
    'phone_accepted' => {
    	datatype => 'boolean',
    	base_name => 'phoneAccepted',
    	description => 'Does the account have a confirmed phone number?',
    	format => '',
    	read_only => '',
    		},
    'avatar' => {
    	datatype => 'UserImage',
    	base_name => 'avatar',
    	description => '',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'id' => 'int',
    'display_time_format' => 'string',
    'username' => 'string',
    'first_name' => 'string',
    'last_name' => 'string',
    'email' => 'string',
    'status' => 'string',
    'balance' => 'Number',
    'phone' => 'string',
    'company' => 'string',
    'currency' => 'Currency',
    'country' => 'Country',
    'timezone' => 'Timezone',
    'subaccount_type' => 'string',
    'email_accepted' => 'boolean',
    'phone_accepted' => 'boolean',
    'avatar' => 'UserImage'
} );

__PACKAGE__->attribute_map( {
    'id' => 'id',
    'display_time_format' => 'displayTimeFormat',
    'username' => 'username',
    'first_name' => 'firstName',
    'last_name' => 'lastName',
    'email' => 'email',
    'status' => 'status',
    'balance' => 'balance',
    'phone' => 'phone',
    'company' => 'company',
    'currency' => 'currency',
    'country' => 'country',
    'timezone' => 'timezone',
    'subaccount_type' => 'subaccountType',
    'email_accepted' => 'emailAccepted',
    'phone_accepted' => 'phoneAccepted',
    'avatar' => 'avatar'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
