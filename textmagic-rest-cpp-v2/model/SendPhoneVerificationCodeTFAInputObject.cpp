/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SendPhoneVerificationCodeTFAInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

SendPhoneVerificationCodeTFAInputObject::SendPhoneVerificationCodeTFAInputObject()
{
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
    m_WorkflowId = utility::conversions::to_string_t("");
    m_WorkflowIdIsSet = false;
    m_Brand = utility::conversions::to_string_t("");
    m_BrandIsSet = false;
    m_CodeLength = 0;
    m_CodeLengthIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_SenderId = utility::conversions::to_string_t("");
    m_SenderIdIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
}

SendPhoneVerificationCodeTFAInputObject::~SendPhoneVerificationCodeTFAInputObject()
{
}

void SendPhoneVerificationCodeTFAInputObject::validate()
{
    // TODO: implement validation
}

web::json::value SendPhoneVerificationCodeTFAInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    }
    if(m_WorkflowIdIsSet)
    {
        val[utility::conversions::to_string_t("workflowId")] = ModelBase::toJson(m_WorkflowId);
    }
    if(m_BrandIsSet)
    {
        val[utility::conversions::to_string_t("brand")] = ModelBase::toJson(m_Brand);
    }
    if(m_CodeLengthIsSet)
    {
        val[utility::conversions::to_string_t("codeLength")] = ModelBase::toJson(m_CodeLength);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t("language")] = ModelBase::toJson(m_Language);
    }
    if(m_SenderIdIsSet)
    {
        val[utility::conversions::to_string_t("senderId")] = ModelBase::toJson(m_SenderId);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }

    return val;
}

void SendPhoneVerificationCodeTFAInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phone")];
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workflowId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("workflowId")];
        if(!fieldValue.is_null())
        {
            setWorkflowId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("brand")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("brand")];
        if(!fieldValue.is_null())
        {
            setBrand(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("codeLength")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("codeLength")];
        if(!fieldValue.is_null())
        {
            setCodeLength(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("language")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("language")];
        if(!fieldValue.is_null())
        {
            setLanguage(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("senderId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("senderId")];
        if(!fieldValue.is_null())
        {
            setSenderId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country")];
        if(!fieldValue.is_null())
        {
            setCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void SendPhoneVerificationCodeTFAInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
        
    }
    if(m_WorkflowIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workflowId"), m_WorkflowId));
        
    }
    if(m_BrandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("brand"), m_Brand));
        
    }
    if(m_CodeLengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("codeLength"), m_CodeLength));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("language"), m_Language));
        
    }
    if(m_SenderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("senderId"), m_SenderId));
        
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
        
    }
}

void SendPhoneVerificationCodeTFAInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workflowId")))
    {
        setWorkflowId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("workflowId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("brand")))
    {
        setBrand(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("brand"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("codeLength")))
    {
        setCodeLength(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("codeLength"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("language")))
    {
        setLanguage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("language"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("senderId")))
    {
        setSenderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("senderId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        setCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("country"))));
    }
}

utility::string_t SendPhoneVerificationCodeTFAInputObject::getPhone() const
{
    return m_Phone;
}


void SendPhoneVerificationCodeTFAInputObject::setPhone(utility::string_t value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool SendPhoneVerificationCodeTFAInputObject::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void SendPhoneVerificationCodeTFAInputObject::unsetPhone()
{
    m_PhoneIsSet = false;
}

utility::string_t SendPhoneVerificationCodeTFAInputObject::getWorkflowId() const
{
    return m_WorkflowId;
}


void SendPhoneVerificationCodeTFAInputObject::setWorkflowId(utility::string_t value)
{
    m_WorkflowId = value;
    m_WorkflowIdIsSet = true;
}
bool SendPhoneVerificationCodeTFAInputObject::workflowIdIsSet() const
{
    return m_WorkflowIdIsSet;
}

void SendPhoneVerificationCodeTFAInputObject::unsetWorkflowId()
{
    m_WorkflowIdIsSet = false;
}

utility::string_t SendPhoneVerificationCodeTFAInputObject::getBrand() const
{
    return m_Brand;
}


void SendPhoneVerificationCodeTFAInputObject::setBrand(utility::string_t value)
{
    m_Brand = value;
    m_BrandIsSet = true;
}
bool SendPhoneVerificationCodeTFAInputObject::brandIsSet() const
{
    return m_BrandIsSet;
}

void SendPhoneVerificationCodeTFAInputObject::unsetBrand()
{
    m_BrandIsSet = false;
}

int32_t SendPhoneVerificationCodeTFAInputObject::getCodeLength() const
{
    return m_CodeLength;
}


void SendPhoneVerificationCodeTFAInputObject::setCodeLength(int32_t value)
{
    m_CodeLength = value;
    m_CodeLengthIsSet = true;
}
bool SendPhoneVerificationCodeTFAInputObject::codeLengthIsSet() const
{
    return m_CodeLengthIsSet;
}

void SendPhoneVerificationCodeTFAInputObject::unsetCodeLength()
{
    m_CodeLengthIsSet = false;
}

utility::string_t SendPhoneVerificationCodeTFAInputObject::getLanguage() const
{
    return m_Language;
}


void SendPhoneVerificationCodeTFAInputObject::setLanguage(utility::string_t value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}
bool SendPhoneVerificationCodeTFAInputObject::languageIsSet() const
{
    return m_LanguageIsSet;
}

void SendPhoneVerificationCodeTFAInputObject::unsetLanguage()
{
    m_LanguageIsSet = false;
}

utility::string_t SendPhoneVerificationCodeTFAInputObject::getSenderId() const
{
    return m_SenderId;
}


void SendPhoneVerificationCodeTFAInputObject::setSenderId(utility::string_t value)
{
    m_SenderId = value;
    m_SenderIdIsSet = true;
}
bool SendPhoneVerificationCodeTFAInputObject::senderIdIsSet() const
{
    return m_SenderIdIsSet;
}

void SendPhoneVerificationCodeTFAInputObject::unsetSenderId()
{
    m_SenderIdIsSet = false;
}

utility::string_t SendPhoneVerificationCodeTFAInputObject::getCountry() const
{
    return m_Country;
}


void SendPhoneVerificationCodeTFAInputObject::setCountry(utility::string_t value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool SendPhoneVerificationCodeTFAInputObject::countryIsSet() const
{
    return m_CountryIsSet;
}

void SendPhoneVerificationCodeTFAInputObject::unsetCountry()
{
    m_CountryIsSet = false;
}

}
}
}
}

