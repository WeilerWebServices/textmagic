/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Currency.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

Currency::Currency()
{
    m_Id = utility::conversions::to_string_t("");
    m_UnicodeSymbol = utility::conversions::to_string_t("");
    m_HtmlSymbol = utility::conversions::to_string_t("");
}

Currency::~Currency()
{
}

void Currency::validate()
{
    // TODO: implement validation
}

web::json::value Currency::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("unicodeSymbol")] = ModelBase::toJson(m_UnicodeSymbol);
    val[utility::conversions::to_string_t("htmlSymbol")] = ModelBase::toJson(m_HtmlSymbol);

    return val;
}

void Currency::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unicodeSymbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unicodeSymbol")];
        if(!fieldValue.is_null())
        {
            setUnicodeSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("htmlSymbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("htmlSymbol")];
        if(!fieldValue.is_null())
        {
            setHtmlSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Currency::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unicodeSymbol"), m_UnicodeSymbol));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("htmlSymbol"), m_HtmlSymbol));
}

void Currency::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setUnicodeSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unicodeSymbol"))));
    setHtmlSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("htmlSymbol"))));
}

utility::string_t Currency::getId() const
{
    return m_Id;
}


void Currency::setId(utility::string_t value)
{
    m_Id = value;
    
}
utility::string_t Currency::getUnicodeSymbol() const
{
    return m_UnicodeSymbol;
}


void Currency::setUnicodeSymbol(utility::string_t value)
{
    m_UnicodeSymbol = value;
    
}
utility::string_t Currency::getHtmlSymbol() const
{
    return m_HtmlSymbol;
}


void Currency::setHtmlSymbol(utility::string_t value)
{
    m_HtmlSymbol = value;
    
}
}
}
}
}

