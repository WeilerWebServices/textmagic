/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DoEmailLookupResponse', function() {
      beforeEach(function() {
        instance = new TextmagicClient.DoEmailLookupResponse();
      });

      it('should create an instance of DoEmailLookupResponse', function() {
        // TODO: update the code to test DoEmailLookupResponse
        expect(instance).to.be.a(TextmagicClient.DoEmailLookupResponse);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property deliverability (base name: "deliverability")', function() {
        // TODO: update the code to test the property deliverability
        expect(instance).to.have.property('deliverability');
        // expect(instance.deliverability).to.be(expectedValueLiteral);
      });

      it('should have the property reason (base name: "reason")', function() {
        // TODO: update the code to test the property reason
        expect(instance).to.have.property('reason');
        // expect(instance.reason).to.be(expectedValueLiteral);
      });

      it('should have the property risk (base name: "risk")', function() {
        // TODO: update the code to test the property risk
        expect(instance).to.have.property('risk');
        // expect(instance.risk).to.be(expectedValueLiteral);
      });

      it('should have the property addressType (base name: "addressType")', function() {
        // TODO: update the code to test the property addressType
        expect(instance).to.have.property('addressType');
        // expect(instance.addressType).to.be(expectedValueLiteral);
      });

      it('should have the property isDisposableAddress (base name: "isDisposableAddress")', function() {
        // TODO: update the code to test the property isDisposableAddress
        expect(instance).to.have.property('isDisposableAddress');
        // expect(instance.isDisposableAddress).to.be(expectedValueLiteral);
      });

      it('should have the property suggestion (base name: "suggestion")', function() {
        // TODO: update the code to test the property suggestion
        expect(instance).to.have.property('suggestion');
        // expect(instance.suggestion).to.be(expectedValueLiteral);
      });

      it('should have the property emailRole (base name: "emailRole")', function() {
        // TODO: update the code to test the property emailRole
        expect(instance).to.have.property('emailRole');
        // expect(instance.emailRole).to.be(expectedValueLiteral);
      });

      it('should have the property localPart (base name: "localPart")', function() {
        // TODO: update the code to test the property localPart
        expect(instance).to.have.property('localPart');
        // expect(instance.localPart).to.be(expectedValueLiteral);
      });

      it('should have the property domainPart (base name: "domainPart")', function() {
        // TODO: update the code to test the property domainPart
        expect(instance).to.have.property('domainPart');
        // expect(instance.domainPart).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property preference (base name: "preference")', function() {
        // TODO: update the code to test the property preference
        expect(instance).to.have.property('preference');
        // expect(instance.preference).to.be(expectedValueLiteral);
      });

      it('should have the property isInWhiteList (base name: "isInWhiteList")', function() {
        // TODO: update the code to test the property isInWhiteList
        expect(instance).to.have.property('isInWhiteList');
        // expect(instance.isInWhiteList).to.be(expectedValueLiteral);
      });

      it('should have the property isInBlackList (base name: "isInBlackList")', function() {
        // TODO: update the code to test the property isInBlackList
        expect(instance).to.have.property('isInBlackList');
        // expect(instance.isInBlackList).to.be(expectedValueLiteral);
      });

      it('should have the property hasMx (base name: "hasMx")', function() {
        // TODO: update the code to test the property hasMx
        expect(instance).to.have.property('hasMx');
        // expect(instance.hasMx).to.be(expectedValueLiteral);
      });

      it('should have the property hasAa (base name: "hasAa")', function() {
        // TODO: update the code to test the property hasAa
        expect(instance).to.have.property('hasAa');
        // expect(instance.hasAa).to.be(expectedValueLiteral);
      });

      it('should have the property hasAaaa (base name: "hasAaaa")', function() {
        // TODO: update the code to test the property hasAaaa
        expect(instance).to.have.property('hasAaaa');
        // expect(instance.hasAaaa).to.be(expectedValueLiteral);
      });

    });
  });

}));
