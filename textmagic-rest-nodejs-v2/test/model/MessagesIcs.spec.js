/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MessagesIcs', function() {
      beforeEach(function() {
        instance = new TextmagicClient.MessagesIcs();
      });

      it('should create an instance of MessagesIcs', function() {
        // TODO: update the code to test MessagesIcs
        expect(instance).to.be.a(TextmagicClient.MessagesIcs);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property nextSend (base name: "nextSend")', function() {
        // TODO: update the code to test the property nextSend
        expect(instance).to.have.property('nextSend');
        // expect(instance.nextSend).to.be(expectedValueLiteral);
      });

      it('should have the property rrule (base name: "rrule")', function() {
        // TODO: update the code to test the property rrule
        expect(instance).to.have.property('rrule');
        // expect(instance.rrule).to.be(expectedValueLiteral);
      });

      it('should have the property session (base name: "session")', function() {
        // TODO: update the code to test the property session
        expect(instance).to.have.property('session');
        // expect(instance.session).to.be(expectedValueLiteral);
      });

      it('should have the property lastSent (base name: "lastSent")', function() {
        // TODO: update the code to test the property lastSent
        expect(instance).to.have.property('lastSent');
        // expect(instance.lastSent).to.be(expectedValueLiteral);
      });

      it('should have the property contactName (base name: "contactName")', function() {
        // TODO: update the code to test the property contactName
        expect(instance).to.have.property('contactName');
        // expect(instance.contactName).to.be(expectedValueLiteral);
      });

      it('should have the property parameters (base name: "parameters")', function() {
        // TODO: update the code to test the property parameters
        expect(instance).to.have.property('parameters');
        // expect(instance.parameters).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property summary (base name: "summary")', function() {
        // TODO: update the code to test the property summary
        expect(instance).to.have.property('summary');
        // expect(instance.summary).to.be(expectedValueLiteral);
      });

      it('should have the property textParameters (base name: "textParameters")', function() {
        // TODO: update the code to test the property textParameters
        expect(instance).to.have.property('textParameters');
        // expect(instance.textParameters).to.be(expectedValueLiteral);
      });

      it('should have the property firstOccurrence (base name: "firstOccurrence")', function() {
        // TODO: update the code to test the property firstOccurrence
        expect(instance).to.have.property('firstOccurrence');
        // expect(instance.firstOccurrence).to.be(expectedValueLiteral);
      });

      it('should have the property lastOccurrence (base name: "lastOccurrence")', function() {
        // TODO: update the code to test the property lastOccurrence
        expect(instance).to.have.property('lastOccurrence');
        // expect(instance.lastOccurrence).to.be(expectedValueLiteral);
      });

      it('should have the property recipientsCount (base name: "recipientsCount")', function() {
        // TODO: update the code to test the property recipientsCount
        expect(instance).to.have.property('recipientsCount');
        // expect(instance.recipientsCount).to.be(expectedValueLiteral);
      });

      it('should have the property timezone (base name: "timezone")', function() {
        // TODO: update the code to test the property timezone
        expect(instance).to.have.property('timezone');
        // expect(instance.timezone).to.be(expectedValueLiteral);
      });

      it('should have the property completed (base name: "completed")', function() {
        // TODO: update the code to test the property completed
        expect(instance).to.have.property('completed');
        // expect(instance.completed).to.be(expectedValueLiteral);
      });

      it('should have the property avatar (base name: "avatar")', function() {
        // TODO: update the code to test the property avatar
        expect(instance).to.have.property('avatar');
        // expect(instance.avatar).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
