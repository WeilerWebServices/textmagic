/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetAvailableDedicatedNumbersResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetAvailableDedicatedNumbersResponse::GetAvailableDedicatedNumbersResponse()
{
    m_Price = 0.0f;
}

GetAvailableDedicatedNumbersResponse::~GetAvailableDedicatedNumbersResponse()
{
}

void GetAvailableDedicatedNumbersResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetAvailableDedicatedNumbersResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Numbers )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("numbers")] = web::json::value::array(jsonArray);
    }
    val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);

    return val;
}

void GetAvailableDedicatedNumbersResponse::fromJson(web::json::value& val)
{
    {
        m_Numbers.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("numbers")))
        {
        for( auto& item : val[utility::conversions::to_string_t("numbers")].as_array() )
        {
            m_Numbers.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price")];
        if(!fieldValue.is_null())
        {
            setPrice(ModelBase::floatFromJson(fieldValue));
        }
    }
}

void GetAvailableDedicatedNumbersResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Numbers )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numbers"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
}

void GetAvailableDedicatedNumbersResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Numbers.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("numbers"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Numbers.push_back(ModelBase::stringFromJson(item));
        }
    }
    setPrice(ModelBase::floatFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
}

std::vector<utility::string_t>& GetAvailableDedicatedNumbersResponse::getNumbers()
{
    return m_Numbers;
}

void GetAvailableDedicatedNumbersResponse::setNumbers(std::vector<utility::string_t> value)
{
    m_Numbers = value;
    
}
float GetAvailableDedicatedNumbersResponse::getPrice() const
{
    return m_Price;
}


void GetAvailableDedicatedNumbersResponse::setPrice(float value)
{
    m_Price = value;
    
}
}
}
}
}

