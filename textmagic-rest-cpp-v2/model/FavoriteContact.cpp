/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FavoriteContact.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

FavoriteContact::FavoriteContact()
{
    m_EntityId = 0;
    m_EntityType = utility::conversions::to_string_t("");
    m_PrimaryLabel = utility::conversions::to_string_t("");
    m_SecondaryLabel = utility::conversions::to_string_t("");
    m_TertiaryLabel = utility::conversions::to_string_t("");
    m_Avatar = utility::conversions::to_string_t("");
}

FavoriteContact::~FavoriteContact()
{
}

void FavoriteContact::validate()
{
    // TODO: implement validation
}

web::json::value FavoriteContact::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("entityId")] = ModelBase::toJson(m_EntityId);
    val[utility::conversions::to_string_t("entityType")] = ModelBase::toJson(m_EntityType);
    val[utility::conversions::to_string_t("primaryLabel")] = ModelBase::toJson(m_PrimaryLabel);
    val[utility::conversions::to_string_t("secondaryLabel")] = ModelBase::toJson(m_SecondaryLabel);
    val[utility::conversions::to_string_t("tertiaryLabel")] = ModelBase::toJson(m_TertiaryLabel);
    val[utility::conversions::to_string_t("avatar")] = ModelBase::toJson(m_Avatar);

    return val;
}

void FavoriteContact::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("entityId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("entityId")];
        if(!fieldValue.is_null())
        {
            setEntityId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entityType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("entityType")];
        if(!fieldValue.is_null())
        {
            setEntityType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("primaryLabel")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("primaryLabel")];
        if(!fieldValue.is_null())
        {
            setPrimaryLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("secondaryLabel")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("secondaryLabel")];
        if(!fieldValue.is_null())
        {
            setSecondaryLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tertiaryLabel")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tertiaryLabel")];
        if(!fieldValue.is_null())
        {
            setTertiaryLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avatar")];
        if(!fieldValue.is_null())
        {
            setAvatar(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void FavoriteContact::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityId"), m_EntityId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityType"), m_EntityType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("primaryLabel"), m_PrimaryLabel));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secondaryLabel"), m_SecondaryLabel));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tertiaryLabel"), m_TertiaryLabel));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar"), m_Avatar));
}

void FavoriteContact::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setEntityId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityId"))));
    setEntityType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityType"))));
    setPrimaryLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("primaryLabel"))));
    setSecondaryLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("secondaryLabel"))));
    setTertiaryLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tertiaryLabel"))));
    setAvatar(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar"))));
}

int32_t FavoriteContact::getEntityId() const
{
    return m_EntityId;
}


void FavoriteContact::setEntityId(int32_t value)
{
    m_EntityId = value;
    
}
utility::string_t FavoriteContact::getEntityType() const
{
    return m_EntityType;
}


void FavoriteContact::setEntityType(utility::string_t value)
{
    m_EntityType = value;
    
}
utility::string_t FavoriteContact::getPrimaryLabel() const
{
    return m_PrimaryLabel;
}


void FavoriteContact::setPrimaryLabel(utility::string_t value)
{
    m_PrimaryLabel = value;
    
}
utility::string_t FavoriteContact::getSecondaryLabel() const
{
    return m_SecondaryLabel;
}


void FavoriteContact::setSecondaryLabel(utility::string_t value)
{
    m_SecondaryLabel = value;
    
}
utility::string_t FavoriteContact::getTertiaryLabel() const
{
    return m_TertiaryLabel;
}


void FavoriteContact::setTertiaryLabel(utility::string_t value)
{
    m_TertiaryLabel = value;
    
}
utility::string_t FavoriteContact::getAvatar() const
{
    return m_Avatar;
}


void FavoriteContact::setAvatar(utility::string_t value)
{
    m_Avatar = value;
    
}
}
}
}
}

