/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MessagesIcs.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

MessagesIcs::MessagesIcs()
{
    m_Id = 0;
    m_NextSend = utility::datetime();
    m_Rrule = utility::conversions::to_string_t("");
    m_LastSent = utility::datetime();
    m_ContactName = utility::conversions::to_string_t("");
    m_Type = utility::conversions::to_string_t("");
    m_Summary = utility::conversions::to_string_t("");
    m_FirstOccurrence = utility::datetime();
    m_LastOccurrence = utility::datetime();
    m_RecipientsCount = 0;
    m_Timezone = utility::conversions::to_string_t("");
    m_Completed = false;
    m_Avatar = utility::conversions::to_string_t("");
    m_CreatedAt = utility::datetime();
}

MessagesIcs::~MessagesIcs()
{
}

void MessagesIcs::validate()
{
    // TODO: implement validation
}

web::json::value MessagesIcs::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("nextSend")] = ModelBase::toJson(m_NextSend);
    val[utility::conversions::to_string_t("rrule")] = ModelBase::toJson(m_Rrule);
    val[utility::conversions::to_string_t("session")] = ModelBase::toJson(m_Session);
    val[utility::conversions::to_string_t("lastSent")] = ModelBase::toJson(m_LastSent);
    val[utility::conversions::to_string_t("contactName")] = ModelBase::toJson(m_ContactName);
    val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    val[utility::conversions::to_string_t("summary")] = ModelBase::toJson(m_Summary);
    val[utility::conversions::to_string_t("textParameters")] = ModelBase::toJson(m_TextParameters);
    val[utility::conversions::to_string_t("firstOccurrence")] = ModelBase::toJson(m_FirstOccurrence);
    val[utility::conversions::to_string_t("lastOccurrence")] = ModelBase::toJson(m_LastOccurrence);
    val[utility::conversions::to_string_t("recipientsCount")] = ModelBase::toJson(m_RecipientsCount);
    val[utility::conversions::to_string_t("timezone")] = ModelBase::toJson(m_Timezone);
    val[utility::conversions::to_string_t("completed")] = ModelBase::toJson(m_Completed);
    val[utility::conversions::to_string_t("avatar")] = ModelBase::toJson(m_Avatar);
    val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);

    return val;
}

void MessagesIcs::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nextSend")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("nextSend")];
        if(!fieldValue.is_null())
        {
            setNextSend(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rrule")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("rrule")];
        if(!fieldValue.is_null())
        {
            setRrule(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("session")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("session")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MessageSession> newItem(new MessageSession());
            newItem->fromJson(fieldValue);
            setSession( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastSent")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastSent")];
        if(!fieldValue.is_null())
        {
            setLastSent(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contactName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contactName")];
        if(!fieldValue.is_null())
        {
            setContactName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("parameters")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MessagesIcs_parameters> newItem(new MessagesIcs_parameters());
            newItem->fromJson(fieldValue);
            setParameters( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("summary")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("summary")];
        if(!fieldValue.is_null())
        {
            setSummary(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("textParameters")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("textParameters")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MessagesIcs_textParameters> newItem(new MessagesIcs_textParameters());
            newItem->fromJson(fieldValue);
            setTextParameters( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstOccurrence")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstOccurrence")];
        if(!fieldValue.is_null())
        {
            setFirstOccurrence(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastOccurrence")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastOccurrence")];
        if(!fieldValue.is_null())
        {
            setLastOccurrence(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recipientsCount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("recipientsCount")];
        if(!fieldValue.is_null())
        {
            setRecipientsCount(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timezone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timezone")];
        if(!fieldValue.is_null())
        {
            setTimezone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("completed")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("completed")];
        if(!fieldValue.is_null())
        {
            setCompleted(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avatar")];
        if(!fieldValue.is_null())
        {
            setAvatar(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("createdAt")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
}

void MessagesIcs::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nextSend"), m_NextSend));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rrule"), m_Rrule));
    m_Session->toMultipart(multipart, utility::conversions::to_string_t("session."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastSent"), m_LastSent));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contactName"), m_ContactName));
    m_Parameters->toMultipart(multipart, utility::conversions::to_string_t("parameters."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("summary"), m_Summary));
    m_TextParameters->toMultipart(multipart, utility::conversions::to_string_t("textParameters."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstOccurrence"), m_FirstOccurrence));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastOccurrence"), m_LastOccurrence));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("recipientsCount"), m_RecipientsCount));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timezone"), m_Timezone));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("completed"), m_Completed));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar"), m_Avatar));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
}

void MessagesIcs::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setNextSend(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nextSend"))));
    setRrule(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rrule"))));
    std::shared_ptr<MessageSession> newSession(new MessageSession());
    newSession->fromMultiPart(multipart, utility::conversions::to_string_t("session."));
    setSession( newSession );
    setLastSent(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastSent"))));
    setContactName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contactName"))));
    std::shared_ptr<MessagesIcs_parameters> newParameters(new MessagesIcs_parameters());
    newParameters->fromMultiPart(multipart, utility::conversions::to_string_t("parameters."));
    setParameters( newParameters );
    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    setSummary(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("summary"))));
    std::shared_ptr<MessagesIcs_textParameters> newTextParameters(new MessagesIcs_textParameters());
    newTextParameters->fromMultiPart(multipart, utility::conversions::to_string_t("textParameters."));
    setTextParameters( newTextParameters );
    setFirstOccurrence(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstOccurrence"))));
    setLastOccurrence(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastOccurrence"))));
    setRecipientsCount(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("recipientsCount"))));
    setTimezone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timezone"))));
    setCompleted(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("completed"))));
    setAvatar(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar"))));
    setCreatedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt"))));
}

int32_t MessagesIcs::getId() const
{
    return m_Id;
}


void MessagesIcs::setId(int32_t value)
{
    m_Id = value;
    
}
utility::datetime MessagesIcs::getNextSend() const
{
    return m_NextSend;
}


void MessagesIcs::setNextSend(utility::datetime value)
{
    m_NextSend = value;
    
}
utility::string_t MessagesIcs::getRrule() const
{
    return m_Rrule;
}


void MessagesIcs::setRrule(utility::string_t value)
{
    m_Rrule = value;
    
}
std::shared_ptr<MessageSession> MessagesIcs::getSession() const
{
    return m_Session;
}


void MessagesIcs::setSession(std::shared_ptr<MessageSession> value)
{
    m_Session = value;
    
}
utility::datetime MessagesIcs::getLastSent() const
{
    return m_LastSent;
}


void MessagesIcs::setLastSent(utility::datetime value)
{
    m_LastSent = value;
    
}
utility::string_t MessagesIcs::getContactName() const
{
    return m_ContactName;
}


void MessagesIcs::setContactName(utility::string_t value)
{
    m_ContactName = value;
    
}
std::shared_ptr<MessagesIcs_parameters> MessagesIcs::getParameters() const
{
    return m_Parameters;
}


void MessagesIcs::setParameters(std::shared_ptr<MessagesIcs_parameters> value)
{
    m_Parameters = value;
    
}
utility::string_t MessagesIcs::getType() const
{
    return m_Type;
}


void MessagesIcs::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::string_t MessagesIcs::getSummary() const
{
    return m_Summary;
}


void MessagesIcs::setSummary(utility::string_t value)
{
    m_Summary = value;
    
}
std::shared_ptr<MessagesIcs_textParameters> MessagesIcs::getTextParameters() const
{
    return m_TextParameters;
}


void MessagesIcs::setTextParameters(std::shared_ptr<MessagesIcs_textParameters> value)
{
    m_TextParameters = value;
    
}
utility::datetime MessagesIcs::getFirstOccurrence() const
{
    return m_FirstOccurrence;
}


void MessagesIcs::setFirstOccurrence(utility::datetime value)
{
    m_FirstOccurrence = value;
    
}
utility::datetime MessagesIcs::getLastOccurrence() const
{
    return m_LastOccurrence;
}


void MessagesIcs::setLastOccurrence(utility::datetime value)
{
    m_LastOccurrence = value;
    
}
int32_t MessagesIcs::getRecipientsCount() const
{
    return m_RecipientsCount;
}


void MessagesIcs::setRecipientsCount(int32_t value)
{
    m_RecipientsCount = value;
    
}
utility::string_t MessagesIcs::getTimezone() const
{
    return m_Timezone;
}


void MessagesIcs::setTimezone(utility::string_t value)
{
    m_Timezone = value;
    
}
bool MessagesIcs::isCompleted() const
{
    return m_Completed;
}


void MessagesIcs::setCompleted(bool value)
{
    m_Completed = value;
    
}
utility::string_t MessagesIcs::getAvatar() const
{
    return m_Avatar;
}


void MessagesIcs::setAvatar(utility::string_t value)
{
    m_Avatar = value;
    
}
utility::datetime MessagesIcs::getCreatedAt() const
{
    return m_CreatedAt;
}


void MessagesIcs::setCreatedAt(utility::datetime value)
{
    m_CreatedAt = value;
    
}
}
}
}
}

