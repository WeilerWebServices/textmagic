/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetBalanceNotificationOptionsResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetBalanceNotificationOptionsResponse::GetBalanceNotificationOptionsResponse()
{
    m_1 = utility::conversions::to_string_t("");
    m_2 = utility::conversions::to_string_t("");
    m_3 = utility::conversions::to_string_t("");
    m_5 = utility::conversions::to_string_t("");
    m_10 = utility::conversions::to_string_t("");
    m_20 = utility::conversions::to_string_t("");
    m_30 = utility::conversions::to_string_t("");
    m_50 = utility::conversions::to_string_t("");
    m_100 = utility::conversions::to_string_t("");
    m_500 = utility::conversions::to_string_t("");
    m_1000 = utility::conversions::to_string_t("");
}

GetBalanceNotificationOptionsResponse::~GetBalanceNotificationOptionsResponse()
{
}

void GetBalanceNotificationOptionsResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetBalanceNotificationOptionsResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("1")] = ModelBase::toJson(m_1);
    val[utility::conversions::to_string_t("2")] = ModelBase::toJson(m_2);
    val[utility::conversions::to_string_t("3")] = ModelBase::toJson(m_3);
    val[utility::conversions::to_string_t("5")] = ModelBase::toJson(m_5);
    val[utility::conversions::to_string_t("10")] = ModelBase::toJson(m_10);
    val[utility::conversions::to_string_t("20")] = ModelBase::toJson(m_20);
    val[utility::conversions::to_string_t("30")] = ModelBase::toJson(m_30);
    val[utility::conversions::to_string_t("50")] = ModelBase::toJson(m_50);
    val[utility::conversions::to_string_t("100")] = ModelBase::toJson(m_100);
    val[utility::conversions::to_string_t("500")] = ModelBase::toJson(m_500);
    val[utility::conversions::to_string_t("1000")] = ModelBase::toJson(m_1000);

    return val;
}

void GetBalanceNotificationOptionsResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("1")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("1")];
        if(!fieldValue.is_null())
        {
            set1(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("2")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("2")];
        if(!fieldValue.is_null())
        {
            set2(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("3")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("3")];
        if(!fieldValue.is_null())
        {
            set3(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("5")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("5")];
        if(!fieldValue.is_null())
        {
            set5(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("10")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("10")];
        if(!fieldValue.is_null())
        {
            set10(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("20")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("20")];
        if(!fieldValue.is_null())
        {
            set20(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("30")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("30")];
        if(!fieldValue.is_null())
        {
            set30(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("50")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("50")];
        if(!fieldValue.is_null())
        {
            set50(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("100")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("100")];
        if(!fieldValue.is_null())
        {
            set100(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("500")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("500")];
        if(!fieldValue.is_null())
        {
            set500(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("1000")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("1000")];
        if(!fieldValue.is_null())
        {
            set1000(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void GetBalanceNotificationOptionsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("1"), m_1));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("2"), m_2));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("3"), m_3));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("5"), m_5));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("10"), m_10));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("20"), m_20));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("30"), m_30));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("50"), m_50));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("100"), m_100));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("500"), m_500));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("1000"), m_1000));
}

void GetBalanceNotificationOptionsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    set1(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("1"))));
    set2(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("2"))));
    set3(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("3"))));
    set5(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("5"))));
    set10(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("10"))));
    set20(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("20"))));
    set30(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("30"))));
    set50(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("50"))));
    set100(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("100"))));
    set500(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("500"))));
    set1000(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("1000"))));
}

utility::string_t GetBalanceNotificationOptionsResponse::get1() const
{
    return m_1;
}


void GetBalanceNotificationOptionsResponse::set1(utility::string_t value)
{
    m_1 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get2() const
{
    return m_2;
}


void GetBalanceNotificationOptionsResponse::set2(utility::string_t value)
{
    m_2 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get3() const
{
    return m_3;
}


void GetBalanceNotificationOptionsResponse::set3(utility::string_t value)
{
    m_3 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get5() const
{
    return m_5;
}


void GetBalanceNotificationOptionsResponse::set5(utility::string_t value)
{
    m_5 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get10() const
{
    return m_10;
}


void GetBalanceNotificationOptionsResponse::set10(utility::string_t value)
{
    m_10 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get20() const
{
    return m_20;
}


void GetBalanceNotificationOptionsResponse::set20(utility::string_t value)
{
    m_20 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get30() const
{
    return m_30;
}


void GetBalanceNotificationOptionsResponse::set30(utility::string_t value)
{
    m_30 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get50() const
{
    return m_50;
}


void GetBalanceNotificationOptionsResponse::set50(utility::string_t value)
{
    m_50 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get100() const
{
    return m_100;
}


void GetBalanceNotificationOptionsResponse::set100(utility::string_t value)
{
    m_100 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get500() const
{
    return m_500;
}


void GetBalanceNotificationOptionsResponse::set500(utility::string_t value)
{
    m_500 = value;
    
}
utility::string_t GetBalanceNotificationOptionsResponse::get1000() const
{
    return m_1000;
}


void GetBalanceNotificationOptionsResponse::set1000(utility::string_t value)
{
    m_1000 = value;
    
}
}
}
}
}

