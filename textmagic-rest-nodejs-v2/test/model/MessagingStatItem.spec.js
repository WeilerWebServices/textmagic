/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MessagingStatItem', function() {
      beforeEach(function() {
        instance = new TextmagicClient.MessagingStatItem();
      });

      it('should create an instance of MessagingStatItem', function() {
        // TODO: update the code to test MessagingStatItem
        expect(instance).to.be.a(TextmagicClient.MessagingStatItem);
      });

      it('should have the property replyRate (base name: "replyRate")', function() {
        // TODO: update the code to test the property replyRate
        expect(instance).to.have.property('replyRate');
        // expect(instance.replyRate).to.be(expectedValueLiteral);
      });

      it('should have the property _date (base name: "date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryRate (base name: "deliveryRate")', function() {
        // TODO: update the code to test the property deliveryRate
        expect(instance).to.have.property('deliveryRate');
        // expect(instance.deliveryRate).to.be(expectedValueLiteral);
      });

      it('should have the property costs (base name: "costs")', function() {
        // TODO: update the code to test the property costs
        expect(instance).to.have.property('costs');
        // expect(instance.costs).to.be(expectedValueLiteral);
      });

      it('should have the property messagesReceived (base name: "messagesReceived")', function() {
        // TODO: update the code to test the property messagesReceived
        expect(instance).to.have.property('messagesReceived');
        // expect(instance.messagesReceived).to.be(expectedValueLiteral);
      });

      it('should have the property messagesSentDelivered (base name: "messagesSentDelivered")', function() {
        // TODO: update the code to test the property messagesSentDelivered
        expect(instance).to.have.property('messagesSentDelivered');
        // expect(instance.messagesSentDelivered).to.be(expectedValueLiteral);
      });

      it('should have the property messagesSentAccepted (base name: "messagesSentAccepted")', function() {
        // TODO: update the code to test the property messagesSentAccepted
        expect(instance).to.have.property('messagesSentAccepted');
        // expect(instance.messagesSentAccepted).to.be(expectedValueLiteral);
      });

      it('should have the property messagesSentBuffered (base name: "messagesSentBuffered")', function() {
        // TODO: update the code to test the property messagesSentBuffered
        expect(instance).to.have.property('messagesSentBuffered');
        // expect(instance.messagesSentBuffered).to.be(expectedValueLiteral);
      });

      it('should have the property messagesSentFailed (base name: "messagesSentFailed")', function() {
        // TODO: update the code to test the property messagesSentFailed
        expect(instance).to.have.property('messagesSentFailed');
        // expect(instance.messagesSentFailed).to.be(expectedValueLiteral);
      });

      it('should have the property messagesSentRejected (base name: "messagesSentRejected")', function() {
        // TODO: update the code to test the property messagesSentRejected
        expect(instance).to.have.property('messagesSentRejected');
        // expect(instance.messagesSentRejected).to.be(expectedValueLiteral);
      });

      it('should have the property messagesSentParts (base name: "messagesSentParts")', function() {
        // TODO: update the code to test the property messagesSentParts
        expect(instance).to.have.property('messagesSentParts');
        // expect(instance.messagesSentParts).to.be(expectedValueLiteral);
      });

    });
  });

}));
