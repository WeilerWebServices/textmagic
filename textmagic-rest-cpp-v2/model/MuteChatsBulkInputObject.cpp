/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MuteChatsBulkInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

MuteChatsBulkInputObject::MuteChatsBulkInputObject()
{
    m_Ids = utility::conversions::to_string_t("");
    m_IdsIsSet = false;
    m_All = false;
    m_AllIsSet = false;
    m__for = 0;
    m__forIsSet = false;
}

MuteChatsBulkInputObject::~MuteChatsBulkInputObject()
{
}

void MuteChatsBulkInputObject::validate()
{
    // TODO: implement validation
}

web::json::value MuteChatsBulkInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdsIsSet)
    {
        val[utility::conversions::to_string_t("ids")] = ModelBase::toJson(m_Ids);
    }
    if(m_AllIsSet)
    {
        val[utility::conversions::to_string_t("all")] = ModelBase::toJson(m_All);
    }
    if(m__forIsSet)
    {
        val[utility::conversions::to_string_t("for")] = ModelBase::toJson(m__for);
    }

    return val;
}

void MuteChatsBulkInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ids")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ids")];
        if(!fieldValue.is_null())
        {
            setIds(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("all")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("all")];
        if(!fieldValue.is_null())
        {
            setAll(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("for")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("for")];
        if(!fieldValue.is_null())
        {
            setFor(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void MuteChatsBulkInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ids"), m_Ids));
        
    }
    if(m_AllIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("all"), m_All));
    }
    if(m__forIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("for"), m__for));
    }
}

void MuteChatsBulkInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ids")))
    {
        setIds(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ids"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("all")))
    {
        setAll(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("all"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("for")))
    {
        setFor(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("for"))));
    }
}

utility::string_t MuteChatsBulkInputObject::getIds() const
{
    return m_Ids;
}


void MuteChatsBulkInputObject::setIds(utility::string_t value)
{
    m_Ids = value;
    m_IdsIsSet = true;
}
bool MuteChatsBulkInputObject::idsIsSet() const
{
    return m_IdsIsSet;
}

void MuteChatsBulkInputObject::unsetIds()
{
    m_IdsIsSet = false;
}

bool MuteChatsBulkInputObject::isAll() const
{
    return m_All;
}


void MuteChatsBulkInputObject::setAll(bool value)
{
    m_All = value;
    m_AllIsSet = true;
}
bool MuteChatsBulkInputObject::allIsSet() const
{
    return m_AllIsSet;
}

void MuteChatsBulkInputObject::unsetAll()
{
    m_AllIsSet = false;
}

int32_t MuteChatsBulkInputObject::getFor() const
{
    return m__for;
}


void MuteChatsBulkInputObject::setFor(int32_t value)
{
    m__for = value;
    m__forIsSet = true;
}
bool MuteChatsBulkInputObject::forIsSet() const
{
    return m__forIsSet;
}

void MuteChatsBulkInputObject::unset_for()
{
    m__forIsSet = false;
}

}
}
}
}

