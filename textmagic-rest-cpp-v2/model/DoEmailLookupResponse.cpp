/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DoEmailLookupResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

DoEmailLookupResponse::DoEmailLookupResponse()
{
    m_Address = utility::conversions::to_string_t("");
    m_Status = utility::conversions::to_string_t("");
    m_Deliverability = utility::conversions::to_string_t("");
    m_Reason = utility::conversions::to_string_t("");
    m_Risk = utility::conversions::to_string_t("");
    m_AddressType = utility::conversions::to_string_t("");
    m_IsDisposableAddress = false;
    m_Suggestion = utility::conversions::to_string_t("");
    m_EmailRole = utility::conversions::to_string_t("");
    m_LocalPart = utility::conversions::to_string_t("");
    m_DomainPart = utility::conversions::to_string_t("");
    m_Exchange = utility::conversions::to_string_t("");
    m_Preference = 0;
    m_IsInWhiteList = false;
    m_IsInBlackList = false;
    m_HasMx = false;
    m_HasAa = false;
    m_HasAaaa = false;
}

DoEmailLookupResponse::~DoEmailLookupResponse()
{
}

void DoEmailLookupResponse::validate()
{
    // TODO: implement validation
}

web::json::value DoEmailLookupResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("address")] = ModelBase::toJson(m_Address);
    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("deliverability")] = ModelBase::toJson(m_Deliverability);
    val[utility::conversions::to_string_t("reason")] = ModelBase::toJson(m_Reason);
    val[utility::conversions::to_string_t("risk")] = ModelBase::toJson(m_Risk);
    val[utility::conversions::to_string_t("addressType")] = ModelBase::toJson(m_AddressType);
    val[utility::conversions::to_string_t("isDisposableAddress")] = ModelBase::toJson(m_IsDisposableAddress);
    val[utility::conversions::to_string_t("suggestion")] = ModelBase::toJson(m_Suggestion);
    val[utility::conversions::to_string_t("emailRole")] = ModelBase::toJson(m_EmailRole);
    val[utility::conversions::to_string_t("localPart")] = ModelBase::toJson(m_LocalPart);
    val[utility::conversions::to_string_t("domainPart")] = ModelBase::toJson(m_DomainPart);
    val[utility::conversions::to_string_t("exchange")] = ModelBase::toJson(m_Exchange);
    val[utility::conversions::to_string_t("preference")] = ModelBase::toJson(m_Preference);
    val[utility::conversions::to_string_t("isInWhiteList")] = ModelBase::toJson(m_IsInWhiteList);
    val[utility::conversions::to_string_t("isInBlackList")] = ModelBase::toJson(m_IsInBlackList);
    val[utility::conversions::to_string_t("hasMx")] = ModelBase::toJson(m_HasMx);
    val[utility::conversions::to_string_t("hasAa")] = ModelBase::toJson(m_HasAa);
    val[utility::conversions::to_string_t("hasAaaa")] = ModelBase::toJson(m_HasAaaa);

    return val;
}

void DoEmailLookupResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("address")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("address")];
        if(!fieldValue.is_null())
        {
            setAddress(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deliverability")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("deliverability")];
        if(!fieldValue.is_null())
        {
            setDeliverability(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reason")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("reason")];
        if(!fieldValue.is_null())
        {
            setReason(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("risk")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("risk")];
        if(!fieldValue.is_null())
        {
            setRisk(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addressType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("addressType")];
        if(!fieldValue.is_null())
        {
            setAddressType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isDisposableAddress")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("isDisposableAddress")];
        if(!fieldValue.is_null())
        {
            setIsDisposableAddress(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("suggestion")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("suggestion")];
        if(!fieldValue.is_null())
        {
            setSuggestion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailRole")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("emailRole")];
        if(!fieldValue.is_null())
        {
            setEmailRole(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localPart")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("localPart")];
        if(!fieldValue.is_null())
        {
            setLocalPart(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("domainPart")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("domainPart")];
        if(!fieldValue.is_null())
        {
            setDomainPart(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exchange")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exchange")];
        if(!fieldValue.is_null())
        {
            setExchange(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("preference")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("preference")];
        if(!fieldValue.is_null())
        {
            setPreference(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isInWhiteList")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("isInWhiteList")];
        if(!fieldValue.is_null())
        {
            setIsInWhiteList(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isInBlackList")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("isInBlackList")];
        if(!fieldValue.is_null())
        {
            setIsInBlackList(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasMx")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("hasMx")];
        if(!fieldValue.is_null())
        {
            setHasMx(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasAa")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("hasAa")];
        if(!fieldValue.is_null())
        {
            setHasAa(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasAaaa")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("hasAaaa")];
        if(!fieldValue.is_null())
        {
            setHasAaaa(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void DoEmailLookupResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("address"), m_Address));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deliverability"), m_Deliverability));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reason"), m_Reason));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("risk"), m_Risk));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addressType"), m_AddressType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isDisposableAddress"), m_IsDisposableAddress));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suggestion"), m_Suggestion));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailRole"), m_EmailRole));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localPart"), m_LocalPart));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("domainPart"), m_DomainPart));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exchange"), m_Exchange));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("preference"), m_Preference));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isInWhiteList"), m_IsInWhiteList));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isInBlackList"), m_IsInBlackList));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasMx"), m_HasMx));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasAa"), m_HasAa));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasAaaa"), m_HasAaaa));
}

void DoEmailLookupResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setAddress(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("address"))));
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setDeliverability(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("deliverability"))));
    setReason(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("reason"))));
    setRisk(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("risk"))));
    setAddressType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("addressType"))));
    setIsDisposableAddress(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isDisposableAddress"))));
    setSuggestion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("suggestion"))));
    setEmailRole(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailRole"))));
    setLocalPart(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("localPart"))));
    setDomainPart(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("domainPart"))));
    setExchange(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exchange"))));
    setPreference(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("preference"))));
    setIsInWhiteList(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isInWhiteList"))));
    setIsInBlackList(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isInBlackList"))));
    setHasMx(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasMx"))));
    setHasAa(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasAa"))));
    setHasAaaa(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasAaaa"))));
}

utility::string_t DoEmailLookupResponse::getAddress() const
{
    return m_Address;
}


void DoEmailLookupResponse::setAddress(utility::string_t value)
{
    m_Address = value;
    
}
utility::string_t DoEmailLookupResponse::getStatus() const
{
    return m_Status;
}


void DoEmailLookupResponse::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
utility::string_t DoEmailLookupResponse::getDeliverability() const
{
    return m_Deliverability;
}


void DoEmailLookupResponse::setDeliverability(utility::string_t value)
{
    m_Deliverability = value;
    
}
utility::string_t DoEmailLookupResponse::getReason() const
{
    return m_Reason;
}


void DoEmailLookupResponse::setReason(utility::string_t value)
{
    m_Reason = value;
    
}
utility::string_t DoEmailLookupResponse::getRisk() const
{
    return m_Risk;
}


void DoEmailLookupResponse::setRisk(utility::string_t value)
{
    m_Risk = value;
    
}
utility::string_t DoEmailLookupResponse::getAddressType() const
{
    return m_AddressType;
}


void DoEmailLookupResponse::setAddressType(utility::string_t value)
{
    m_AddressType = value;
    
}
bool DoEmailLookupResponse::isIsDisposableAddress() const
{
    return m_IsDisposableAddress;
}


void DoEmailLookupResponse::setIsDisposableAddress(bool value)
{
    m_IsDisposableAddress = value;
    
}
utility::string_t DoEmailLookupResponse::getSuggestion() const
{
    return m_Suggestion;
}


void DoEmailLookupResponse::setSuggestion(utility::string_t value)
{
    m_Suggestion = value;
    
}
utility::string_t DoEmailLookupResponse::getEmailRole() const
{
    return m_EmailRole;
}


void DoEmailLookupResponse::setEmailRole(utility::string_t value)
{
    m_EmailRole = value;
    
}
utility::string_t DoEmailLookupResponse::getLocalPart() const
{
    return m_LocalPart;
}


void DoEmailLookupResponse::setLocalPart(utility::string_t value)
{
    m_LocalPart = value;
    
}
utility::string_t DoEmailLookupResponse::getDomainPart() const
{
    return m_DomainPart;
}


void DoEmailLookupResponse::setDomainPart(utility::string_t value)
{
    m_DomainPart = value;
    
}
utility::string_t DoEmailLookupResponse::getExchange() const
{
    return m_Exchange;
}


void DoEmailLookupResponse::setExchange(utility::string_t value)
{
    m_Exchange = value;
    
}
int32_t DoEmailLookupResponse::getPreference() const
{
    return m_Preference;
}


void DoEmailLookupResponse::setPreference(int32_t value)
{
    m_Preference = value;
    
}
bool DoEmailLookupResponse::isIsInWhiteList() const
{
    return m_IsInWhiteList;
}


void DoEmailLookupResponse::setIsInWhiteList(bool value)
{
    m_IsInWhiteList = value;
    
}
bool DoEmailLookupResponse::isIsInBlackList() const
{
    return m_IsInBlackList;
}


void DoEmailLookupResponse::setIsInBlackList(bool value)
{
    m_IsInBlackList = value;
    
}
bool DoEmailLookupResponse::isHasMx() const
{
    return m_HasMx;
}


void DoEmailLookupResponse::setHasMx(bool value)
{
    m_HasMx = value;
    
}
bool DoEmailLookupResponse::isHasAa() const
{
    return m_HasAa;
}


void DoEmailLookupResponse::setHasAa(bool value)
{
    m_HasAa = value;
    
}
bool DoEmailLookupResponse::isHasAaaa() const
{
    return m_HasAaaa;
}


void DoEmailLookupResponse::setHasAaaa(bool value)
{
    m_HasAaaa = value;
    
}
}
}
}
}

