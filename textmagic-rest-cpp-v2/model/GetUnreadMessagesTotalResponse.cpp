/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetUnreadMessagesTotalResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetUnreadMessagesTotalResponse::GetUnreadMessagesTotalResponse()
{
    m_Total = 0;
}

GetUnreadMessagesTotalResponse::~GetUnreadMessagesTotalResponse()
{
}

void GetUnreadMessagesTotalResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetUnreadMessagesTotalResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("total")] = ModelBase::toJson(m_Total);

    return val;
}

void GetUnreadMessagesTotalResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("total")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("total")];
        if(!fieldValue.is_null())
        {
            setTotal(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void GetUnreadMessagesTotalResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total"), m_Total));
}

void GetUnreadMessagesTotalResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setTotal(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("total"))));
}

int32_t GetUnreadMessagesTotalResponse::getTotal() const
{
    return m_Total;
}


void GetUnreadMessagesTotalResponse::setTotal(int32_t value)
{
    m_Total = value;
    
}
}
}
}
}

