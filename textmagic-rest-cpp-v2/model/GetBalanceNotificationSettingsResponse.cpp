/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetBalanceNotificationSettingsResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetBalanceNotificationSettingsResponse::GetBalanceNotificationSettingsResponse()
{
    m_LowBalanceNotification = false;
    m_AlertBalance = utility::conversions::to_string_t("");
    m_AlertPhone = utility::conversions::to_string_t("");
    m_AlertEmail1 = utility::conversions::to_string_t("");
    m_AlertEmail2 = utility::conversions::to_string_t("");
    m_AlertEmail3 = utility::conversions::to_string_t("");
}

GetBalanceNotificationSettingsResponse::~GetBalanceNotificationSettingsResponse()
{
}

void GetBalanceNotificationSettingsResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetBalanceNotificationSettingsResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("lowBalanceNotification")] = ModelBase::toJson(m_LowBalanceNotification);
    val[utility::conversions::to_string_t("alertBalance")] = ModelBase::toJson(m_AlertBalance);
    val[utility::conversions::to_string_t("alertPhone")] = ModelBase::toJson(m_AlertPhone);
    val[utility::conversions::to_string_t("alertEmail1")] = ModelBase::toJson(m_AlertEmail1);
    val[utility::conversions::to_string_t("alertEmail2")] = ModelBase::toJson(m_AlertEmail2);
    val[utility::conversions::to_string_t("alertEmail3")] = ModelBase::toJson(m_AlertEmail3);

    return val;
}

void GetBalanceNotificationSettingsResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("lowBalanceNotification")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lowBalanceNotification")];
        if(!fieldValue.is_null())
        {
            setLowBalanceNotification(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertBalance")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertBalance")];
        if(!fieldValue.is_null())
        {
            setAlertBalance(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertPhone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertPhone")];
        if(!fieldValue.is_null())
        {
            setAlertPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertEmail1")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertEmail1")];
        if(!fieldValue.is_null())
        {
            setAlertEmail1(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertEmail2")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertEmail2")];
        if(!fieldValue.is_null())
        {
            setAlertEmail2(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alertEmail3")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("alertEmail3")];
        if(!fieldValue.is_null())
        {
            setAlertEmail3(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void GetBalanceNotificationSettingsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lowBalanceNotification"), m_LowBalanceNotification));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertBalance"), m_AlertBalance));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertPhone"), m_AlertPhone));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertEmail1"), m_AlertEmail1));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertEmail2"), m_AlertEmail2));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alertEmail3"), m_AlertEmail3));
}

void GetBalanceNotificationSettingsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setLowBalanceNotification(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lowBalanceNotification"))));
    setAlertBalance(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertBalance"))));
    setAlertPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertPhone"))));
    setAlertEmail1(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertEmail1"))));
    setAlertEmail2(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertEmail2"))));
    setAlertEmail3(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alertEmail3"))));
}

bool GetBalanceNotificationSettingsResponse::isLowBalanceNotification() const
{
    return m_LowBalanceNotification;
}


void GetBalanceNotificationSettingsResponse::setLowBalanceNotification(bool value)
{
    m_LowBalanceNotification = value;
    
}
utility::string_t GetBalanceNotificationSettingsResponse::getAlertBalance() const
{
    return m_AlertBalance;
}


void GetBalanceNotificationSettingsResponse::setAlertBalance(utility::string_t value)
{
    m_AlertBalance = value;
    
}
utility::string_t GetBalanceNotificationSettingsResponse::getAlertPhone() const
{
    return m_AlertPhone;
}


void GetBalanceNotificationSettingsResponse::setAlertPhone(utility::string_t value)
{
    m_AlertPhone = value;
    
}
utility::string_t GetBalanceNotificationSettingsResponse::getAlertEmail1() const
{
    return m_AlertEmail1;
}


void GetBalanceNotificationSettingsResponse::setAlertEmail1(utility::string_t value)
{
    m_AlertEmail1 = value;
    
}
utility::string_t GetBalanceNotificationSettingsResponse::getAlertEmail2() const
{
    return m_AlertEmail2;
}


void GetBalanceNotificationSettingsResponse::setAlertEmail2(utility::string_t value)
{
    m_AlertEmail2 = value;
    
}
utility::string_t GetBalanceNotificationSettingsResponse::getAlertEmail3() const
{
    return m_AlertEmail3;
}


void GetBalanceNotificationSettingsResponse::setAlertEmail3(utility::string_t value)
{
    m_AlertEmail3 = value;
    
}
}
}
}
}

