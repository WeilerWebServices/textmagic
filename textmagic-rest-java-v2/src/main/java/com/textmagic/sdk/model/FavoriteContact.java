/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * FavoriteContact
 */

public class FavoriteContact {
  @SerializedName("entityId")
  private Integer entityId = null;

  /**
   * Entity type which should be marked as **favorite**.
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    LIST("list"),
    
    CONTACT("contact");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String text) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EntityTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("entityType")
  private EntityTypeEnum entityType = null;

  @SerializedName("primaryLabel")
  private String primaryLabel = null;

  @SerializedName("secondaryLabel")
  private String secondaryLabel = null;

  @SerializedName("tertiaryLabel")
  private String tertiaryLabel = null;

  @SerializedName("avatar")
  private String avatar = null;

  public FavoriteContact entityId(Integer entityId) {
    this.entityId = entityId;
    return this;
  }

   /**
   * List or Contact ID.
   * @return entityId
  **/
  @ApiModelProperty(example = "629", required = true, value = "List or Contact ID.")
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(Integer entityId) {
    this.entityId = entityId;
  }

  public FavoriteContact entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Entity type which should be marked as **favorite**.
   * @return entityType
  **/
  @ApiModelProperty(example = "contact", required = true, value = "Entity type which should be marked as **favorite**.")
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }

  public FavoriteContact primaryLabel(String primaryLabel) {
    this.primaryLabel = primaryLabel;
    return this;
  }

   /**
   * Contact first name/last name if entityType is **contact**; List name if entity type is **list**.
   * @return primaryLabel
  **/
  @ApiModelProperty(example = "Favorite contact name.", required = true, value = "Contact first name/last name if entityType is **contact**; List name if entity type is **list**.")
  public String getPrimaryLabel() {
    return primaryLabel;
  }

  public void setPrimaryLabel(String primaryLabel) {
    this.primaryLabel = primaryLabel;
  }

  public FavoriteContact secondaryLabel(String secondaryLabel) {
    this.secondaryLabel = secondaryLabel;
    return this;
  }

   /**
   * Phone number if entityType is **contact**; List contacts number if entity type is **list**.
   * @return secondaryLabel
  **/
  @ApiModelProperty(example = "45", required = true, value = "Phone number if entityType is **contact**; List contacts number if entity type is **list**.")
  public String getSecondaryLabel() {
    return secondaryLabel;
  }

  public void setSecondaryLabel(String secondaryLabel) {
    this.secondaryLabel = secondaryLabel;
  }

  public FavoriteContact tertiaryLabel(String tertiaryLabel) {
    this.tertiaryLabel = tertiaryLabel;
    return this;
  }

   /**
   * Contact country if entityType is **contact**; else, null.
   * @return tertiaryLabel
  **/
  @ApiModelProperty(example = "Australia", required = true, value = "Contact country if entityType is **contact**; else, null.")
  public String getTertiaryLabel() {
    return tertiaryLabel;
  }

  public void setTertiaryLabel(String tertiaryLabel) {
    this.tertiaryLabel = tertiaryLabel;
  }

  public FavoriteContact avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @ApiModelProperty(example = "avatars/dummy_avatar.png", required = true, value = "")
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FavoriteContact favoriteContact = (FavoriteContact) o;
    return Objects.equals(this.entityId, favoriteContact.entityId) &&
        Objects.equals(this.entityType, favoriteContact.entityType) &&
        Objects.equals(this.primaryLabel, favoriteContact.primaryLabel) &&
        Objects.equals(this.secondaryLabel, favoriteContact.secondaryLabel) &&
        Objects.equals(this.tertiaryLabel, favoriteContact.tertiaryLabel) &&
        Objects.equals(this.avatar, favoriteContact.avatar);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, entityType, primaryLabel, secondaryLabel, tertiaryLabel, avatar);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FavoriteContact {\n");
    
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    primaryLabel: ").append(toIndentedString(primaryLabel)).append("\n");
    sb.append("    secondaryLabel: ").append(toIndentedString(secondaryLabel)).append("\n");
    sb.append("    tertiaryLabel: ").append(toIndentedString(tertiaryLabel)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

