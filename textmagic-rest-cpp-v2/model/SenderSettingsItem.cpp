/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SenderSettingsItem.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

SenderSettingsItem::SenderSettingsItem()
{
    m_Country = utility::conversions::to_string_t("");
    m_Phone = utility::conversions::to_string_t("");
}

SenderSettingsItem::~SenderSettingsItem()
{
}

void SenderSettingsItem::validate()
{
    // TODO: implement validation
}

web::json::value SenderSettingsItem::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);

    return val;
}

void SenderSettingsItem::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country")];
        if(!fieldValue.is_null())
        {
            setCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phone")];
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void SenderSettingsItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
}

void SenderSettingsItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("country"))));
    setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
}

utility::string_t SenderSettingsItem::getCountry() const
{
    return m_Country;
}


void SenderSettingsItem::setCountry(utility::string_t value)
{
    m_Country = value;
    
}
utility::string_t SenderSettingsItem::getPhone() const
{
    return m_Phone;
}


void SenderSettingsItem::setPhone(utility::string_t value)
{
    m_Phone = value;
    
}
}
}
}
}

