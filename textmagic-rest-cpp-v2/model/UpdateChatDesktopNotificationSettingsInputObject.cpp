/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UpdateChatDesktopNotificationSettingsInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

UpdateChatDesktopNotificationSettingsInputObject::UpdateChatDesktopNotificationSettingsInputObject()
{
    m_PlaySound = false;
    m_PlaySoundIsSet = false;
    m_ShowNotifications = false;
    m_ShowNotificationsIsSet = false;
    m_ShowText = false;
    m_ShowTextIsSet = false;
    m_SoundId = 0;
    m_SoundIdIsSet = false;
}

UpdateChatDesktopNotificationSettingsInputObject::~UpdateChatDesktopNotificationSettingsInputObject()
{
}

void UpdateChatDesktopNotificationSettingsInputObject::validate()
{
    // TODO: implement validation
}

web::json::value UpdateChatDesktopNotificationSettingsInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PlaySoundIsSet)
    {
        val[utility::conversions::to_string_t("playSound")] = ModelBase::toJson(m_PlaySound);
    }
    if(m_ShowNotificationsIsSet)
    {
        val[utility::conversions::to_string_t("showNotifications")] = ModelBase::toJson(m_ShowNotifications);
    }
    if(m_ShowTextIsSet)
    {
        val[utility::conversions::to_string_t("showText")] = ModelBase::toJson(m_ShowText);
    }
    if(m_SoundIdIsSet)
    {
        val[utility::conversions::to_string_t("soundId")] = ModelBase::toJson(m_SoundId);
    }

    return val;
}

void UpdateChatDesktopNotificationSettingsInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("playSound")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("playSound")];
        if(!fieldValue.is_null())
        {
            setPlaySound(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("showNotifications")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("showNotifications")];
        if(!fieldValue.is_null())
        {
            setShowNotifications(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("showText")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("showText")];
        if(!fieldValue.is_null())
        {
            setShowText(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("soundId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("soundId")];
        if(!fieldValue.is_null())
        {
            setSoundId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void UpdateChatDesktopNotificationSettingsInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PlaySoundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("playSound"), m_PlaySound));
    }
    if(m_ShowNotificationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("showNotifications"), m_ShowNotifications));
    }
    if(m_ShowTextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("showText"), m_ShowText));
    }
    if(m_SoundIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("soundId"), m_SoundId));
    }
}

void UpdateChatDesktopNotificationSettingsInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("playSound")))
    {
        setPlaySound(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("playSound"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("showNotifications")))
    {
        setShowNotifications(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("showNotifications"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("showText")))
    {
        setShowText(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("showText"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("soundId")))
    {
        setSoundId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("soundId"))));
    }
}

bool UpdateChatDesktopNotificationSettingsInputObject::isPlaySound() const
{
    return m_PlaySound;
}


void UpdateChatDesktopNotificationSettingsInputObject::setPlaySound(bool value)
{
    m_PlaySound = value;
    m_PlaySoundIsSet = true;
}
bool UpdateChatDesktopNotificationSettingsInputObject::playSoundIsSet() const
{
    return m_PlaySoundIsSet;
}

void UpdateChatDesktopNotificationSettingsInputObject::unsetPlaySound()
{
    m_PlaySoundIsSet = false;
}

bool UpdateChatDesktopNotificationSettingsInputObject::isShowNotifications() const
{
    return m_ShowNotifications;
}


void UpdateChatDesktopNotificationSettingsInputObject::setShowNotifications(bool value)
{
    m_ShowNotifications = value;
    m_ShowNotificationsIsSet = true;
}
bool UpdateChatDesktopNotificationSettingsInputObject::showNotificationsIsSet() const
{
    return m_ShowNotificationsIsSet;
}

void UpdateChatDesktopNotificationSettingsInputObject::unsetShowNotifications()
{
    m_ShowNotificationsIsSet = false;
}

bool UpdateChatDesktopNotificationSettingsInputObject::isShowText() const
{
    return m_ShowText;
}


void UpdateChatDesktopNotificationSettingsInputObject::setShowText(bool value)
{
    m_ShowText = value;
    m_ShowTextIsSet = true;
}
bool UpdateChatDesktopNotificationSettingsInputObject::showTextIsSet() const
{
    return m_ShowTextIsSet;
}

void UpdateChatDesktopNotificationSettingsInputObject::unsetShowText()
{
    m_ShowTextIsSet = false;
}

int32_t UpdateChatDesktopNotificationSettingsInputObject::getSoundId() const
{
    return m_SoundId;
}


void UpdateChatDesktopNotificationSettingsInputObject::setSoundId(int32_t value)
{
    m_SoundId = value;
    m_SoundIdIsSet = true;
}
bool UpdateChatDesktopNotificationSettingsInputObject::soundIdIsSet() const
{
    return m_SoundIdIsSet;
}

void UpdateChatDesktopNotificationSettingsInputObject::unsetSoundId()
{
    m_SoundIdIsSet = false;
}

}
}
}
}

