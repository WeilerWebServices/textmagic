/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetContactImportSessionProgressResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetContactImportSessionProgressResponse::GetContactImportSessionProgressResponse()
{
    m_Status = 0;
    m_Processed = 0;
}

GetContactImportSessionProgressResponse::~GetContactImportSessionProgressResponse()
{
}

void GetContactImportSessionProgressResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetContactImportSessionProgressResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("processed")] = ModelBase::toJson(m_Processed);

    return val;
}

void GetContactImportSessionProgressResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("processed")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("processed")];
        if(!fieldValue.is_null())
        {
            setProcessed(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void GetContactImportSessionProgressResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("processed"), m_Processed));
}

void GetContactImportSessionProgressResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setStatus(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setProcessed(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("processed"))));
}

int32_t GetContactImportSessionProgressResponse::getStatus() const
{
    return m_Status;
}


void GetContactImportSessionProgressResponse::setStatus(int32_t value)
{
    m_Status = value;
    
}
int32_t GetContactImportSessionProgressResponse::getProcessed() const
{
    return m_Processed;
}


void GetContactImportSessionProgressResponse::setProcessed(int32_t value)
{
    m_Processed = value;
    
}
}
}
}
}

