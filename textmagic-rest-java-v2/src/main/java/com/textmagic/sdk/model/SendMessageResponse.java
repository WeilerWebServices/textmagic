/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SendMessageResponse
 */

public class SendMessageResponse {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("href")
  private String href = null;

  /**
   * Message response type: * **message** – when the message is sent to a single recipient. * **session** – when the message is sent is to multiple recipients. * **schedule** - when the message is scheduled for sending. * **bulk** - when the message is sent to multiple recipients and the number of recipients requires asynchronous processing See [Sending more than 1,000 messages in one session](https://docs.textmagic.com/#section/Tutorials/Sending-more-than-1000-messages-in-one-session). 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MESSAGE("message"),
    
    SESSION("session"),
    
    SCHEDULE("schedule"),
    
    BULK("bulk");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("sessionId")
  private Integer sessionId = null;

  @SerializedName("bulkId")
  private Integer bulkId = null;

  @SerializedName("messageId")
  private Integer messageId = null;

  @SerializedName("scheduleId")
  private Integer scheduleId = null;

  @SerializedName("chatId")
  private Integer chatId = null;

  public SendMessageResponse id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Message ID.
   * @return id
  **/
  @ApiModelProperty(example = "10489", required = true, value = "Message ID.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public SendMessageResponse href(String href) {
    this.href = href;
    return this;
  }

   /**
   * URI of the message session.
   * @return href
  **/
  @ApiModelProperty(example = "/api/v2/sessions/10489", required = true, value = "URI of the message session.")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public SendMessageResponse type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Message response type: * **message** – when the message is sent to a single recipient. * **session** – when the message is sent is to multiple recipients. * **schedule** - when the message is scheduled for sending. * **bulk** - when the message is sent to multiple recipients and the number of recipients requires asynchronous processing See [Sending more than 1,000 messages in one session](https://docs.textmagic.com/#section/Tutorials/Sending-more-than-1000-messages-in-one-session). 
   * @return type
  **/
  @ApiModelProperty(example = "session", required = true, value = "Message response type: * **message** – when the message is sent to a single recipient. * **session** – when the message is sent is to multiple recipients. * **schedule** - when the message is scheduled for sending. * **bulk** - when the message is sent to multiple recipients and the number of recipients requires asynchronous processing See [Sending more than 1,000 messages in one session](https://docs.textmagic.com/#section/Tutorials/Sending-more-than-1000-messages-in-one-session). ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public SendMessageResponse sessionId(Integer sessionId) {
    this.sessionId = sessionId;
    return this;
  }

   /**
   * Message session ID.
   * @return sessionId
  **/
  @ApiModelProperty(example = "10489", required = true, value = "Message session ID.")
  public Integer getSessionId() {
    return sessionId;
  }

  public void setSessionId(Integer sessionId) {
    this.sessionId = sessionId;
  }

  public SendMessageResponse bulkId(Integer bulkId) {
    this.bulkId = bulkId;
    return this;
  }

   /**
   * Bulk Session ID. See [Sending more than 1,000 messages in one session](https://docs.textmagic.com/#section/Tutorials/Sending-more-than-1000-messages-in-one-session).
   * @return bulkId
  **/
  @ApiModelProperty(required = true, value = "Bulk Session ID. See [Sending more than 1,000 messages in one session](https://docs.textmagic.com/#section/Tutorials/Sending-more-than-1000-messages-in-one-session).")
  public Integer getBulkId() {
    return bulkId;
  }

  public void setBulkId(Integer bulkId) {
    this.bulkId = bulkId;
  }

  public SendMessageResponse messageId(Integer messageId) {
    this.messageId = messageId;
    return this;
  }

   /**
   * Message ID.
   * @return messageId
  **/
  @ApiModelProperty(required = true, value = "Message ID.")
  public Integer getMessageId() {
    return messageId;
  }

  public void setMessageId(Integer messageId) {
    this.messageId = messageId;
  }

  public SendMessageResponse scheduleId(Integer scheduleId) {
    this.scheduleId = scheduleId;
    return this;
  }

   /**
   * Message Schedule ID.
   * @return scheduleId
  **/
  @ApiModelProperty(required = true, value = "Message Schedule ID.")
  public Integer getScheduleId() {
    return scheduleId;
  }

  public void setScheduleId(Integer scheduleId) {
    this.scheduleId = scheduleId;
  }

  public SendMessageResponse chatId(Integer chatId) {
    this.chatId = chatId;
    return this;
  }

   /**
   * Message Chat ID.
   * @return chatId
  **/
  @ApiModelProperty(required = true, value = "Message Chat ID.")
  public Integer getChatId() {
    return chatId;
  }

  public void setChatId(Integer chatId) {
    this.chatId = chatId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMessageResponse sendMessageResponse = (SendMessageResponse) o;
    return Objects.equals(this.id, sendMessageResponse.id) &&
        Objects.equals(this.href, sendMessageResponse.href) &&
        Objects.equals(this.type, sendMessageResponse.type) &&
        Objects.equals(this.sessionId, sendMessageResponse.sessionId) &&
        Objects.equals(this.bulkId, sendMessageResponse.bulkId) &&
        Objects.equals(this.messageId, sendMessageResponse.messageId) &&
        Objects.equals(this.scheduleId, sendMessageResponse.scheduleId) &&
        Objects.equals(this.chatId, sendMessageResponse.chatId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, href, type, sessionId, bulkId, messageId, scheduleId, chatId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMessageResponse {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    bulkId: ").append(toIndentedString(bulkId)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    scheduleId: ").append(toIndentedString(scheduleId)).append("\n");
    sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

