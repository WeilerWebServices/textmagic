/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * MessagesIcsTextParameters
 */

public class MessagesIcsTextParameters {
  @SerializedName("cost")
  private BigDecimal cost = null;

  @SerializedName("parts")
  private Integer parts = null;

  @SerializedName("chars")
  private Integer chars = null;

  /**
   * Message charset. Could be: * **ISO-8859-1** – for plaintext SMS; * **UTF-16BE** – for Unicode SMS. 
   */
  @JsonAdapter(EncodingEnum.Adapter.class)
  public enum EncodingEnum {
    ISO_8859_1("ISO-8859-1"),
    
    UTF_16BE("UTF-16BE");

    private String value;

    EncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingEnum fromValue(String text) {
      for (EncodingEnum b : EncodingEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EncodingEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("encoding")
  private EncodingEnum encoding = null;

  @SerializedName("countries")
  private List<String> countries = new ArrayList<String>();

  @SerializedName("charsetLabel")
  private String charsetLabel = null;

  public MessagesIcsTextParameters cost(BigDecimal cost) {
    this.cost = cost;
    return this;
  }

   /**
   * Cost to check that one number is constant – 0.04 in your account currency.
   * @return cost
  **/
  @ApiModelProperty(example = "0.04", required = true, value = "Cost to check that one number is constant – 0.04 in your account currency.")
  public BigDecimal getCost() {
    return cost;
  }

  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }

  public MessagesIcsTextParameters parts(Integer parts) {
    this.parts = parts;
    return this;
  }

   /**
   * Message parts (multiples of 160 characters) count.
   * @return parts
  **/
  @ApiModelProperty(example = "6", required = true, value = "Message parts (multiples of 160 characters) count.")
  public Integer getParts() {
    return parts;
  }

  public void setParts(Integer parts) {
    this.parts = parts;
  }

  public MessagesIcsTextParameters chars(Integer chars) {
    this.chars = chars;
    return this;
  }

   /**
   * Characters count.
   * @return chars
  **/
  @ApiModelProperty(example = "125", required = true, value = "Characters count.")
  public Integer getChars() {
    return chars;
  }

  public void setChars(Integer chars) {
    this.chars = chars;
  }

  public MessagesIcsTextParameters encoding(EncodingEnum encoding) {
    this.encoding = encoding;
    return this;
  }

   /**
   * Message charset. Could be: * **ISO-8859-1** – for plaintext SMS; * **UTF-16BE** – for Unicode SMS. 
   * @return encoding
  **/
  @ApiModelProperty(example = "ISO-8859-1", required = true, value = "Message charset. Could be: * **ISO-8859-1** – for plaintext SMS; * **UTF-16BE** – for Unicode SMS. ")
  public EncodingEnum getEncoding() {
    return encoding;
  }

  public void setEncoding(EncodingEnum encoding) {
    this.encoding = encoding;
  }

  public MessagesIcsTextParameters countries(List<String> countries) {
    this.countries = countries;
    return this;
  }

  public MessagesIcsTextParameters addCountriesItem(String countriesItem) {
    this.countries.add(countriesItem);
    return this;
  }

   /**
   * Get countries
   * @return countries
  **/
  @ApiModelProperty(required = true, value = "")
  public List<String> getCountries() {
    return countries;
  }

  public void setCountries(List<String> countries) {
    this.countries = countries;
  }

  public MessagesIcsTextParameters charsetLabel(String charsetLabel) {
    this.charsetLabel = charsetLabel;
    return this;
  }

   /**
   * Human-readable message charset label. Could be: *   **ISO-8859-1** for plaintext SMS; *   **UTF-16BE** for Unicode SMS; *   **Voice** for voice services (Text-to-Speech or Voice Broadcast) messages. 
   * @return charsetLabel
  **/
  @ApiModelProperty(example = "ISO-8859-1", required = true, value = "Human-readable message charset label. Could be: *   **ISO-8859-1** for plaintext SMS; *   **UTF-16BE** for Unicode SMS; *   **Voice** for voice services (Text-to-Speech or Voice Broadcast) messages. ")
  public String getCharsetLabel() {
    return charsetLabel;
  }

  public void setCharsetLabel(String charsetLabel) {
    this.charsetLabel = charsetLabel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagesIcsTextParameters messagesIcsTextParameters = (MessagesIcsTextParameters) o;
    return Objects.equals(this.cost, messagesIcsTextParameters.cost) &&
        Objects.equals(this.parts, messagesIcsTextParameters.parts) &&
        Objects.equals(this.chars, messagesIcsTextParameters.chars) &&
        Objects.equals(this.encoding, messagesIcsTextParameters.encoding) &&
        Objects.equals(this.countries, messagesIcsTextParameters.countries) &&
        Objects.equals(this.charsetLabel, messagesIcsTextParameters.charsetLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cost, parts, chars, encoding, countries, charsetLabel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagesIcsTextParameters {\n");
    
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("    chars: ").append(toIndentedString(chars)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    charsetLabel: ").append(toIndentedString(charsetLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

