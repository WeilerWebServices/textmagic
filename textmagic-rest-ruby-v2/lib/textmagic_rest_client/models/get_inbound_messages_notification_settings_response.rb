=begin
#TextMagic API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module TextMagic
  class GetInboundMessagesNotificationSettingsResponse
    # Should user receive notification about new incoming messages.
    attr_accessor :inbound_message_notification

    # Should user receive notification about new forwarded calls.
    attr_accessor :forwarded_call_notification

    # Include SMS history into notification Email.
    attr_accessor :include_sms_history

    # Send Email notification in HTML format.
    attr_accessor :send_in_html_format

    # New message notification email 1.
    attr_accessor :alert_email1

    # New message notification email 2.
    attr_accessor :alert_email2

    # New message notification email 3.
    attr_accessor :alert_email3

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'inbound_message_notification' => :'inboundMessageNotification',
        :'forwarded_call_notification' => :'forwardedCallNotification',
        :'include_sms_history' => :'includeSmsHistory',
        :'send_in_html_format' => :'sendInHtmlFormat',
        :'alert_email1' => :'alertEmail1',
        :'alert_email2' => :'alertEmail2',
        :'alert_email3' => :'alertEmail3'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'inbound_message_notification' => :'BOOLEAN',
        :'forwarded_call_notification' => :'BOOLEAN',
        :'include_sms_history' => :'BOOLEAN',
        :'send_in_html_format' => :'BOOLEAN',
        :'alert_email1' => :'String',
        :'alert_email2' => :'String',
        :'alert_email3' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'inboundMessageNotification')
        self.inbound_message_notification = attributes[:'inboundMessageNotification']
      end

      if attributes.has_key?(:'forwardedCallNotification')
        self.forwarded_call_notification = attributes[:'forwardedCallNotification']
      end

      if attributes.has_key?(:'includeSmsHistory')
        self.include_sms_history = attributes[:'includeSmsHistory']
      end

      if attributes.has_key?(:'sendInHtmlFormat')
        self.send_in_html_format = attributes[:'sendInHtmlFormat']
      end

      if attributes.has_key?(:'alertEmail1')
        self.alert_email1 = attributes[:'alertEmail1']
      end

      if attributes.has_key?(:'alertEmail2')
        self.alert_email2 = attributes[:'alertEmail2']
      end

      if attributes.has_key?(:'alertEmail3')
        self.alert_email3 = attributes[:'alertEmail3']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @inbound_message_notification.nil?
        invalid_properties.push('invalid value for "inbound_message_notification", inbound_message_notification cannot be nil.')
      end

      if @forwarded_call_notification.nil?
        invalid_properties.push('invalid value for "forwarded_call_notification", forwarded_call_notification cannot be nil.')
      end

      if @include_sms_history.nil?
        invalid_properties.push('invalid value for "include_sms_history", include_sms_history cannot be nil.')
      end

      if @send_in_html_format.nil?
        invalid_properties.push('invalid value for "send_in_html_format", send_in_html_format cannot be nil.')
      end

      if @alert_email1.nil?
        invalid_properties.push('invalid value for "alert_email1", alert_email1 cannot be nil.')
      end

      if @alert_email2.nil?
        invalid_properties.push('invalid value for "alert_email2", alert_email2 cannot be nil.')
      end

      if @alert_email3.nil?
        invalid_properties.push('invalid value for "alert_email3", alert_email3 cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @inbound_message_notification.nil?
      return false if @forwarded_call_notification.nil?
      return false if @include_sms_history.nil?
      return false if @send_in_html_format.nil?
      return false if @alert_email1.nil?
      return false if @alert_email2.nil?
      return false if @alert_email3.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          inbound_message_notification == o.inbound_message_notification &&
          forwarded_call_notification == o.forwarded_call_notification &&
          include_sms_history == o.include_sms_history &&
          send_in_html_format == o.send_in_html_format &&
          alert_email1 == o.alert_email1 &&
          alert_email2 == o.alert_email2 &&
          alert_email3 == o.alert_email3
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [inbound_message_notification, forwarded_call_notification, include_sms_history, send_in_html_format, alert_email1, alert_email2, alert_email3].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TextMagic.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
