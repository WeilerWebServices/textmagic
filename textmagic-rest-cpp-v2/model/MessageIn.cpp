/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MessageIn.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

MessageIn::MessageIn()
{
    m_Id = 0;
    m_Sender = utility::conversions::to_string_t("");
    m_Receiver = utility::conversions::to_string_t("");
    m_MessageTime = utility::datetime();
    m_Text = utility::conversions::to_string_t("");
    m_ContactId = 0;
    m_ContactIdIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_Avatar = utility::conversions::to_string_t("");
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
}

MessageIn::~MessageIn()
{
}

void MessageIn::validate()
{
    // TODO: implement validation
}

web::json::value MessageIn::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("sender")] = ModelBase::toJson(m_Sender);
    val[utility::conversions::to_string_t("receiver")] = ModelBase::toJson(m_Receiver);
    val[utility::conversions::to_string_t("messageTime")] = ModelBase::toJson(m_MessageTime);
    val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);
    if(m_ContactIdIsSet)
    {
        val[utility::conversions::to_string_t("contactId")] = ModelBase::toJson(m_ContactId);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    }
    val[utility::conversions::to_string_t("avatar")] = ModelBase::toJson(m_Avatar);
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }

    return val;
}

void MessageIn::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sender")];
        if(!fieldValue.is_null())
        {
            setSender(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("receiver")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("receiver")];
        if(!fieldValue.is_null())
        {
            setReceiver(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messageTime")];
        if(!fieldValue.is_null())
        {
            setMessageTime(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("text")];
        if(!fieldValue.is_null())
        {
            setText(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contactId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contactId")];
        if(!fieldValue.is_null())
        {
            setContactId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avatar")];
        if(!fieldValue.is_null())
        {
            setAvatar(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("email")];
        if(!fieldValue.is_null())
        {
            setEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void MessageIn::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender"), m_Sender));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("receiver"), m_Receiver));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageTime"), m_MessageTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
    if(m_ContactIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contactId"), m_ContactId));
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
        
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar"), m_Avatar));
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
        
    }
}

void MessageIn::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setSender(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender"))));
    setReceiver(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("receiver"))));
    setMessageTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageTime"))));
    setText(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("text"))));
    if(multipart->hasContent(utility::conversions::to_string_t("contactId")))
    {
        setContactId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contactId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    }
    setAvatar(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar"))));
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    }
}

int32_t MessageIn::getId() const
{
    return m_Id;
}


void MessageIn::setId(int32_t value)
{
    m_Id = value;
    
}
utility::string_t MessageIn::getSender() const
{
    return m_Sender;
}


void MessageIn::setSender(utility::string_t value)
{
    m_Sender = value;
    
}
utility::string_t MessageIn::getReceiver() const
{
    return m_Receiver;
}


void MessageIn::setReceiver(utility::string_t value)
{
    m_Receiver = value;
    
}
utility::datetime MessageIn::getMessageTime() const
{
    return m_MessageTime;
}


void MessageIn::setMessageTime(utility::datetime value)
{
    m_MessageTime = value;
    
}
utility::string_t MessageIn::getText() const
{
    return m_Text;
}


void MessageIn::setText(utility::string_t value)
{
    m_Text = value;
    
}
int32_t MessageIn::getContactId() const
{
    return m_ContactId;
}


void MessageIn::setContactId(int32_t value)
{
    m_ContactId = value;
    m_ContactIdIsSet = true;
}
bool MessageIn::contactIdIsSet() const
{
    return m_ContactIdIsSet;
}

void MessageIn::unsetContactId()
{
    m_ContactIdIsSet = false;
}

utility::string_t MessageIn::getFirstName() const
{
    return m_FirstName;
}


void MessageIn::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool MessageIn::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void MessageIn::unsetFirstName()
{
    m_FirstNameIsSet = false;
}

utility::string_t MessageIn::getLastName() const
{
    return m_LastName;
}


void MessageIn::setLastName(utility::string_t value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}
bool MessageIn::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void MessageIn::unsetLastName()
{
    m_LastNameIsSet = false;
}

utility::string_t MessageIn::getAvatar() const
{
    return m_Avatar;
}


void MessageIn::setAvatar(utility::string_t value)
{
    m_Avatar = value;
    
}
utility::string_t MessageIn::getEmail() const
{
    return m_Email;
}


void MessageIn::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool MessageIn::emailIsSet() const
{
    return m_EmailIsSet;
}

void MessageIn::unsetEmail()
{
    m_EmailIsSet = false;
}

}
}
}
}

