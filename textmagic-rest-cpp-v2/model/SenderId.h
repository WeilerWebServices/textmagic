/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SenderId.h
 *
 * 
 */

#ifndef COM_TEXTMAGIC_CLIENT_MODEL_SenderId_H_
#define COM_TEXTMAGIC_CLIENT_MODEL_SenderId_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "User.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SenderId
    : public ModelBase
{
public:
    SenderId();
    virtual ~SenderId();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SenderId members

    /// <summary>
    /// Numeric sender ID.
    /// </summary>
    int32_t getId() const;
        void setId(int32_t value);
    /// <summary>
    /// Format for representation of time.
    /// </summary>
    utility::string_t getDisplayTimeFormat() const;
    bool displayTimeFormatIsSet() const;
    void unsetDisplayTimeFormat();
    void setDisplayTimeFormat(utility::string_t value);
    /// <summary>
    /// Alphanumeric ID.
    /// </summary>
    utility::string_t getSenderId() const;
        void setSenderId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<User> getUser() const;
        void setUser(std::shared_ptr<User> value);
    /// <summary>
    /// *   **P** for Pending - this Sender ID is being reviewed by our support team; *   **R** for Rejected - our support team rejected your application for this Sender ID; *   **A** for Active. 
    /// </summary>
    utility::string_t getStatus() const;
        void setStatus(utility::string_t value);

protected:
    int32_t m_Id;
        utility::string_t m_DisplayTimeFormat;
    bool m_DisplayTimeFormatIsSet;
    utility::string_t m_SenderId;
        std::shared_ptr<User> m_User;
        utility::string_t m_Status;
    };

}
}
}
}

#endif /* COM_TEXTMAGIC_CLIENT_MODEL_SenderId_H_ */
