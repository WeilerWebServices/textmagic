/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SendMessageInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

SendMessageInputObject::SendMessageInputObject()
{
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
    m_TemplateId = 0;
    m_TemplateIdIsSet = false;
    m_SendingTime = 0;
    m_SendingTimeIsSet = false;
    m_SendingDateTime = utility::conversions::to_string_t("");
    m_SendingDateTimeIsSet = false;
    m_SendingTimezone = utility::conversions::to_string_t("");
    m_SendingTimezoneIsSet = false;
    m_Contacts = utility::conversions::to_string_t("");
    m_ContactsIsSet = false;
    m_Lists = utility::conversions::to_string_t("");
    m_ListsIsSet = false;
    m_Phones = utility::conversions::to_string_t("");
    m_PhonesIsSet = false;
    m_CutExtra = false;
    m_CutExtraIsSet = false;
    m_PartsCount = 0;
    m_PartsCountIsSet = false;
    m_ReferenceId = 0;
    m_ReferenceIdIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_Rrule = utility::conversions::to_string_t("");
    m_RruleIsSet = false;
    m_CreateChat = false;
    m_CreateChatIsSet = false;
    m_Tts = false;
    m_TtsIsSet = false;
    m_Local = false;
    m_LocalIsSet = false;
    m_LocalCountry = utility::conversions::to_string_t("");
    m_LocalCountryIsSet = false;
    m_Destination = utility::conversions::to_string_t("");
    m_DestinationIsSet = false;
    m_Resources = utility::conversions::to_string_t("");
    m_ResourcesIsSet = false;
}

SendMessageInputObject::~SendMessageInputObject()
{
}

void SendMessageInputObject::validate()
{
    // TODO: implement validation
}

web::json::value SendMessageInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);
    }
    if(m_TemplateIdIsSet)
    {
        val[utility::conversions::to_string_t("templateId")] = ModelBase::toJson(m_TemplateId);
    }
    if(m_SendingTimeIsSet)
    {
        val[utility::conversions::to_string_t("sendingTime")] = ModelBase::toJson(m_SendingTime);
    }
    if(m_SendingDateTimeIsSet)
    {
        val[utility::conversions::to_string_t("sendingDateTime")] = ModelBase::toJson(m_SendingDateTime);
    }
    if(m_SendingTimezoneIsSet)
    {
        val[utility::conversions::to_string_t("sendingTimezone")] = ModelBase::toJson(m_SendingTimezone);
    }
    if(m_ContactsIsSet)
    {
        val[utility::conversions::to_string_t("contacts")] = ModelBase::toJson(m_Contacts);
    }
    if(m_ListsIsSet)
    {
        val[utility::conversions::to_string_t("lists")] = ModelBase::toJson(m_Lists);
    }
    if(m_PhonesIsSet)
    {
        val[utility::conversions::to_string_t("phones")] = ModelBase::toJson(m_Phones);
    }
    if(m_CutExtraIsSet)
    {
        val[utility::conversions::to_string_t("cutExtra")] = ModelBase::toJson(m_CutExtra);
    }
    if(m_PartsCountIsSet)
    {
        val[utility::conversions::to_string_t("partsCount")] = ModelBase::toJson(m_PartsCount);
    }
    if(m_ReferenceIdIsSet)
    {
        val[utility::conversions::to_string_t("referenceId")] = ModelBase::toJson(m_ReferenceId);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    }
    if(m_RruleIsSet)
    {
        val[utility::conversions::to_string_t("rrule")] = ModelBase::toJson(m_Rrule);
    }
    if(m_CreateChatIsSet)
    {
        val[utility::conversions::to_string_t("createChat")] = ModelBase::toJson(m_CreateChat);
    }
    if(m_TtsIsSet)
    {
        val[utility::conversions::to_string_t("tts")] = ModelBase::toJson(m_Tts);
    }
    if(m_LocalIsSet)
    {
        val[utility::conversions::to_string_t("local")] = ModelBase::toJson(m_Local);
    }
    if(m_LocalCountryIsSet)
    {
        val[utility::conversions::to_string_t("localCountry")] = ModelBase::toJson(m_LocalCountry);
    }
    if(m_DestinationIsSet)
    {
        val[utility::conversions::to_string_t("destination")] = ModelBase::toJson(m_Destination);
    }
    if(m_ResourcesIsSet)
    {
        val[utility::conversions::to_string_t("resources")] = ModelBase::toJson(m_Resources);
    }

    return val;
}

void SendMessageInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("text")];
        if(!fieldValue.is_null())
        {
            setText(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("templateId")];
        if(!fieldValue.is_null())
        {
            setTemplateId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendingTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sendingTime")];
        if(!fieldValue.is_null())
        {
            setSendingTime(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendingDateTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sendingDateTime")];
        if(!fieldValue.is_null())
        {
            setSendingDateTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendingTimezone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sendingTimezone")];
        if(!fieldValue.is_null())
        {
            setSendingTimezone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contacts")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("contacts")];
        if(!fieldValue.is_null())
        {
            setContacts(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lists")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lists")];
        if(!fieldValue.is_null())
        {
            setLists(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phones")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phones")];
        if(!fieldValue.is_null())
        {
            setPhones(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cutExtra")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cutExtra")];
        if(!fieldValue.is_null())
        {
            setCutExtra(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partsCount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("partsCount")];
        if(!fieldValue.is_null())
        {
            setPartsCount(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referenceId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("referenceId")];
        if(!fieldValue.is_null())
        {
            setReferenceId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("from")];
        if(!fieldValue.is_null())
        {
            setFrom(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rrule")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("rrule")];
        if(!fieldValue.is_null())
        {
            setRrule(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createChat")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("createChat")];
        if(!fieldValue.is_null())
        {
            setCreateChat(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tts")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tts")];
        if(!fieldValue.is_null())
        {
            setTts(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("local")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("local")];
        if(!fieldValue.is_null())
        {
            setLocal(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localCountry")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("localCountry")];
        if(!fieldValue.is_null())
        {
            setLocalCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("destination")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("destination")];
        if(!fieldValue.is_null())
        {
            setDestination(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resources")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("resources")];
        if(!fieldValue.is_null())
        {
            setResources(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void SendMessageInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
        
    }
    if(m_TemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templateId"), m_TemplateId));
    }
    if(m_SendingTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendingTime"), m_SendingTime));
    }
    if(m_SendingDateTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendingDateTime"), m_SendingDateTime));
        
    }
    if(m_SendingTimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendingTimezone"), m_SendingTimezone));
        
    }
    if(m_ContactsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contacts"), m_Contacts));
        
    }
    if(m_ListsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lists"), m_Lists));
        
    }
    if(m_PhonesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phones"), m_Phones));
        
    }
    if(m_CutExtraIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cutExtra"), m_CutExtra));
    }
    if(m_PartsCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partsCount"), m_PartsCount));
    }
    if(m_ReferenceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referenceId"), m_ReferenceId));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
        
    }
    if(m_RruleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rrule"), m_Rrule));
        
    }
    if(m_CreateChatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createChat"), m_CreateChat));
    }
    if(m_TtsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tts"), m_Tts));
    }
    if(m_LocalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("local"), m_Local));
    }
    if(m_LocalCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localCountry"), m_LocalCountry));
        
    }
    if(m_DestinationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("destination"), m_Destination));
        
    }
    if(m_ResourcesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resources"), m_Resources));
        
    }
}

void SendMessageInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("text")))
    {
        setText(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("text"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateId")))
    {
        setTemplateId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("templateId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sendingTime")))
    {
        setSendingTime(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendingTime"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sendingDateTime")))
    {
        setSendingDateTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendingDateTime"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sendingTimezone")))
    {
        setSendingTimezone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendingTimezone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contacts")))
    {
        setContacts(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("contacts"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lists")))
    {
        setLists(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lists"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phones")))
    {
        setPhones(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phones"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cutExtra")))
    {
        setCutExtra(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cutExtra"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partsCount")))
    {
        setPartsCount(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("partsCount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referenceId")))
    {
        setReferenceId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("referenceId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from")))
    {
        setFrom(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("from"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rrule")))
    {
        setRrule(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("rrule"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createChat")))
    {
        setCreateChat(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createChat"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tts")))
    {
        setTts(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tts"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("local")))
    {
        setLocal(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("local"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localCountry")))
    {
        setLocalCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("localCountry"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("destination")))
    {
        setDestination(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("destination"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resources")))
    {
        setResources(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("resources"))));
    }
}

utility::string_t SendMessageInputObject::getText() const
{
    return m_Text;
}


void SendMessageInputObject::setText(utility::string_t value)
{
    m_Text = value;
    m_TextIsSet = true;
}
bool SendMessageInputObject::textIsSet() const
{
    return m_TextIsSet;
}

void SendMessageInputObject::unsetText()
{
    m_TextIsSet = false;
}

int32_t SendMessageInputObject::getTemplateId() const
{
    return m_TemplateId;
}


void SendMessageInputObject::setTemplateId(int32_t value)
{
    m_TemplateId = value;
    m_TemplateIdIsSet = true;
}
bool SendMessageInputObject::templateIdIsSet() const
{
    return m_TemplateIdIsSet;
}

void SendMessageInputObject::unsetTemplateId()
{
    m_TemplateIdIsSet = false;
}

int32_t SendMessageInputObject::getSendingTime() const
{
    return m_SendingTime;
}


void SendMessageInputObject::setSendingTime(int32_t value)
{
    m_SendingTime = value;
    m_SendingTimeIsSet = true;
}
bool SendMessageInputObject::sendingTimeIsSet() const
{
    return m_SendingTimeIsSet;
}

void SendMessageInputObject::unsetSendingTime()
{
    m_SendingTimeIsSet = false;
}

utility::string_t SendMessageInputObject::getSendingDateTime() const
{
    return m_SendingDateTime;
}


void SendMessageInputObject::setSendingDateTime(utility::string_t value)
{
    m_SendingDateTime = value;
    m_SendingDateTimeIsSet = true;
}
bool SendMessageInputObject::sendingDateTimeIsSet() const
{
    return m_SendingDateTimeIsSet;
}

void SendMessageInputObject::unsetSendingDateTime()
{
    m_SendingDateTimeIsSet = false;
}

utility::string_t SendMessageInputObject::getSendingTimezone() const
{
    return m_SendingTimezone;
}


void SendMessageInputObject::setSendingTimezone(utility::string_t value)
{
    m_SendingTimezone = value;
    m_SendingTimezoneIsSet = true;
}
bool SendMessageInputObject::sendingTimezoneIsSet() const
{
    return m_SendingTimezoneIsSet;
}

void SendMessageInputObject::unsetSendingTimezone()
{
    m_SendingTimezoneIsSet = false;
}

utility::string_t SendMessageInputObject::getContacts() const
{
    return m_Contacts;
}


void SendMessageInputObject::setContacts(utility::string_t value)
{
    m_Contacts = value;
    m_ContactsIsSet = true;
}
bool SendMessageInputObject::contactsIsSet() const
{
    return m_ContactsIsSet;
}

void SendMessageInputObject::unsetContacts()
{
    m_ContactsIsSet = false;
}

utility::string_t SendMessageInputObject::getLists() const
{
    return m_Lists;
}


void SendMessageInputObject::setLists(utility::string_t value)
{
    m_Lists = value;
    m_ListsIsSet = true;
}
bool SendMessageInputObject::listsIsSet() const
{
    return m_ListsIsSet;
}

void SendMessageInputObject::unsetLists()
{
    m_ListsIsSet = false;
}

utility::string_t SendMessageInputObject::getPhones() const
{
    return m_Phones;
}


void SendMessageInputObject::setPhones(utility::string_t value)
{
    m_Phones = value;
    m_PhonesIsSet = true;
}
bool SendMessageInputObject::phonesIsSet() const
{
    return m_PhonesIsSet;
}

void SendMessageInputObject::unsetPhones()
{
    m_PhonesIsSet = false;
}

bool SendMessageInputObject::isCutExtra() const
{
    return m_CutExtra;
}


void SendMessageInputObject::setCutExtra(bool value)
{
    m_CutExtra = value;
    m_CutExtraIsSet = true;
}
bool SendMessageInputObject::cutExtraIsSet() const
{
    return m_CutExtraIsSet;
}

void SendMessageInputObject::unsetCutExtra()
{
    m_CutExtraIsSet = false;
}

int32_t SendMessageInputObject::getPartsCount() const
{
    return m_PartsCount;
}


void SendMessageInputObject::setPartsCount(int32_t value)
{
    m_PartsCount = value;
    m_PartsCountIsSet = true;
}
bool SendMessageInputObject::partsCountIsSet() const
{
    return m_PartsCountIsSet;
}

void SendMessageInputObject::unsetPartsCount()
{
    m_PartsCountIsSet = false;
}

int32_t SendMessageInputObject::getReferenceId() const
{
    return m_ReferenceId;
}


void SendMessageInputObject::setReferenceId(int32_t value)
{
    m_ReferenceId = value;
    m_ReferenceIdIsSet = true;
}
bool SendMessageInputObject::referenceIdIsSet() const
{
    return m_ReferenceIdIsSet;
}

void SendMessageInputObject::unsetReferenceId()
{
    m_ReferenceIdIsSet = false;
}

utility::string_t SendMessageInputObject::getFrom() const
{
    return m_From;
}


void SendMessageInputObject::setFrom(utility::string_t value)
{
    m_From = value;
    m_FromIsSet = true;
}
bool SendMessageInputObject::fromIsSet() const
{
    return m_FromIsSet;
}

void SendMessageInputObject::unsetFrom()
{
    m_FromIsSet = false;
}

utility::string_t SendMessageInputObject::getRrule() const
{
    return m_Rrule;
}


void SendMessageInputObject::setRrule(utility::string_t value)
{
    m_Rrule = value;
    m_RruleIsSet = true;
}
bool SendMessageInputObject::rruleIsSet() const
{
    return m_RruleIsSet;
}

void SendMessageInputObject::unsetRrule()
{
    m_RruleIsSet = false;
}

bool SendMessageInputObject::isCreateChat() const
{
    return m_CreateChat;
}


void SendMessageInputObject::setCreateChat(bool value)
{
    m_CreateChat = value;
    m_CreateChatIsSet = true;
}
bool SendMessageInputObject::createChatIsSet() const
{
    return m_CreateChatIsSet;
}

void SendMessageInputObject::unsetCreateChat()
{
    m_CreateChatIsSet = false;
}

bool SendMessageInputObject::isTts() const
{
    return m_Tts;
}


void SendMessageInputObject::setTts(bool value)
{
    m_Tts = value;
    m_TtsIsSet = true;
}
bool SendMessageInputObject::ttsIsSet() const
{
    return m_TtsIsSet;
}

void SendMessageInputObject::unsetTts()
{
    m_TtsIsSet = false;
}

bool SendMessageInputObject::isLocal() const
{
    return m_Local;
}


void SendMessageInputObject::setLocal(bool value)
{
    m_Local = value;
    m_LocalIsSet = true;
}
bool SendMessageInputObject::localIsSet() const
{
    return m_LocalIsSet;
}

void SendMessageInputObject::unsetLocal()
{
    m_LocalIsSet = false;
}

utility::string_t SendMessageInputObject::getLocalCountry() const
{
    return m_LocalCountry;
}


void SendMessageInputObject::setLocalCountry(utility::string_t value)
{
    m_LocalCountry = value;
    m_LocalCountryIsSet = true;
}
bool SendMessageInputObject::localCountryIsSet() const
{
    return m_LocalCountryIsSet;
}

void SendMessageInputObject::unsetLocalCountry()
{
    m_LocalCountryIsSet = false;
}

utility::string_t SendMessageInputObject::getDestination() const
{
    return m_Destination;
}


void SendMessageInputObject::setDestination(utility::string_t value)
{
    m_Destination = value;
    m_DestinationIsSet = true;
}
bool SendMessageInputObject::destinationIsSet() const
{
    return m_DestinationIsSet;
}

void SendMessageInputObject::unsetDestination()
{
    m_DestinationIsSet = false;
}

utility::string_t SendMessageInputObject::getResources() const
{
    return m_Resources;
}


void SendMessageInputObject::setResources(utility::string_t value)
{
    m_Resources = value;
    m_ResourcesIsSet = true;
}
bool SendMessageInputObject::resourcesIsSet() const
{
    return m_ResourcesIsSet;
}

void SendMessageInputObject::unsetResources()
{
    m_ResourcesIsSet = false;
}

}
}
}
}

