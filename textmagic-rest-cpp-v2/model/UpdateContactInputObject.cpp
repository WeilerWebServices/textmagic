/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UpdateContactInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

UpdateContactInputObject::UpdateContactInputObject()
{
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_CompanyName = utility::conversions::to_string_t("");
    m_CompanyNameIsSet = false;
    m_Lists = utility::conversions::to_string_t("");
    m_ListsIsSet = false;
    m_Favorited = false;
    m_FavoritedIsSet = false;
    m_Blocked = false;
    m_BlockedIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
    m_CustomFieldValuesIsSet = false;
    m_Local = 0;
    m_LocalIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
}

UpdateContactInputObject::~UpdateContactInputObject()
{
}

void UpdateContactInputObject::validate()
{
    // TODO: implement validation
}

web::json::value UpdateContactInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_CompanyNameIsSet)
    {
        val[utility::conversions::to_string_t("companyName")] = ModelBase::toJson(m_CompanyName);
    }
    if(m_ListsIsSet)
    {
        val[utility::conversions::to_string_t("lists")] = ModelBase::toJson(m_Lists);
    }
    if(m_FavoritedIsSet)
    {
        val[utility::conversions::to_string_t("favorited")] = ModelBase::toJson(m_Favorited);
    }
    if(m_BlockedIsSet)
    {
        val[utility::conversions::to_string_t("blocked")] = ModelBase::toJson(m_Blocked);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_CustomFieldValues )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("customFieldValues")] = web::json::value::array(jsonArray);
        }
    }
    if(m_LocalIsSet)
    {
        val[utility::conversions::to_string_t("local")] = ModelBase::toJson(m_Local);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }

    return val;
}

void UpdateContactInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("firstName")];
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lastName")];
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("phone")];
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("email")];
        if(!fieldValue.is_null())
        {
            setEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("companyName")];
        if(!fieldValue.is_null())
        {
            setCompanyName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lists")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("lists")];
        if(!fieldValue.is_null())
        {
            setLists(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("favorited")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("favorited")];
        if(!fieldValue.is_null())
        {
            setFavorited(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blocked")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("blocked")];
        if(!fieldValue.is_null())
        {
            setBlocked(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    {
        m_CustomFieldValues.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("customFieldValues")))
        {
        for( auto& item : val[utility::conversions::to_string_t("customFieldValues")].as_array() )
        {
            if(item.is_null())
            {
                m_CustomFieldValues.push_back( std::shared_ptr<CustomFieldListItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<CustomFieldListItem> newItem(new CustomFieldListItem());
                newItem->fromJson(item);
                m_CustomFieldValues.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("local")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("local")];
        if(!fieldValue.is_null())
        {
            setLocal(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("country")];
        if(!fieldValue.is_null())
        {
            setCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void UpdateContactInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
        
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
        
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
        
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
        
    }
    if(m_CompanyNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyName"), m_CompanyName));
        
    }
    if(m_ListsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lists"), m_Lists));
        
    }
    if(m_FavoritedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("favorited"), m_Favorited));
    }
    if(m_BlockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("blocked"), m_Blocked));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_CustomFieldValues )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customFieldValues"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_LocalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("local"), m_Local));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
        
    }
}

void UpdateContactInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("firstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyName")))
    {
        setCompanyName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lists")))
    {
        setLists(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lists"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("favorited")))
    {
        setFavorited(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("favorited"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blocked")))
    {
        setBlocked(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("blocked"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    {
        m_CustomFieldValues.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("customFieldValues")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("customFieldValues"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_CustomFieldValues.push_back( std::shared_ptr<CustomFieldListItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<CustomFieldListItem> newItem(new CustomFieldListItem());
                newItem->fromJson(item);
                m_CustomFieldValues.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("local")))
    {
        setLocal(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("local"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        setCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("country"))));
    }
}

utility::string_t UpdateContactInputObject::getFirstName() const
{
    return m_FirstName;
}


void UpdateContactInputObject::setFirstName(utility::string_t value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}
bool UpdateContactInputObject::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void UpdateContactInputObject::unsetFirstName()
{
    m_FirstNameIsSet = false;
}

utility::string_t UpdateContactInputObject::getLastName() const
{
    return m_LastName;
}


void UpdateContactInputObject::setLastName(utility::string_t value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}
bool UpdateContactInputObject::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void UpdateContactInputObject::unsetLastName()
{
    m_LastNameIsSet = false;
}

utility::string_t UpdateContactInputObject::getPhone() const
{
    return m_Phone;
}


void UpdateContactInputObject::setPhone(utility::string_t value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool UpdateContactInputObject::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void UpdateContactInputObject::unsetPhone()
{
    m_PhoneIsSet = false;
}

utility::string_t UpdateContactInputObject::getEmail() const
{
    return m_Email;
}


void UpdateContactInputObject::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool UpdateContactInputObject::emailIsSet() const
{
    return m_EmailIsSet;
}

void UpdateContactInputObject::unsetEmail()
{
    m_EmailIsSet = false;
}

utility::string_t UpdateContactInputObject::getCompanyName() const
{
    return m_CompanyName;
}


void UpdateContactInputObject::setCompanyName(utility::string_t value)
{
    m_CompanyName = value;
    m_CompanyNameIsSet = true;
}
bool UpdateContactInputObject::companyNameIsSet() const
{
    return m_CompanyNameIsSet;
}

void UpdateContactInputObject::unsetCompanyName()
{
    m_CompanyNameIsSet = false;
}

utility::string_t UpdateContactInputObject::getLists() const
{
    return m_Lists;
}


void UpdateContactInputObject::setLists(utility::string_t value)
{
    m_Lists = value;
    m_ListsIsSet = true;
}
bool UpdateContactInputObject::listsIsSet() const
{
    return m_ListsIsSet;
}

void UpdateContactInputObject::unsetLists()
{
    m_ListsIsSet = false;
}

bool UpdateContactInputObject::isFavorited() const
{
    return m_Favorited;
}


void UpdateContactInputObject::setFavorited(bool value)
{
    m_Favorited = value;
    m_FavoritedIsSet = true;
}
bool UpdateContactInputObject::favoritedIsSet() const
{
    return m_FavoritedIsSet;
}

void UpdateContactInputObject::unsetFavorited()
{
    m_FavoritedIsSet = false;
}

bool UpdateContactInputObject::isBlocked() const
{
    return m_Blocked;
}


void UpdateContactInputObject::setBlocked(bool value)
{
    m_Blocked = value;
    m_BlockedIsSet = true;
}
bool UpdateContactInputObject::blockedIsSet() const
{
    return m_BlockedIsSet;
}

void UpdateContactInputObject::unsetBlocked()
{
    m_BlockedIsSet = false;
}

int32_t UpdateContactInputObject::getType() const
{
    return m_Type;
}


void UpdateContactInputObject::setType(int32_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool UpdateContactInputObject::typeIsSet() const
{
    return m_TypeIsSet;
}

void UpdateContactInputObject::unsetType()
{
    m_TypeIsSet = false;
}

std::vector<std::shared_ptr<CustomFieldListItem>>& UpdateContactInputObject::getCustomFieldValues()
{
    return m_CustomFieldValues;
}

void UpdateContactInputObject::setCustomFieldValues(std::vector<std::shared_ptr<CustomFieldListItem>> value)
{
    m_CustomFieldValues = value;
    m_CustomFieldValuesIsSet = true;
}
bool UpdateContactInputObject::customFieldValuesIsSet() const
{
    return m_CustomFieldValuesIsSet;
}

void UpdateContactInputObject::unsetCustomFieldValues()
{
    m_CustomFieldValuesIsSet = false;
}

int32_t UpdateContactInputObject::getLocal() const
{
    return m_Local;
}


void UpdateContactInputObject::setLocal(int32_t value)
{
    m_Local = value;
    m_LocalIsSet = true;
}
bool UpdateContactInputObject::localIsSet() const
{
    return m_LocalIsSet;
}

void UpdateContactInputObject::unsetLocal()
{
    m_LocalIsSet = false;
}

utility::string_t UpdateContactInputObject::getCountry() const
{
    return m_Country;
}


void UpdateContactInputObject::setCountry(utility::string_t value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool UpdateContactInputObject::countryIsSet() const
{
    return m_CountryIsSet;
}

void UpdateContactInputObject::unsetCountry()
{
    m_CountryIsSet = false;
}

}
}
}
}

