/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetContactsAutocompleteResponseItem', function() {
      beforeEach(function() {
        instance = new TextmagicClient.GetContactsAutocompleteResponseItem();
      });

      it('should create an instance of GetContactsAutocompleteResponseItem', function() {
        // TODO: update the code to test GetContactsAutocompleteResponseItem
        expect(instance).to.be.a(TextmagicClient.GetContactsAutocompleteResponseItem);
      });

      it('should have the property entityId (base name: "entityId")', function() {
        // TODO: update the code to test the property entityId
        expect(instance).to.have.property('entityId');
        // expect(instance.entityId).to.be(expectedValueLiteral);
      });

      it('should have the property entityType (base name: "entityType")', function() {
        // TODO: update the code to test the property entityType
        expect(instance).to.have.property('entityType');
        // expect(instance.entityType).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property label (base name: "label")', function() {
        // TODO: update the code to test the property label
        expect(instance).to.have.property('label');
        // expect(instance.label).to.be(expectedValueLiteral);
      });

      it('should have the property sharedBy (base name: "sharedBy")', function() {
        // TODO: update the code to test the property sharedBy
        expect(instance).to.have.property('sharedBy');
        // expect(instance.sharedBy).to.be(expectedValueLiteral);
      });

      it('should have the property isShared (base name: "isShared")', function() {
        // TODO: update the code to test the property isShared
        expect(instance).to.have.property('isShared');
        // expect(instance.isShared).to.be(expectedValueLiteral);
      });

      it('should have the property avatar (base name: "avatar")', function() {
        // TODO: update the code to test the property avatar
        expect(instance).to.have.property('avatar');
        // expect(instance.avatar).to.be(expectedValueLiteral);
      });

      it('should have the property favorited (base name: "favorited")', function() {
        // TODO: update the code to test the property favorited
        expect(instance).to.have.property('favorited');
        // expect(instance.favorited).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property countryName (base name: "countryName")', function() {
        // TODO: update the code to test the property countryName
        expect(instance).to.have.property('countryName');
        // expect(instance.countryName).to.be(expectedValueLiteral);
      });

      it('should have the property qposition (base name: "qposition")', function() {
        // TODO: update the code to test the property qposition
        expect(instance).to.have.property('qposition');
        // expect(instance.qposition).to.be(expectedValueLiteral);
      });

      it('should have the property rposition (base name: "rposition")', function() {
        // TODO: update the code to test the property rposition
        expect(instance).to.have.property('rposition');
        // expect(instance.rposition).to.be(expectedValueLiteral);
      });

    });
  });

}));
