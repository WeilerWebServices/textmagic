/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "InviteSubaccountInputObject.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

InviteSubaccountInputObject::InviteSubaccountInputObject()
{
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Role = utility::conversions::to_string_t("");
    m_RoleIsSet = false;
}

InviteSubaccountInputObject::~InviteSubaccountInputObject()
{
}

void InviteSubaccountInputObject::validate()
{
    // TODO: implement validation
}

web::json::value InviteSubaccountInputObject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_RoleIsSet)
    {
        val[utility::conversions::to_string_t("role")] = ModelBase::toJson(m_Role);
    }

    return val;
}

void InviteSubaccountInputObject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("email")];
        if(!fieldValue.is_null())
        {
            setEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("role")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("role")];
        if(!fieldValue.is_null())
        {
            setRole(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void InviteSubaccountInputObject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
        
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("role"), m_Role));
        
    }
}

void InviteSubaccountInputObject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("role")))
    {
        setRole(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("role"))));
    }
}

utility::string_t InviteSubaccountInputObject::getEmail() const
{
    return m_Email;
}


void InviteSubaccountInputObject::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool InviteSubaccountInputObject::emailIsSet() const
{
    return m_EmailIsSet;
}

void InviteSubaccountInputObject::unsetEmail()
{
    m_EmailIsSet = false;
}

utility::string_t InviteSubaccountInputObject::getRole() const
{
    return m_Role;
}


void InviteSubaccountInputObject::setRole(utility::string_t value)
{
    m_Role = value;
    m_RoleIsSet = true;
}
bool InviteSubaccountInputObject::roleIsSet() const
{
    return m_RoleIsSet;
}

void InviteSubaccountInputObject::unsetRole()
{
    m_RoleIsSet = false;
}

}
}
}
}

