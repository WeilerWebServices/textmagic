/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetMessagePreviewResponse.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

GetMessagePreviewResponse::GetMessagePreviewResponse()
{
    m_MessagesIsSet = false;
}

GetMessagePreviewResponse::~GetMessagePreviewResponse()
{
}

void GetMessagePreviewResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetMessagePreviewResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Messages )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("messages")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void GetMessagePreviewResponse::fromJson(web::json::value& val)
{
    {
        m_Messages.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("messages")))
        {
        for( auto& item : val[utility::conversions::to_string_t("messages")].as_array() )
        {
            if(item.is_null())
            {
                m_Messages.push_back( std::shared_ptr<MessageOut>(nullptr) );
            }
            else
            {
                std::shared_ptr<MessageOut> newItem(new MessageOut());
                newItem->fromJson(item);
                m_Messages.push_back( newItem );
            }
        }
        }
    }
}

void GetMessagePreviewResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Messages )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messages"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void GetMessagePreviewResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Messages.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("messages")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messages"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Messages.push_back( std::shared_ptr<MessageOut>(nullptr) );
            }
            else
            {
                std::shared_ptr<MessageOut> newItem(new MessageOut());
                newItem->fromJson(item);
                m_Messages.push_back( newItem );
            }
        }
        }
    }
}

std::vector<std::shared_ptr<MessageOut>>& GetMessagePreviewResponse::getMessages()
{
    return m_Messages;
}

void GetMessagePreviewResponse::setMessages(std::vector<std::shared_ptr<MessageOut>> value)
{
    m_Messages = value;
    m_MessagesIsSet = true;
}
bool GetMessagePreviewResponse::messagesIsSet() const
{
    return m_MessagesIsSet;
}

void GetMessagePreviewResponse::unsetMessages()
{
    m_MessagesIsSet = false;
}

}
}
}
}

