/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MessageSession.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

MessageSession::MessageSession()
{
    m_Id = 0;
    m_StartTime = utility::conversions::to_string_t("");
    m_Text = utility::conversions::to_string_t("");
    m_Source = utility::conversions::to_string_t("");
    m_ReferenceId = utility::conversions::to_string_t("");
    m_Price = 0.0;
    m_NumbersCount = 0;
    m_Destination = utility::conversions::to_string_t("");
}

MessageSession::~MessageSession()
{
}

void MessageSession::validate()
{
    // TODO: implement validation
}

web::json::value MessageSession::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("startTime")] = ModelBase::toJson(m_StartTime);
    val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);
    val[utility::conversions::to_string_t("source")] = ModelBase::toJson(m_Source);
    val[utility::conversions::to_string_t("referenceId")] = ModelBase::toJson(m_ReferenceId);
    val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);
    val[utility::conversions::to_string_t("numbersCount")] = ModelBase::toJson(m_NumbersCount);
    val[utility::conversions::to_string_t("destination")] = ModelBase::toJson(m_Destination);

    return val;
}

void MessageSession::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startTime")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("startTime")];
        if(!fieldValue.is_null())
        {
            setStartTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("text")];
        if(!fieldValue.is_null())
        {
            setText(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("source")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("source")];
        if(!fieldValue.is_null())
        {
            setSource(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referenceId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("referenceId")];
        if(!fieldValue.is_null())
        {
            setReferenceId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price")];
        if(!fieldValue.is_null())
        {
            setPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("numbersCount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("numbersCount")];
        if(!fieldValue.is_null())
        {
            setNumbersCount(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("destination")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("destination")];
        if(!fieldValue.is_null())
        {
            setDestination(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void MessageSession::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startTime"), m_StartTime));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("source"), m_Source));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referenceId"), m_ReferenceId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numbersCount"), m_NumbersCount));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("destination"), m_Destination));
}

void MessageSession::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setStartTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("startTime"))));
    setText(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("text"))));
    setSource(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("source"))));
    setReferenceId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("referenceId"))));
    setPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
    setNumbersCount(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("numbersCount"))));
    setDestination(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("destination"))));
}

int32_t MessageSession::getId() const
{
    return m_Id;
}


void MessageSession::setId(int32_t value)
{
    m_Id = value;
    
}
utility::string_t MessageSession::getStartTime() const
{
    return m_StartTime;
}


void MessageSession::setStartTime(utility::string_t value)
{
    m_StartTime = value;
    
}
utility::string_t MessageSession::getText() const
{
    return m_Text;
}


void MessageSession::setText(utility::string_t value)
{
    m_Text = value;
    
}
utility::string_t MessageSession::getSource() const
{
    return m_Source;
}


void MessageSession::setSource(utility::string_t value)
{
    m_Source = value;
    
}
utility::string_t MessageSession::getReferenceId() const
{
    return m_ReferenceId;
}


void MessageSession::setReferenceId(utility::string_t value)
{
    m_ReferenceId = value;
    
}
double MessageSession::getPrice() const
{
    return m_Price;
}


void MessageSession::setPrice(double value)
{
    m_Price = value;
    
}
int32_t MessageSession::getNumbersCount() const
{
    return m_NumbersCount;
}


void MessageSession::setNumbersCount(int32_t value)
{
    m_NumbersCount = value;
    
}
utility::string_t MessageSession::getDestination() const
{
    return m_Destination;
}


void MessageSession::setDestination(utility::string_t value)
{
    m_Destination = value;
    
}
}
}
}
}

