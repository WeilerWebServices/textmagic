/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Survey.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

Survey::Survey()
{
    m_Id = 0;
    m_Name = utility::conversions::to_string_t("");
    m_Status = utility::conversions::to_string_t("");
    m_CreatedAt = utility::datetime();
    m_UpdatedAt = utility::datetime();
    m_ReceipentsIsSet = false;
    m_CountriesIsSet = false;
}

Survey::~Survey()
{
}

void Survey::validate()
{
    // TODO: implement validation
}

web::json::value Survey::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Receipents )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("receipents")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Countries )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("countries")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Survey::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("createdAt")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updatedAt")];
        if(!fieldValue.is_null())
        {
            setUpdatedAt(ModelBase::dateFromJson(fieldValue));
        }
    }
    {
        m_Receipents.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("receipents")))
        {
        for( auto& item : val[utility::conversions::to_string_t("receipents")].as_array() )
        {
            if(item.is_null())
            {
                m_Receipents.push_back( std::shared_ptr<SurveyRecipient>(nullptr) );
            }
            else
            {
                std::shared_ptr<SurveyRecipient> newItem(new SurveyRecipient());
                newItem->fromJson(item);
                m_Receipents.push_back( newItem );
            }
        }
        }
    }
    {
        m_Countries.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("countries")))
        {
        for( auto& item : val[utility::conversions::to_string_t("countries")].as_array() )
        {
            if(item.is_null())
            {
                m_Countries.push_back( std::shared_ptr<SurveySenderCountries>(nullptr) );
            }
            else
            {
                std::shared_ptr<SurveySenderCountries> newItem(new SurveySenderCountries());
                newItem->fromJson(item);
                m_Countries.push_back( newItem );
            }
        }
        }
    }
}

void Survey::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Receipents )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("receipents"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Countries )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("countries"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void Survey::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("status"))));
    setCreatedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt"))));
    setUpdatedAt(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt"))));
    {
        m_Receipents.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("receipents")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("receipents"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Receipents.push_back( std::shared_ptr<SurveyRecipient>(nullptr) );
            }
            else
            {
                std::shared_ptr<SurveyRecipient> newItem(new SurveyRecipient());
                newItem->fromJson(item);
                m_Receipents.push_back( newItem );
            }
        }
        }
    }
    {
        m_Countries.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("countries")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("countries"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Countries.push_back( std::shared_ptr<SurveySenderCountries>(nullptr) );
            }
            else
            {
                std::shared_ptr<SurveySenderCountries> newItem(new SurveySenderCountries());
                newItem->fromJson(item);
                m_Countries.push_back( newItem );
            }
        }
        }
    }
}

int32_t Survey::getId() const
{
    return m_Id;
}


void Survey::setId(int32_t value)
{
    m_Id = value;
    
}
utility::string_t Survey::getName() const
{
    return m_Name;
}


void Survey::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t Survey::getStatus() const
{
    return m_Status;
}


void Survey::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
utility::datetime Survey::getCreatedAt() const
{
    return m_CreatedAt;
}


void Survey::setCreatedAt(utility::datetime value)
{
    m_CreatedAt = value;
    
}
utility::datetime Survey::getUpdatedAt() const
{
    return m_UpdatedAt;
}


void Survey::setUpdatedAt(utility::datetime value)
{
    m_UpdatedAt = value;
    
}
std::vector<std::shared_ptr<SurveyRecipient>>& Survey::getReceipents()
{
    return m_Receipents;
}

void Survey::setReceipents(std::vector<std::shared_ptr<SurveyRecipient>> value)
{
    m_Receipents = value;
    m_ReceipentsIsSet = true;
}
bool Survey::receipentsIsSet() const
{
    return m_ReceipentsIsSet;
}

void Survey::unsetReceipents()
{
    m_ReceipentsIsSet = false;
}

std::vector<std::shared_ptr<SurveySenderCountries>>& Survey::getCountries()
{
    return m_Countries;
}

void Survey::setCountries(std::vector<std::shared_ptr<SurveySenderCountries>> value)
{
    m_Countries = value;
    m_CountriesIsSet = true;
}
bool Survey::countriesIsSet() const
{
    return m_CountriesIsSet;
}

void Survey::unsetCountries()
{
    m_CountriesIsSet = false;
}

}
}
}
}

