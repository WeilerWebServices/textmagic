/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Currency
 */

public class Currency {
  @SerializedName("id")
  private String id = null;

  @SerializedName("unicodeSymbol")
  private String unicodeSymbol = null;

  @SerializedName("htmlSymbol")
  private String htmlSymbol = null;

  public Currency id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The 3-letter ISO currency ID.
   * @return id
  **/
  @ApiModelProperty(example = "GBP", required = true, value = "The 3-letter ISO currency ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Currency unicodeSymbol(String unicodeSymbol) {
    this.unicodeSymbol = unicodeSymbol;
    return this;
  }

   /**
   * Unicode-compatible currency symbol.
   * @return unicodeSymbol
  **/
  @ApiModelProperty(example = "Â£", required = true, value = "Unicode-compatible currency symbol.")
  public String getUnicodeSymbol() {
    return unicodeSymbol;
  }

  public void setUnicodeSymbol(String unicodeSymbol) {
    this.unicodeSymbol = unicodeSymbol;
  }

  public Currency htmlSymbol(String htmlSymbol) {
    this.htmlSymbol = htmlSymbol;
    return this;
  }

   /**
   * HTML-compatible currency symbol.
   * @return htmlSymbol
  **/
  @ApiModelProperty(example = "&pound;", required = true, value = "HTML-compatible currency symbol.")
  public String getHtmlSymbol() {
    return htmlSymbol;
  }

  public void setHtmlSymbol(String htmlSymbol) {
    this.htmlSymbol = htmlSymbol;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Currency currency = (Currency) o;
    return Objects.equals(this.id, currency.id) &&
        Objects.equals(this.unicodeSymbol, currency.unicodeSymbol) &&
        Objects.equals(this.htmlSymbol, currency.htmlSymbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, unicodeSymbol, htmlSymbol);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Currency {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    unicodeSymbol: ").append(toIndentedString(unicodeSymbol)).append("\n");
    sb.append("    htmlSymbol: ").append(toIndentedString(htmlSymbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

