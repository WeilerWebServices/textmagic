=begin
#TextMagic API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module TextMagic
  class SurveyNode
    attr_accessor :id

    attr_accessor :label

    attr_accessor :body

    attr_accessor :node_type

    attr_accessor :is_end_node

    attr_accessor :send_delay

    attr_accessor :start_nodes

    attr_accessor :end_nodes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'label' => :'label',
        :'body' => :'body',
        :'node_type' => :'nodeType',
        :'is_end_node' => :'isEndNode',
        :'send_delay' => :'sendDelay',
        :'start_nodes' => :'startNodes',
        :'end_nodes' => :'endNodes'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'label' => :'String',
        :'body' => :'String',
        :'node_type' => :'String',
        :'is_end_node' => :'BOOLEAN',
        :'send_delay' => :'Integer',
        :'start_nodes' => :'Array<String>',
        :'end_nodes' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.has_key?(:'nodeType')
        self.node_type = attributes[:'nodeType']
      end

      if attributes.has_key?(:'isEndNode')
        self.is_end_node = attributes[:'isEndNode']
      end

      if attributes.has_key?(:'sendDelay')
        self.send_delay = attributes[:'sendDelay']
      end

      if attributes.has_key?(:'startNodes')
        if (value = attributes[:'startNodes']).is_a?(Array)
          self.start_nodes = value
        end
      end

      if attributes.has_key?(:'endNodes')
        if (value = attributes[:'endNodes']).is_a?(Array)
          self.end_nodes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @label.nil?
        invalid_properties.push('invalid value for "label", label cannot be nil.')
      end

      if @body.nil?
        invalid_properties.push('invalid value for "body", body cannot be nil.')
      end

      if @node_type.nil?
        invalid_properties.push('invalid value for "node_type", node_type cannot be nil.')
      end

      if @is_end_node.nil?
        invalid_properties.push('invalid value for "is_end_node", is_end_node cannot be nil.')
      end

      if @send_delay.nil?
        invalid_properties.push('invalid value for "send_delay", send_delay cannot be nil.')
      end

      if @start_nodes.nil?
        invalid_properties.push('invalid value for "start_nodes", start_nodes cannot be nil.')
      end

      if @end_nodes.nil?
        invalid_properties.push('invalid value for "end_nodes", end_nodes cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @label.nil?
      return false if @body.nil?
      return false if @node_type.nil?
      return false if @is_end_node.nil?
      return false if @send_delay.nil?
      return false if @start_nodes.nil?
      return false if @end_nodes.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          label == o.label &&
          body == o.body &&
          node_type == o.node_type &&
          is_end_node == o.is_end_node &&
          send_delay == o.send_delay &&
          start_nodes == o.start_nodes &&
          end_nodes == o.end_nodes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, label, body, node_type, is_end_node, send_delay, start_nodes, end_nodes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TextMagic.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
