/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MessagingStatItem.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

MessagingStatItem::MessagingStatItem()
{
    m_ReplyRate = 0.0f;
    m_date = utility::datetime();
    m_DeliveryRate = 0.0f;
    m_Costs = 0.0f;
    m_MessagesReceived = 0;
    m_MessagesSentDelivered = 0;
    m_MessagesSentAccepted = 0;
    m_MessagesSentBuffered = 0;
    m_MessagesSentFailed = 0;
    m_MessagesSentRejected = 0;
    m_MessagesSentParts = 0;
}

MessagingStatItem::~MessagingStatItem()
{
}

void MessagingStatItem::validate()
{
    // TODO: implement validation
}

web::json::value MessagingStatItem::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("replyRate")] = ModelBase::toJson(m_ReplyRate);
    val[utility::conversions::to_string_t("date")] = ModelBase::toJson(m_date);
    val[utility::conversions::to_string_t("deliveryRate")] = ModelBase::toJson(m_DeliveryRate);
    val[utility::conversions::to_string_t("costs")] = ModelBase::toJson(m_Costs);
    val[utility::conversions::to_string_t("messagesReceived")] = ModelBase::toJson(m_MessagesReceived);
    val[utility::conversions::to_string_t("messagesSentDelivered")] = ModelBase::toJson(m_MessagesSentDelivered);
    val[utility::conversions::to_string_t("messagesSentAccepted")] = ModelBase::toJson(m_MessagesSentAccepted);
    val[utility::conversions::to_string_t("messagesSentBuffered")] = ModelBase::toJson(m_MessagesSentBuffered);
    val[utility::conversions::to_string_t("messagesSentFailed")] = ModelBase::toJson(m_MessagesSentFailed);
    val[utility::conversions::to_string_t("messagesSentRejected")] = ModelBase::toJson(m_MessagesSentRejected);
    val[utility::conversions::to_string_t("messagesSentParts")] = ModelBase::toJson(m_MessagesSentParts);

    return val;
}

void MessagingStatItem::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("replyRate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("replyRate")];
        if(!fieldValue.is_null())
        {
            setReplyRate(ModelBase::floatFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("date")];
        if(!fieldValue.is_null())
        {
            setDate(ModelBase::dateFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deliveryRate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("deliveryRate")];
        if(!fieldValue.is_null())
        {
            setDeliveryRate(ModelBase::floatFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("costs")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("costs")];
        if(!fieldValue.is_null())
        {
            setCosts(ModelBase::floatFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messagesReceived")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messagesReceived")];
        if(!fieldValue.is_null())
        {
            setMessagesReceived(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messagesSentDelivered")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messagesSentDelivered")];
        if(!fieldValue.is_null())
        {
            setMessagesSentDelivered(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messagesSentAccepted")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messagesSentAccepted")];
        if(!fieldValue.is_null())
        {
            setMessagesSentAccepted(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messagesSentBuffered")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messagesSentBuffered")];
        if(!fieldValue.is_null())
        {
            setMessagesSentBuffered(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messagesSentFailed")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messagesSentFailed")];
        if(!fieldValue.is_null())
        {
            setMessagesSentFailed(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messagesSentRejected")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messagesSentRejected")];
        if(!fieldValue.is_null())
        {
            setMessagesSentRejected(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messagesSentParts")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("messagesSentParts")];
        if(!fieldValue.is_null())
        {
            setMessagesSentParts(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void MessagingStatItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("replyRate"), m_ReplyRate));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date"), m_date));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deliveryRate"), m_DeliveryRate));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("costs"), m_Costs));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messagesReceived"), m_MessagesReceived));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messagesSentDelivered"), m_MessagesSentDelivered));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messagesSentAccepted"), m_MessagesSentAccepted));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messagesSentBuffered"), m_MessagesSentBuffered));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messagesSentFailed"), m_MessagesSentFailed));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messagesSentRejected"), m_MessagesSentRejected));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messagesSentParts"), m_MessagesSentParts));
}

void MessagingStatItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setReplyRate(ModelBase::floatFromHttpContent(multipart->getContent(utility::conversions::to_string_t("replyRate"))));
    setDate(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("date"))));
    setDeliveryRate(ModelBase::floatFromHttpContent(multipart->getContent(utility::conversions::to_string_t("deliveryRate"))));
    setCosts(ModelBase::floatFromHttpContent(multipart->getContent(utility::conversions::to_string_t("costs"))));
    setMessagesReceived(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messagesReceived"))));
    setMessagesSentDelivered(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messagesSentDelivered"))));
    setMessagesSentAccepted(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messagesSentAccepted"))));
    setMessagesSentBuffered(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messagesSentBuffered"))));
    setMessagesSentFailed(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messagesSentFailed"))));
    setMessagesSentRejected(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messagesSentRejected"))));
    setMessagesSentParts(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("messagesSentParts"))));
}

float MessagingStatItem::getReplyRate() const
{
    return m_ReplyRate;
}


void MessagingStatItem::setReplyRate(float value)
{
    m_ReplyRate = value;
    
}
utility::datetime MessagingStatItem::getDate() const
{
    return m_date;
}


void MessagingStatItem::setDate(utility::datetime value)
{
    m_date = value;
    
}
float MessagingStatItem::getDeliveryRate() const
{
    return m_DeliveryRate;
}


void MessagingStatItem::setDeliveryRate(float value)
{
    m_DeliveryRate = value;
    
}
float MessagingStatItem::getCosts() const
{
    return m_Costs;
}


void MessagingStatItem::setCosts(float value)
{
    m_Costs = value;
    
}
int32_t MessagingStatItem::getMessagesReceived() const
{
    return m_MessagesReceived;
}


void MessagingStatItem::setMessagesReceived(int32_t value)
{
    m_MessagesReceived = value;
    
}
int32_t MessagingStatItem::getMessagesSentDelivered() const
{
    return m_MessagesSentDelivered;
}


void MessagingStatItem::setMessagesSentDelivered(int32_t value)
{
    m_MessagesSentDelivered = value;
    
}
int32_t MessagingStatItem::getMessagesSentAccepted() const
{
    return m_MessagesSentAccepted;
}


void MessagingStatItem::setMessagesSentAccepted(int32_t value)
{
    m_MessagesSentAccepted = value;
    
}
int32_t MessagingStatItem::getMessagesSentBuffered() const
{
    return m_MessagesSentBuffered;
}


void MessagingStatItem::setMessagesSentBuffered(int32_t value)
{
    m_MessagesSentBuffered = value;
    
}
int32_t MessagingStatItem::getMessagesSentFailed() const
{
    return m_MessagesSentFailed;
}


void MessagingStatItem::setMessagesSentFailed(int32_t value)
{
    m_MessagesSentFailed = value;
    
}
int32_t MessagingStatItem::getMessagesSentRejected() const
{
    return m_MessagesSentRejected;
}


void MessagingStatItem::setMessagesSentRejected(int32_t value)
{
    m_MessagesSentRejected = value;
    
}
int32_t MessagingStatItem::getMessagesSentParts() const
{
    return m_MessagesSentParts;
}


void MessagingStatItem::setMessagesSentParts(int32_t value)
{
    m_MessagesSentParts = value;
    
}
}
}
}
}

