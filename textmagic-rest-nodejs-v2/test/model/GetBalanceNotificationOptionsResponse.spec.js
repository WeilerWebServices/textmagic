/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetBalanceNotificationOptionsResponse', function() {
      beforeEach(function() {
        instance = new TextmagicClient.GetBalanceNotificationOptionsResponse();
      });

      it('should create an instance of GetBalanceNotificationOptionsResponse', function() {
        // TODO: update the code to test GetBalanceNotificationOptionsResponse
        expect(instance).to.be.a(TextmagicClient.GetBalanceNotificationOptionsResponse);
      });

      it('should have the property _1 (base name: "1")', function() {
        // TODO: update the code to test the property _1
        expect(instance).to.have.property('_1');
        // expect(instance._1).to.be(expectedValueLiteral);
      });

      it('should have the property _2 (base name: "2")', function() {
        // TODO: update the code to test the property _2
        expect(instance).to.have.property('_2');
        // expect(instance._2).to.be(expectedValueLiteral);
      });

      it('should have the property _3 (base name: "3")', function() {
        // TODO: update the code to test the property _3
        expect(instance).to.have.property('_3');
        // expect(instance._3).to.be(expectedValueLiteral);
      });

      it('should have the property _5 (base name: "5")', function() {
        // TODO: update the code to test the property _5
        expect(instance).to.have.property('_5');
        // expect(instance._5).to.be(expectedValueLiteral);
      });

      it('should have the property _10 (base name: "10")', function() {
        // TODO: update the code to test the property _10
        expect(instance).to.have.property('_10');
        // expect(instance._10).to.be(expectedValueLiteral);
      });

      it('should have the property _20 (base name: "20")', function() {
        // TODO: update the code to test the property _20
        expect(instance).to.have.property('_20');
        // expect(instance._20).to.be(expectedValueLiteral);
      });

      it('should have the property _30 (base name: "30")', function() {
        // TODO: update the code to test the property _30
        expect(instance).to.have.property('_30');
        // expect(instance._30).to.be(expectedValueLiteral);
      });

      it('should have the property _50 (base name: "50")', function() {
        // TODO: update the code to test the property _50
        expect(instance).to.have.property('_50');
        // expect(instance._50).to.be(expectedValueLiteral);
      });

      it('should have the property _100 (base name: "100")', function() {
        // TODO: update the code to test the property _100
        expect(instance).to.have.property('_100');
        // expect(instance._100).to.be(expectedValueLiteral);
      });

      it('should have the property _500 (base name: "500")', function() {
        // TODO: update the code to test the property _500
        expect(instance).to.have.property('_500');
        // expect(instance._500).to.be(expectedValueLiteral);
      });

      it('should have the property _1000 (base name: "1000")', function() {
        // TODO: update the code to test the property _1000
        expect(instance).to.have.property('_1000');
        // expect(instance._1000).to.be(expectedValueLiteral);
      });

    });
  });

}));
