/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextmagicClient);
  }
}(this, function(expect, TextmagicClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SendMessageInputObject', function() {
      beforeEach(function() {
        instance = new TextmagicClient.SendMessageInputObject();
      });

      it('should create an instance of SendMessageInputObject', function() {
        // TODO: update the code to test SendMessageInputObject
        expect(instance).to.be.a(TextmagicClient.SendMessageInputObject);
      });

      it('should have the property text (base name: "text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property templateId (base name: "templateId")', function() {
        // TODO: update the code to test the property templateId
        expect(instance).to.have.property('templateId');
        // expect(instance.templateId).to.be(expectedValueLiteral);
      });

      it('should have the property sendingTime (base name: "sendingTime")', function() {
        // TODO: update the code to test the property sendingTime
        expect(instance).to.have.property('sendingTime');
        // expect(instance.sendingTime).to.be(expectedValueLiteral);
      });

      it('should have the property sendingDateTime (base name: "sendingDateTime")', function() {
        // TODO: update the code to test the property sendingDateTime
        expect(instance).to.have.property('sendingDateTime');
        // expect(instance.sendingDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property sendingTimezone (base name: "sendingTimezone")', function() {
        // TODO: update the code to test the property sendingTimezone
        expect(instance).to.have.property('sendingTimezone');
        // expect(instance.sendingTimezone).to.be(expectedValueLiteral);
      });

      it('should have the property contacts (base name: "contacts")', function() {
        // TODO: update the code to test the property contacts
        expect(instance).to.have.property('contacts');
        // expect(instance.contacts).to.be(expectedValueLiteral);
      });

      it('should have the property lists (base name: "lists")', function() {
        // TODO: update the code to test the property lists
        expect(instance).to.have.property('lists');
        // expect(instance.lists).to.be(expectedValueLiteral);
      });

      it('should have the property phones (base name: "phones")', function() {
        // TODO: update the code to test the property phones
        expect(instance).to.have.property('phones');
        // expect(instance.phones).to.be(expectedValueLiteral);
      });

      it('should have the property cutExtra (base name: "cutExtra")', function() {
        // TODO: update the code to test the property cutExtra
        expect(instance).to.have.property('cutExtra');
        // expect(instance.cutExtra).to.be(expectedValueLiteral);
      });

      it('should have the property partsCount (base name: "partsCount")', function() {
        // TODO: update the code to test the property partsCount
        expect(instance).to.have.property('partsCount');
        // expect(instance.partsCount).to.be(expectedValueLiteral);
      });

      it('should have the property referenceId (base name: "referenceId")', function() {
        // TODO: update the code to test the property referenceId
        expect(instance).to.have.property('referenceId');
        // expect(instance.referenceId).to.be(expectedValueLiteral);
      });

      it('should have the property from (base name: "from")', function() {
        // TODO: update the code to test the property from
        expect(instance).to.have.property('from');
        // expect(instance.from).to.be(expectedValueLiteral);
      });

      it('should have the property rrule (base name: "rrule")', function() {
        // TODO: update the code to test the property rrule
        expect(instance).to.have.property('rrule');
        // expect(instance.rrule).to.be(expectedValueLiteral);
      });

      it('should have the property createChat (base name: "createChat")', function() {
        // TODO: update the code to test the property createChat
        expect(instance).to.have.property('createChat');
        // expect(instance.createChat).to.be(expectedValueLiteral);
      });

      it('should have the property tts (base name: "tts")', function() {
        // TODO: update the code to test the property tts
        expect(instance).to.have.property('tts');
        // expect(instance.tts).to.be(expectedValueLiteral);
      });

      it('should have the property local (base name: "local")', function() {
        // TODO: update the code to test the property local
        expect(instance).to.have.property('local');
        // expect(instance.local).to.be(expectedValueLiteral);
      });

      it('should have the property localCountry (base name: "localCountry")', function() {
        // TODO: update the code to test the property localCountry
        expect(instance).to.have.property('localCountry');
        // expect(instance.localCountry).to.be(expectedValueLiteral);
      });

      it('should have the property destination (base name: "destination")', function() {
        // TODO: update the code to test the property destination
        expect(instance).to.have.property('destination');
        // expect(instance.destination).to.be(expectedValueLiteral);
      });

      it('should have the property resources (base name: "resources")', function() {
        // TODO: update the code to test the property resources
        expect(instance).to.have.property('resources');
        // expect(instance.resources).to.be(expectedValueLiteral);
      });

    });
  });

}));
