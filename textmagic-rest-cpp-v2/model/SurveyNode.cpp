/**
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SurveyNode.h"

namespace com {
namespace textmagic {
namespace client {
namespace model {

SurveyNode::SurveyNode()
{
    m_Id = 0;
    m_Label = utility::conversions::to_string_t("");
    m_Body = utility::conversions::to_string_t("");
    m_NodeType = utility::conversions::to_string_t("");
    m_IsEndNode = false;
    m_SendDelay = 0;
}

SurveyNode::~SurveyNode()
{
}

void SurveyNode::validate()
{
    // TODO: implement validation
}

web::json::value SurveyNode::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    val[utility::conversions::to_string_t("nodeType")] = ModelBase::toJson(m_NodeType);
    val[utility::conversions::to_string_t("isEndNode")] = ModelBase::toJson(m_IsEndNode);
    val[utility::conversions::to_string_t("sendDelay")] = ModelBase::toJson(m_SendDelay);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_StartNodes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("startNodes")] = web::json::value::array(jsonArray);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_EndNodes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("endNodes")] = web::json::value::array(jsonArray);
    }

    return val;
}

void SurveyNode::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("label")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("label")];
        if(!fieldValue.is_null())
        {
            setLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("body")];
        if(!fieldValue.is_null())
        {
            setBody(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("nodeType")];
        if(!fieldValue.is_null())
        {
            setNodeType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isEndNode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("isEndNode")];
        if(!fieldValue.is_null())
        {
            setIsEndNode(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendDelay")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sendDelay")];
        if(!fieldValue.is_null())
        {
            setSendDelay(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    {
        m_StartNodes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("startNodes")))
        {
        for( auto& item : val[utility::conversions::to_string_t("startNodes")].as_array() )
        {
            m_StartNodes.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_EndNodes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("endNodes")))
        {
        for( auto& item : val[utility::conversions::to_string_t("endNodes")].as_array() )
        {
            m_EndNodes.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

void SurveyNode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeType"), m_NodeType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEndNode"), m_IsEndNode));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendDelay"), m_SendDelay));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_StartNodes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startNodes"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_EndNodes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endNodes"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void SurveyNode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("label"))));
    setBody(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("body"))));
    setNodeType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeType"))));
    setIsEndNode(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEndNode"))));
    setSendDelay(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendDelay"))));
    {
        m_StartNodes.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("startNodes"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_StartNodes.push_back(ModelBase::stringFromJson(item));
        }
    }
    {
        m_EndNodes.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("endNodes"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_EndNodes.push_back(ModelBase::stringFromJson(item));
        }
    }
}

int32_t SurveyNode::getId() const
{
    return m_Id;
}


void SurveyNode::setId(int32_t value)
{
    m_Id = value;
    
}
utility::string_t SurveyNode::getLabel() const
{
    return m_Label;
}


void SurveyNode::setLabel(utility::string_t value)
{
    m_Label = value;
    
}
utility::string_t SurveyNode::getBody() const
{
    return m_Body;
}


void SurveyNode::setBody(utility::string_t value)
{
    m_Body = value;
    
}
utility::string_t SurveyNode::getNodeType() const
{
    return m_NodeType;
}


void SurveyNode::setNodeType(utility::string_t value)
{
    m_NodeType = value;
    
}
bool SurveyNode::isIsEndNode() const
{
    return m_IsEndNode;
}


void SurveyNode::setIsEndNode(bool value)
{
    m_IsEndNode = value;
    
}
int32_t SurveyNode::getSendDelay() const
{
    return m_SendDelay;
}


void SurveyNode::setSendDelay(int32_t value)
{
    m_SendDelay = value;
    
}
std::vector<utility::string_t>& SurveyNode::getStartNodes()
{
    return m_StartNodes;
}

void SurveyNode::setStartNodes(std::vector<utility::string_t> value)
{
    m_StartNodes = value;
    
}
std::vector<utility::string_t>& SurveyNode::getEndNodes()
{
    return m_EndNodes;
}

void SurveyNode::setEndNodes(std::vector<utility::string_t> value)
{
    m_EndNodes = value;
    
}
}
}
}
}

